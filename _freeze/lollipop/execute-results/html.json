{
  "hash": "7faee41214fb13ff1a02ed2fd3d2d526",
  "result": {
    "engine": "knitr",
    "markdown": "# Lollipop {#sec-lollipop}\n\n## PKG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(patchwork)\nshowtext::showtext.auto() \n```\n:::\n\n\n## lollipop\n\n`Lollipop plot` 本质上是`bar plot` 的变种，主要用于展示 分类变量 vs 数值变量 的关系。\n\n这里有一个例子，展示了 2017 年 20 个最大出口国出口的武器数量：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 读取数据：从指定的 csv 文件读取数据\ndata <- read_csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/7_OneCatOneNum.csv\")\n\n# 绘制 Lollipop 图\ndata |>\n    filter(!is.na(Value)) |> # 过滤掉 Value 为 NA 的行\n    arrange(Value) |> # 按 Value 升序排列\n    tail(20) |> # 取出 Value 最大的 20 个国家\n    mutate(Country = factor(Country, Country)) |> # 保持国家顺序\n    ggplot(aes(y = Country, x = Value)) + # 设置 x, y 轴\n    geom_segment(\n        # 绘制竖线（lollipop 的“棒”）\n        aes(x = 0, y = Country, xend = Value, yend = Country),\n        color = \"grey\"\n    ) +\n    geom_point(size = 3, color = \"#69b3a2\") + # 绘制点（lollipop 的“糖”）\n    theme_ipsum() + # 使用 hrbrthemes 包的主题\n    theme(\n        panel.grid.minor.y = element_blank(), # 去除次要网格线\n        panel.grid.major.y = element_blank(), # 去除主要网格线\n        legend.position = \"none\" # 不显示图例\n    ) +\n    labs(\n        y = \"\",\n        x = \"武器出口数量\",\n    )\n```\n\n::: {.cell-output-display}\n![2017 年 20 个最大出口国的武器出口数量](lollipop_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n与条形图相比, 有多个高度相同的条形时，`Lollipop plot` 特别有用：可以避免出现 cluttered 图形和摩尔效应。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构造一个包含 20 个分组和对应数值的数据框\ndon <- data.frame(\n  group = LETTERS[1:20], # 分组名称为 A~T\n  val = 20 + rnorm(20)   # 每组的数值为 20 加上正态分布噪声\n)\n\n# 绘制条形图（Bar Plot）\np1 <- don |>\n    arrange(val) |> # 按数值升序排列\n    mutate(group = factor(group, group)) |> # 保持分组顺序\n    ggplot(aes(x = group, y = val)) + # 设置 x, y 轴\n      geom_bar(stat = \"identity\", fill = \"#69b3a2\") + # 绘制条形\n      coord_flip() + # 翻转坐标轴，使分组在 y 轴\n      theme_ipsum() + # 使用 hrbrthemes 包的主题\n      theme(\n        panel.grid.minor.y = element_blank(), # 去除次要网格线\n        panel.grid.major.y = element_blank(), # 去除主要网格线\n        legend.position = \"none\" # 不显示图例\n      ) +\n      xlab(\"\") + # 不显示 x 轴标签\n      ylab(\"Weapon quantity (SIPRI trend-indicator value)\") # 设置 y 轴标签\n\n# 绘制棒棒糖图（Lollipop Plot）\np2 <- don |>\n    arrange(val) |> # 按数值升序排列\n    mutate(group = factor(group, group)) |> # 保持分组顺序\n    ggplot(aes(x = group, y = val)) + # 设置 x, y 轴\n      geom_segment(aes(x = group, xend = group, y = 0, yend = val), color = \"grey\") + # 绘制竖线（棒棒糖的“棒”）\n      geom_point(size = 3, color = \"#69b3a2\") + # 绘制点（棒棒糖的“糖”）\n      coord_flip() + # 翻转坐标轴\n      theme_ipsum() + # 使用 hrbrthemes 包的主题\n      theme(\n        panel.grid.minor.y = element_blank(), # 去除次要网格线\n        panel.grid.major.y = element_blank(), # 去除主要网格线\n        legend.position = \"none\" # 不显示图例\n      ) +\n      xlab(\"\") + # 不显示 x 轴标签\n      ylab(\"Weapon quantity (SIPRI trend-indicator value)\") # 设置 y 轴标签\n\n# 并排显示条形图和棒棒糖图\np1 + p2\n```\n\n::: {.cell-output-display}\n![条形图和棒棒糖图的比较](lollipop_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n两组比较非常优雅:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构造数据：生成 26 个分组（A~Z），每组有两个数值 value1 和 value2\nvalue1 <- abs(rnorm(26)) * 2 # 生成 26 个正态分布的随机数，取绝对值并放大\ndon <- data.frame(\n  x = LETTERS[1:26], # 分组名称为 A~Z\n  value1 = value1,   # 第一组数值\n  value2 = value1 + 1 + rnorm(26, sd = 1) # 第二组数值，在 value1 基础上加 1 并加噪声\n) |>\n  rowwise() |>\n  mutate(mymean = mean(c(value1, value2))) |> # 计算每组的均值\n  arrange(mymean) |> # 按均值升序排列\n  mutate(x = factor(x, x)) # 保持分组顺序\n\n# 绘制两组比较的棒棒糖图\nggplot(don) +\n  # 绘制两组数值之间的线段（灰色，表示两组的差异）\n  geom_segment(aes(x = x, xend = x, y = value1, yend = value2), color = \"grey\") +\n  # 绘制第一组的点（绿色）\n  geom_point(aes(x = x, y = value1), color = rgb(0.2, 0.7, 0.1, 0.8), size = 3) +\n  # 绘制第二组的点（红色）\n  geom_point(aes(x = x, y = value2), color = rgb(0.7, 0.2, 0.1, 0.8), size = 3) +\n  coord_flip() + # 翻转坐标轴，使分组在 y 轴\n  theme_ipsum() + # 使用 hrbrthemes 包的主题\n  theme(\n    legend.position = \"none\", # 不显示图例\n    panel.border = element_blank() # 去除面板边框\n  ) +\n  xlab(\"\") + # 不显示 x 轴标签\n  ylab(\"Y 值\")  # 设置 y 轴标签\n```\n\n::: {.cell-output-display}\n![两组比较的棒棒糖图](lollipop_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n当子组数量在 3 到~7 之间时，这种类型的棒棒糖图也很不错：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构造数据：每个分组有 6 个子组，共 4 个分组（grp1~grp4），每个子组有一个数值 val\nvalue1 <- abs(rnorm(6)) * 2 # 生成 6 个正态分布的随机数，取绝对值并放大\ndon <- data.frame(\n  x = LETTERS[1:24], # 子组名称为 A~X\n  val = c(\n    value1, # grp1 的数值\n    value1 + 1 + rnorm(6, 14, 1), # grp2 的数值，在 value1 基础上加 1 和噪声\n    value1 + 1 + rnorm(6, sd = 1), # grp3 的数值，在 value1 基础上加 1 和噪声\n    value1 + 1 + rnorm(6, 12, 1) # grp4 的数值，在 value1 基础上加 1 和噪声\n  ),\n  grp = rep(c(\"grp1\", \"grp2\", \"grp3\", \"grp4\"), each = 6) # 分组标签\n) |>\n  arrange(val) |> # 按数值升序排列\n  mutate(x = factor(x, x)) # 保持子组顺序\n\n# 绘制分面棒棒糖图，每个分面对应一个分组\nggplot(don) +\n  geom_segment(aes(x = x, xend = x, y = 0, yend = val), color = \"grey\") + # 绘制竖线（棒棒糖的“棒”）\n  geom_point(aes(x = x, y = val, color = grp), size = 3) + # 绘制点（棒棒糖的“糖”），不同分组不同颜色\n  coord_flip() + # 翻转坐标轴，使子组在 y 轴\n  theme_ipsum() + # 使用 hrbrthemes 包的主题\n  theme(\n    legend.position = \"none\", # 不显示图例\n    panel.border = element_blank(), # 去除面板边框\n    panel.spacing = unit(0.1, \"lines\"), # 分面间距\n    strip.text.x = element_text(size = 8) # 分面标题字体大小\n  ) +\n  xlab(\"\") + # 不显示 x 轴标签\n  ylab(\"Value of Y\") + # 设置 y 轴标签\n  facet_wrap(~grp, ncol = 1, scale = \"free_y\") # 按分组分面显示，每列一个分组，y 轴自适应\n```\n\n::: {.cell-output-display}\n![分面棒棒糖图](lollipop_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n注意: \n\n- 排序: 如果你的分类变量的级别没有明显的顺序，就按照它们的值对条形进行排序。\n- 如果必须保持未排序状态，最好使用条形图。棒棒糖图会更难阅读。\n- 想要反应每组有多个值？不要使用棒棒糖图。即使带有误差线，它也会隐藏信息，而其他类型的图形如箱线图或小提琴图则更合适。\n- 使用水平版本，标签更容易阅读\n\n## `ggplot2`\n\n`geom_point()` 表示棒棒糖的**糖**，使用 `geom_segment()` 表示棒棒糖的**棒**。\n\n### 基本\n\n两个数值变量: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(x = seq(1, 30), y = abs(rnorm(30)))\n\nggplot(data, aes(x = x, y = y)) +\n  geom_point() +\n  geom_segment(aes(x = x, y = 0, xend = x, yend = y)) # 起始点的坐标\n```\n\n::: {.cell-output-display}\n![两个数值变量的棒棒糖图](lollipop_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n分类变量 vs 数值变量: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(\n  letter = LETTERS[1:26],\n  value = abs(rnorm(26))\n)\n\nggplot(data, aes(x = letter, y = value)) +\n  geom_point() +\n  geom_segment(aes(x = letter, y = 0, xend = letter, yend = value))\n```\n\n::: {.cell-output-display}\n![分类变量 vs 数值变量的棒棒糖图](lollipop_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### 定制\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = letter, y = value)) +\n  geom_segment(aes(x = letter, y = 0, xend = letter, yend = value)) +\n  geom_point(\n    size = 5,\n    color = \"red\", # 设置点边框的颜色\n    fill = alpha(\"orange\", 0.3), # 使用 alpha 函数设置填充颜色的透明度\n    alpha = 0.7,\n    shape = 21,\n    stroke = 2\n  )\n```\n\n::: {.cell-output-display}\n![美化棒棒糖的“糖”](lollipop_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = letter, y = value)) +\n  geom_segment(\n    aes(x = letter, y = 0, xend = letter, yend = value),\n    size = 1,\n    color = \"blue\",\n    linetype = \"dotdash\"\n  ) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![美化棒棒糖的“棒”](lollipop_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x=letter, y=value)) +\n  geom_segment( aes(x=letter, xend=letter, y=0, yend=value), color=\"grey\") +\n  geom_point( color=\"orange\", size=4) +\n  theme_light() +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.x = element_blank()\n  ) +\n  xlab(\"\") +\n  ylab(\"Value of Y\")\n```\n\n::: {.cell-output-display}\n![美化棒棒糖的“棒”和“糖” (主题)](lollipop_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### 水平\n\n通过改变 `x = ` 和 `y = ` 的映射，可以创建水平棒棒糖图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = value, y = letter)) +\n  geom_segment(aes(x = 0, y = letter, xend = value, yend = letter), color = \"skyblue\") +\n  geom_point(color = \"blue\", size = 4, alpha = 0.6) +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![水平棒棒糖图](lollipop_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### 基线\n\n只需要改变 `geom_segment()` 映射即可。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = letter, y = value)) +\n  geom_segment(aes(x = letter, y = 1, xend = letter, yend = value), color = \"grey\") +\n  geom_point(color = \"orange\", size = 4) +\n  theme_light() +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.x = element_blank()\n  ) +\n  xlab(\"\") +\n  ylab(\"Value of Y\")\n```\n\n::: {.cell-output-display}\n![](lollipop_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### 排序\n\n`fct_reorder()` 可以用于对分类变量进行排序。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(\n  name = c(\n    \"north\",\n    \"south\",\n    \"south-east\",\n    \"north-west\",\n    \"south-west\",\n    \"north-east\",\n    \"west\",\n    \"east\"\n  ),\n  val = sample(seq(1, 10), 8)\n)\n\n\n# 使用 fct_reorder 对 name 进行升序排序\nggplot(data, aes(x = fct_reorder(name, val), y = val)) +\n  geom_segment(aes(xend = name, yend = 0)) +\n  geom_point(size = 4, color = \"orange\") +\n  coord_flip() +\n  theme_bw() +\n  xlab(\"\")\n```\n\n::: {.cell-output-display}\n![](lollipop_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### 哑铃\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 生成数据：26 个分组（A~Z），每组有两个数值 value1 和 value2\nvalue1 <- abs(rnorm(26)) * 2 # 生成 26 个正态分布的随机数，取绝对值并放大\ndata <- data.frame(\n  x = LETTERS[1:26], # 分组名称为 A~Z\n  value1 = value1,   # 第一组数值\n  value2 = value1 + 1 + rnorm(26, sd = 1) # 第二组数值，在 value1 基础上加 1 并加噪声\n)\n\n# 使用每组均值对数据进行排序，便于图形展示\ndata <- data |>\n  rowwise() |>\n  mutate(mymean = mean(c(value1, value2))) |> # 计算每组的均值\n  arrange(mymean) |> # 按均值升序排列\n  mutate(x = factor(x, x)) # 保持分组顺序\n\n# 绘制哑铃图\nggplot(data) +\n  # 绘制两组数值之间的线段（灰色，表示两组的差异）\n  geom_segment(\n    aes(x = x, xend = x, y = value1, yend = value2),\n    color = \"grey\"\n  ) +\n  # 绘制第一组的点（绿色）\n  geom_point(\n    aes(x = x, y = value1),\n    color = rgb(0.2, 0.7, 0.1, 0.5),\n    size = 3\n  ) +\n  # 绘制第二组的点（红色）\n  geom_point(\n    aes(x = x, y = value2),\n    color = rgb(0.7, 0.2, 0.1, 0.5),\n    size = 3\n  ) +\n  coord_flip() + # 翻转坐标轴，使分组在 y 轴\n  theme_ipsum() + # 使用 hrbrthemes 包的主题\n  theme(\n    legend.position = \"none\", # 不显示图例\n  ) +\n  xlab(\"\") + # 不显示 x 轴标签\n  ylab(\"Y 值\") # 设置 y 轴标签\n```\n\n::: {.cell-output-display}\n![哑铃图（Dumbbell plot）展示两组数值的比较](lollipop_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 高亮\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建数据\nset.seed(1000)\ndata <- data.frame(\n  x = LETTERS[1:26],           # 分组名称为A~Z\n  y = abs(rnorm(26))           # 每组的数值为正态分布的绝对值\n)\n\n# 对数据按y值升序排序，并保持x的顺序\ndata <- data |>\n  arrange(y) |>\n  mutate(x = factor(x, x))\n\n# 绘制棒棒糖图\np <- ggplot(data, aes(x = x, y = y)) +\n  # 绘制“棒”，高亮A组和D组\n  geom_segment(\n    aes(x = x, xend = x, y = 0, yend = y),\n    color = ifelse(data$x %in% c(\"A\", \"D\"), \"orange\", \"grey\"), # A和D为橙色，其余为灰色\n    size = ifelse(data$x %in% c(\"A\", \"D\"), 1.3, 0.7)           # A和D加粗\n  ) +\n  # 绘制“糖”，高亮A组和D组\n  geom_point(\n    color = ifelse(data$x %in% c(\"A\", \"D\"), \"orange\", \"grey\"), # A和D为橙色，其余为灰色\n    size = ifelse(data$x %in% c(\"A\", \"D\"), 5, 2)               # A和D加大\n  ) +\n  theme_ipsum() +                # 使用hrbrthemes包的主题\n  coord_flip() +                 # 翻转坐标轴，分组在y轴\n  theme(\n    legend.position = \"none\"     # 不显示图例\n  ) +\n  xlab(\"\") +                     # 不显示x轴标签\n  ylab(\"Value of Y\") +           # 设置y轴标签\n  ggtitle(\"How did groups A and D perform?\") # 设置标题\n\n# 添加注释文本，突出A组和D组\np +\n  annotate(\n    \"text\",\n    x = grep(\"D\", data$x), # D组的位置\n    y = data$y[which(data$x == \"D\")] * 1.2, # D组y值的1.2倍\n    label = \"Group D is very impressive\",    # 注释内容\n    color = \"orange\",                        # 注释颜色\n    size = 4,                                # 字体大小\n    angle = 0,                               # 角度\n    fontface = \"bold\",                       # 加粗\n    hjust = 0                                # 左对齐\n  ) +\n  annotate(\n    \"text\",\n    x = grep(\"A\", data$x), # A组的位置\n    y = data$y[which(data$x == \"A\")] * 1.2, # A组y值的1.2倍\n    label = paste(\n      \"Group A is not too bad\\n (val=\",\n      data$y[which(data$x == \"A\")] |> round(2),\n      \")\",\n      sep = \"\"\n    ),                                       # 注释内容，包含A组的数值\n    color = \"orange\",                        # 注释颜色\n    size = 4,                                # 字体大小\n    angle = 0,                               # 角度\n    fontface = \"bold\",                       # 加粗\n    hjust = 0                                # 左对齐\n  )\n```\n\n::: {.cell-output-display}\n![高亮显示A组和D组的棒棒糖图](lollipop_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### 条件颜色\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 生成数据：x为0到2π的100个等间隔点，y为sin(x)加上正态噪声\nx <- seq(0, 2*pi, length.out=100)\ndata <- data.frame(\n  x = x, \n  y = sin(x) + rnorm(100, sd = 0.2)\n)\n\n# 添加一列mycolor，根据y值正负分类\ndata <- data |>\n  mutate(mycolor = ifelse(y > 0, \"type1\", \"type2\"))\n\n# 绘制棒棒糖图\nggplot(data, aes(x = x, y = y)) +\n  # 绘制“棒”，根据mycolor着色\n  geom_segment(\n    aes(x = x, xend = x, y = 0, yend = y, color = mycolor),\n    size = 1.3,\n    alpha = 0.9\n  ) +\n  theme_light() + # 使用浅色主题\n  theme(\n    legend.position = \"none\",      # 不显示图例\n    panel.border = element_blank() # 去除面板边框\n  ) +\n  xlab(\"\") +                      # 不显示x轴标签\n  ylab(\"Value of Y\")              # 设置y轴标签\n```\n\n::: {.cell-output-display}\n![条件着色的棒棒糖图，根据y值正负显示不同颜色](lollipop_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Pearl\n\n[![任天堂 64 上的 Mario Kart 64 赛车游戏的世界纪录](./image/nintendo.png)](https://r-graph-gallery.com/web-lollipop-plot-with-r-mario-kart-64-world-records.html)\n\n[![扩展哑铃图，展示额外的分组均值和标准差](./image/extended-dumbbell.png)](https://r-graph-gallery.com/web-extended-dumbbell-plot-ggplot2.html)\n\n[![办公室评分](./image/office.png)](https://r-graph-gallery.com/web-lollipop-plot-with-R-the-office.html)\n\n[![带间隙列的哑铃图](./image/gap-column.png)](https://r-graph-gallery.com/web-dumbbell-chart-with-a-gap-column.html)\n\n[![定制注释的哑铃图](./image/dumbell-annotation.png)](https://r-graph-gallery.com/web-dumbell-chart.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}