{
  "hash": "143bc83b4431978065e8f9a13911d195",
  "result": {
    "engine": "knitr",
    "markdown": "# Correlogram {#sec-correlogram}\n\n`GGally::ggpairs()` 可以绘制好看的相关性图：\n\n## PKG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(GGally)\nlibrary(tidyverse)\nlibrary(corrgram) # 相关性图\nlibrary(ellipse) # 椭圆\nlibrary(RColorBrewer) # 调色板\nlibrary(car) # 线性回归诊断\n```\n:::\n\n\n\n## `ggpairs()`\n\n### 基础\n\n- 对角线是单变量分布密度曲线\n- 右上方是相关系数和显著性\n- 左下方是散点图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构造示例数据\ndata <- data.frame(\n  v1 = 1:100 + rnorm(100, sd = 20),\n  v2 = 1:100 + rnorm(100, sd = 27),\n  v3 = rep(1, 100) + rnorm(100, sd = 1)\n)\ndata$v4 = data$v1**2\ndata$v5 = -(data$v1**2)\n\n# 绘图\nggpairs(data, title = \"correlogram with ggpairs()\")\n```\n\n::: {.cell-output-display}\n![ggpairs() 绘制相关性图](correlogram_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### split\n\n通过 `ggpairs()` 的 `mapping` 参数可以指定不同的美学映射，从而实现分组绘图：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用了color参数\nggpairs(flea, columns = 2:4, aes(colour=species)) \n```\n\n::: {.cell-output-display}\n![ggpairs() 分组绘图](correlogram_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n带有颜色的 `ggpairs()` 相关性图，非常美观：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(\n    mtcars[, c(1, 3:7)],\n    columnLabels = c(\n        \"Miles\",\n        \"Displacement\",\n        \"Horsepower\",\n        \"Rear axle ratio\",\n        \"Weight\",\n        \"1/4 mile time\"\n    ),\n    # 这里将 mtcars$vs 转换为因子，作为分组变量上色\n    aes(color = factor(mtcars$vs)),  # <--- 主要修改在这里\n    # 上三角显示相关系数\n    upper = list(continuous = wrap('cor', size = 3)),\n    # 下三角显示分组直方图\n    lower = list(combo = wrap(\"facethist\", bins = 30)),\n    # 对角线显示密度图\n    diag = list(continuous = wrap(\"densityDiag\", alpha = 0.5)),\n    # 图标题\n    title = \"Scatterplot matrix of `mtcars` Grouped by Engine\"\n)\n```\n\n::: {.cell-output-display}\n![带有颜色的 ggpairs() 相关性图](correlogram_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### type\n\n`upper`、`lower` 和 `diag` 参数修改图的类型\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用 ggpairs() 并通过 upper、lower 参数自定义图的类型\nggpairs(\n    reshape::tips[, c(1, 3, 4, 2)],\n    # 上三角连续型变量用密度图，组合型用无分面箱线图\n    upper = list(continuous = \"density\", combo = \"box_no_facet\"),\n    # 下三角连续型变量用散点图，组合型用无分面点图\n    lower = list(continuous = \"points\", combo = \"dot_no_facet\")\n)\n```\n\n::: {.cell-output-display}\n![upper、lower 和 diag 参数 修改图的类型](correlogram_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## `ggcorr()`\n\n`ggcorr()` 可以绘制一种朴素的相关性图\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data是之前构建的数据\nggcorr(data, method = c(\"everything\", \"pearson\"))\n```\n\n::: {.cell-output-display}\n![ggcorr() 绘制相关性图](correlogram_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## `corrgram()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 第一种：下三角为色块，上三角为饼图，主对角线为变量名\ncorrgram(\n    mtcars, \n    order = TRUE, \n    lower.panel = panel.shade,    # 下三角用色块表示相关性\n    upper.panel = panel.pie,      # 上三角用饼图表示相关性\n    text.panel = panel.txt,       # 主对角线显示变量名\n    main = \"Car Milage Data in PC2/PC1 Order\"\n) \n```\n\n::: {.cell-output-display}\n![corrgram() 绘制相关性图](correlogram_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 第二种：下三角为椭圆，上三角为点图，对角线为极值\ncorrgram(\n    mtcars, \n    order = TRUE, \n    lower.panel = panel.ellipse,  # 下三角用椭圆表示相关性\n    upper.panel = panel.pts,      # 上三角用点图表示相关性\n    text.panel = panel.txt,       # 主对角线显示变量名\n    diag.panel = panel.minmax,    # 对角线显示极值\n    main = \"Car Milage Data in PC2/PC1 Order\"\n) \n```\n\n::: {.cell-output-display}\n![corrgram() 绘制相关性图](correlogram_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# 第三种：下三角为色块，上三角不显示，主对角线为变量名，不排序\ncorrgram(\n    mtcars, \n    order = NULL, \n    lower.panel = panel.shade,    # 下三角用色块表示相关性\n    upper.panel = NULL,           # 上三角不显示\n    text.panel = panel.txt,       # 主对角线显示变量名\n    main = \"Car Milage Data (unsorted)\"\n)\n```\n\n::: {.cell-output-display}\n![corrgram() 绘制相关性图](correlogram_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n:::\n\n\n\n## 椭圆\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(ellipse) # 椭圆包\n# library(RColorBrewer) # 调色板包\n\n# 计算 mtcars 数据集的相关系数矩阵\ndata <- cor(mtcars)  # 计算相关系数矩阵\n\n# 用 RColorBrewer 构建 100 个颜色的调色板\nmy_colors <- brewer.pal(5, \"Spectral\")  # 选择5种“Spectral”配色\nmy_colors <- colorRampPalette(my_colors)(100)  # 插值生成100种颜色\n\n# 对相关系数矩阵进行排序（这里以第一行相关性为依据排序）\nord <- order(data[1, ])  # 获取排序索引\ndata_ord <- data[ord, ord]  # 按排序索引重新排列矩阵\n\n# 绘制椭圆相关性图\nplotcorr(\n    data_ord,  # 排序后的相关系数矩阵\n    col = my_colors[data_ord * 50 + 50],  # 根据相关系数映射颜色\n    mar = c(1, 1, 1, 1)  # 设置图形边距\n)\n```\n\n::: {.cell-output-display}\n![椭圆相关性图](correlogram_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## 散点\n\n`plot()` 可以绘制散点图矩阵：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 选择 mtcars 数据集的第1、3、4、5、6列，构建数据框\ndata <- mtcars[, c(1, 3:6)]\n\n# 绘制散点图矩阵\n# pch = 20 表示点的形状为实心圆\n# cex = 1.5 表示点的大小为1.5倍\n# col = \"#69b3a2\" 设置点的颜色为绿色系\nplot(data, pch = 20, cex = 1.5, col = \"#69b3a2\")\n```\n\n::: {.cell-output-display}\n![plot() 散点](correlogram_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 分组散点\n\n`car::scatterplotMatrix()` 可以绘制分组散点图矩阵：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用 R 自带的 mtcars 数据集\ndata <- mtcars\n\n# 根据气缸数（cyl）生成调色板\nmy_colors <- brewer.pal(nlevels(as.factor(data$cyl)), \"Set2\")\n\n# 绘制分组散点图矩阵\nscatterplotMatrix(\n    ~ mpg + disp + drat | cyl,  # 选择 mpg、disp、drat 三个变量，并按 cyl 分组\n    data = data,                # 数据来源\n    reg.line = \"\",              # 不添加回归线\n    smoother = \"\",              # 不添加平滑曲线\n    col = my_colors,            # 设置分组颜色\n    smoother.args = list(col = \"grey\"), # 平滑曲线颜色（虽然未用到）\n    cex = 1.5,                  # 点的大小\n    pch = c(15, 16, 17),        # 不同分组的点形状\n    main = \"按气缸数分组的散点图矩阵\" # 图标题\n)\n```\n\n::: {.cell-output-display}\n![分组散点图矩阵](correlogram_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}