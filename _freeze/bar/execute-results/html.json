{
  "hash": "c17fecd29759711222b9ef6dd5114f65",
  "result": {
    "engine": "knitr",
    "markdown": "# Bar {#sec-bar}\n\nGO GO GO! 出发咯! 简答实用的条形图~\n\n## PKG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork) # 拼图\nlibrary(ggpattern) # 条形图填充图案\nlibrary(hrbrthemes) # 主题\nlibrary(RColorBrewer) # 调色板\n```\n:::\n\n\n## `ggplot2()`\n\n### 基本\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建数据框，包含名称和对应的数值\ndata <- data.frame(\n    name = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n    value = c(3, 12, 5, 18, 45)\n)\n\n# 绘制条形图\nggplot(data, aes(x = name, y = value)) +\n    geom_bar(stat = \"identity\")  # stat=\"identity\" 表示y轴直接使用数据中的value数值\n```\n\n::: {.cell-output-display}\n![geom_bar() 基础条形图](bar_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### color\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1: 统一颜色。color 设置边框颜色，fill 设置填充色\np1 <- ggplot(mtcars, aes(x = as.factor(cyl))) +\n    geom_bar(color = \"blue\", fill = rgb(0.1, 0.4, 0.5, 0.7)) +\n    ggtitle(\"color and fill\") +\n    theme_minimal()\n\n# 2: 使用色相（Hue）区分\np2 <- ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +\n    geom_bar() +\n    scale_fill_hue(c = 40) +\n    theme(legend.position = \"none\", minimal = TRUE) +\n    ggtitle(\"Hue\")\n\n# 3: 使用 RColorBrewer 调色板\np3 <- ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +\n    geom_bar() +\n    scale_fill_brewer(palette = \"Set1\") +\n    theme(legend.position = \"none\", minimal = TRUE) +\n    ggtitle(\"RColorBrewer\")\n\n# 4: 使用灰度（Greyscale）填充\np4 <- ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +\n    geom_bar() +\n    scale_fill_grey(start = 0.25, end = 0.75) +\n    theme(legend.position = \"none\", minimal = TRUE) +\n    ggtitle(\"Greyscale\")\n\n# 5: 手动设置颜色\np5 <- ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +\n    geom_bar() +\n    scale_fill_manual(values = c(\"red\", \"green\", \"blue\")) +\n    theme(legend.position = \"none\", minimal = TRUE) +\n    ggtitle(\"manual\")\n\n# 使用 patchwork 拼图\n(p1 + p2) / (p3 + p4) / p5 \n```\n\n::: {.cell-output-display}\n![不同方式设置条形图颜色示例：统一颜色、色相、RColorBrewer、灰度、手动设置](bar_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### 横向\n\n横向条形图, 旧时代用 `coord_flip()`，新世纪用 直接交换 x 轴和 y 轴。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建数据框，包含名称和对应的数值\ndata <- data.frame(\n    name = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n    value = c(3, 12, 5, 18, 45)\n)\n\n# 绘制横向条形图\nggplot(data, aes(y = name, x= value)) +\n    geom_bar(stat = \"identity\")   # stat=\"identity\" 表示y轴直接使用数据中的value数值 效果等于 geom_col()\n```\n\n::: {.cell-output-display}\n![横向条形图示例](bar_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### `bins`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = name, y = value)) +\n  geom_bar(stat = \"identity\", width = 0.2)\n```\n\n::: {.cell-output-display}\n![使用 bins 参数控制条形图的分组数量](bar_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### 排序\n\n排序有多种方法: `forcats::fct_reorder()`, `dplyr::arrange()` `base R::reorder()`等,我一般用`forcats::fct_reorder()`, 另外两种方法见 [Reorder a variable with ggplot2](https://r-graph-gallery.com/267-reorder-a-variable-in-ggplot2.html)。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data,\n  aes(x = fct_reorder(name, -value), y = value, width = value / 100)\n) +\n  geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![使用 width 控制可变宽图(样本量或其它值)](bar_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Error bars\n\n`geom_errorbar()` 用于添加误差棒:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建包含均值和标准差的数据框\ndata <- data.frame(\n    name = letters[1:5],                 # 分组名称\n    value = sample(seq(4, 15), 5),       # 每组的数值\n    sd = c(1, 0.2, 3, 2, 4)              # 每组的标准差\n)\n\n# 绘制带误差线的条形图\nggplot(data, aes(x = name, y = value)) +\n    geom_bar(\n        stat = \"identity\",                 # 直接使用数据中的数值\n        fill = \"skyblue\",                  # 设置填充色\n        alpha = 0.7                        # 设置透明度\n    ) +\n    geom_errorbar(\n        aes(ymin = value - sd, ymax = value + sd), # 误差线范围\n        width = 0.4,                      # 误差线横向宽度\n        colour = \"orange\",                 # 误差线颜色\n        alpha = 0.9,                       # 误差线透明度\n        linewidth = 1.3                         # 误差线粗细\n    )\n```\n\n::: {.cell-output-display}\n![带误差线的条形图示例](bar_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n还可以定制误差线的样式和颜色等:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndata <- data.frame(\n  name = letters[1:5],\n  value = sample(seq(4, 15), 5),\n  sd = c(1, 0.2, 3, 2, 4)\n)\n\n# 1. 矩形误差线（geom_crossbar）\np_rect <- ggplot(data) +\n  geom_bar(\n    aes(x = name, y = value),\n    stat = \"identity\",\n    fill = \"skyblue\",\n    alpha = 0.5\n  ) +\n  geom_crossbar(\n    aes(x = name, y = value, ymin = value - sd, ymax = value + sd),\n    width = 0.4,\n    colour = \"orange\",\n    alpha = 0.9,\n    linewidth = 1.3\n  ) +\n  theme_minimal()\n# geom_crossbar 用矩形表示误差区间\n\n# 2. 线段误差线（geom_linerange）\np_line <- ggplot(data) +\n  geom_bar(\n    aes(x = name, y = value),\n    stat = \"identity\",\n    fill = \"skyblue\",\n    alpha = 0.5\n  ) +\n  geom_linerange(\n    aes(x = name, ymin = value - sd, ymax = value + sd),\n    colour = \"orange\",\n    alpha = 0.9,\n    linewidth = 1.3\n  ) +\n  theme_minimal()\n# geom_linerange 用竖线表示误差区间\n\n# 3. 线段+点误差线（geom_pointrange）\np_point <- ggplot(data) +\n  geom_bar(\n    aes(x = name, y = value),\n    stat = \"identity\",\n    fill = \"skyblue\",\n    alpha = 0.5\n  ) +\n  geom_pointrange(\n    aes(x = name, y = value, ymin = value - sd, ymax = value + sd),\n    colour = \"orange\",\n    alpha = 0.9,\n    size = 1.3\n  ) +\n  theme_minimal()\n# geom_pointrange 用点和线段表示误差区间\n\n# 4. 横向条形图带误差线（coord_flip）\np_horiz <- ggplot(data) +\n  geom_bar(\n    aes(y = name, x = value),\n    stat = \"identity\",\n    fill = \"skyblue\",\n    alpha = 0.5\n  ) +\n  geom_errorbar(\n    aes(y = name, xmin = value - sd, xmax = value + sd),\n    width = 0.4,\n    colour = \"orange\",\n    alpha = 0.9,\n    size = 1.3\n  ) +\n  theme_minimal()\n# coord_flip() 让条形图横向显示\n\n# patchwork 拼图展示\n(p_rect + p_line) / (p_point + p_horiz)\n```\n\n::: {.cell-output-display}\n![不同类型误差线的条形图示例：矩形、线段、线段+点、横向](bar_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### type\n\n标准差、标准误和置信区间是统计学中常用的误差类型。下面是一个示例，展示如何使用 `ggplot2` 绘制这三种误差类型的条形图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 数据准备：提取iris数据集中的Species和Sepal.Length两列\ndata <- iris |> select(Species, Sepal.Length)\n\n# 计算每个物种的均值、标准差、标准误和置信区间\nmy_sum <- data |>\n    group_by(Species) |>\n    summarise(\n        n = n(),                              # 样本量\n        mean = mean(Sepal.Length),            # 平均值\n        sd = sd(Sepal.Length)                 # 标准差\n    ) |>\n    mutate(se = sd / sqrt(n)) |>            # 标准误\n    mutate(ic = se * qt((1 - 0.05) / 2 + .5, n - 1)) # 置信区间（95%）\n\n# 1. 使用标准差绘制误差线\np_sd <- ggplot(my_sum) +\n    geom_bar(\n        aes(x = Species, y = mean),\n        stat = \"identity\",\n        fill = \"forestgreen\",\n        alpha = 0.5\n    ) +\n    geom_errorbar(\n        aes(x = Species, ymin = mean - sd, ymax = mean + sd), # 标准差误差线\n        width = 0.4,\n        colour = \"orange\",\n        alpha = 0.9,\n        size = 1.5\n    ) +\n    ggtitle(\"Standard Deviation\")\n\n# 2. 使用标准误绘制误差线\np_se <- ggplot(my_sum) +\n    geom_bar(\n        aes(x = Species, y = mean),\n        stat = \"identity\",\n        fill = \"forestgreen\",\n        alpha = 0.5\n    ) +\n    geom_errorbar(\n        aes(x = Species, ymin = mean - se, ymax = mean + se), # 标准误误差线\n        width = 0.4,\n        colour = \"orange\",\n        alpha = 0.9,\n        size = 1.5\n    ) +\n    ggtitle(\"Standard Error\")\n\n# 3. 使用置信区间绘制误差线\np_ic <- ggplot(my_sum) +\n    geom_bar(\n        aes(x = Species, y = mean),\n        stat = \"identity\",\n        fill = \"forestgreen\",\n        alpha = 0.5\n    ) +\n    geom_errorbar(\n        aes(x = Species, ymin = mean - ic, ymax = mean + ic), # 置信区间误差线\n        width = 0.4,\n        colour = \"orange\",\n        alpha = 0.9,\n        size = 1.5\n    ) +\n    ggtitle(\"Confidence Interval\")\n\n# 使用 patchwork 拼图展示三种误差类型的条形图\np_sd + p_se + p_ic\n```\n\n::: {.cell-output-display}\n![三种误差类型（标准差、标准误、置信区间）的条形图示例](bar_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### 黑白\n\n用图案等给黑白条形图加上伪色彩, 用于黑白印刷\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建数据框，包含名称和对应的数值\ndf <- data.frame(\n    name = c(\"north\", \"south\", \"south-east\", \"north-west\", \"south-west\"),\n    val = sample(seq(7, 15), 5)\n)\n\n# 绘制黑白条形图，使用灰度填充\nggplot(df, aes(x = name, y = val, fill = name)) +\n    geom_bar(stat = \"identity\", alpha = .6, width = .4) + # 绘制条形图，设置透明度和宽度\n    scale_fill_grey(start = 0, end = 0.8) +               # 使用灰度色阶填充，start和end控制灰度范围\n    theme_bw()                                            # 使用黑白主题\n```\n\n::: {.cell-output-display}\n![黑白填充条形图示例：使用灰度填充不同类别](bar_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| fig-cap: \"使用 ggpattern 包为黑白条形图添加不同图案填充（适合黑白印刷）\"\n\n# 加载所需包\nlibrary(ggpattern)\nlibrary(ggplot2)\nlibrary(hrbrthemes)\n\n# 使用 ggpattern 绘制带有不同图案的黑白条形图\nggplot(df, aes(x = name, y = val)) +\n    geom_col_pattern(\n        aes(\n            pattern = name,              # 不同类别使用不同图案\n            pattern_angle = name,        # 不同类别图案角度不同\n            pattern_spacing = name       # 不同类别图案间距不同\n        ),\n        fill = 'white',                # 条形图主色为白色\n        colour = 'black',              # 条形边框为黑色\n        pattern_density = 0.5,         # 图案密度\n        pattern_fill = 'black',        # 图案填充色为黑色\n        pattern_colour = 'darkgrey'    # 图案线条颜色为深灰色\n    ) +\n    theme_bw()                       # 使用黑白主题\n```\n\n::: {.cell-output-display}\n![](bar_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## `Base R`\n\n### 基本\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构建数据框，包含5个分组及其对应的数值\ndata <- data.frame(\n    name = letters[1:5],                  # 分组名称（a-e）\n    value = sample(seq(4, 15), 5)         # 每组的数值（4到15之间的随机数）\n)\n\n# 使用 barplot() 绘制基础条形图\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    col = \"skyblue\",                      # 设置条形颜色\n    border = \"blue\",                      # 设置条形边框颜色\n    xlab = \"分组\",                        # x轴标签\n    ylab = \"数值\"                         # y轴标签\n)\n```\n\n::: {.cell-output-display}\n![Base R 基础条形图示例（含详细中文注释）](bar_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### color\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 3)) # 1行3列\n\n# 1. 统一颜色填充\nbarplot(\n    height = data$value,                    # 指定每根条形的高度\n    names = data$name,                      # 指定每根条形的名称\n    col = rgb(0.2, 0.4, 0.6, 0.6)           # 设置所有条形为同一颜色（带透明度）\n)\n\n# 2. 为每根条形指定不同颜色（使用 RColorBrewer 调色板）\ncoul <- brewer.pal(5, \"Set2\")             # 选择5种Set2调色板颜色\nbarplot(\n    height = data$value,\n    names = data$name,\n    col = coul                              # 每根条形使用不同颜色\n)\n\n# 3. 更改条形边框颜色\nbarplot(\n    height = data$value,\n    names = data$name,\n    border = \"#69b3a2\",                     # 设置条形边框颜色\n    col = \"white\"                           # 填充色为白色\n)\n```\n\n::: {.cell-output-display}\n![Base R 条形图颜色设置](bar_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1)) # 恢复为1行1列\n```\n:::\n\n\n\n### X & Y\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用 barplot() 绘制条形图，并设置坐标轴标签、主标题、颜色和y轴范围\nbarplot(\n    height = data$value,                    # 指定每根条形的高度\n    names = data$name,                      # 指定每根条形的名称\n    col = rgb(0.8, 0.1, 0.1, 0.6),          # 设置条形颜色（红色，带透明度）\n    xlab = \"categories\",                    # 设置x轴标签\n    ylab = \"values\",                        # 设置y轴标签\n    main = \"My title\",                      # 设置主标题\n    ylim = c(0, 40)                         # 设置y轴范围\n)\n```\n\n::: {.cell-output-display}\n![Base R 坐标轴与标题设置](bar_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 水平\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用 barplot() 绘制水平条形图\nbarplot(\n    height = data$value,      # 指定每根条形的高度\n    names = data$name,        # 指定每根条形的名称\n    col = \"#69b3a2\",          # 设置条形颜色\n    horiz = TRUE,             # 设置为水平条形图\n    las = 1                   # y轴刻度标签水平显示\n)\n```\n\n::: {.cell-output-display}\n![Base R 水平条形图示例](bar_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### 宽度 间距\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2)) # 1行2列\n\n# 控制条形之间的间距（space 参数）\nbarplot(\n    height = data$value,                        # 指定每根条形的高度\n    names = data$name,                          # 指定每根条形的名称\n    col = rgb(0.2, 0.4, 0.6, 0.6),              # 设置条形颜色（带透明度）\n    space = c(0.1, 0.2, 3, 1.5, 0.3),           # 设置每根条形之间的间距（可为向量）\n    title = \"Barplot with Custom Spacing\"       # 设置标题\n)\n\n# 控制每根条形的宽度（width 参数）\nbarplot(\n    height = data$value,                        # 指定每根条形的高度\n    names = data$name,                          # 指定每根条形的名称\n    col = rgb(0.2, 0.4, 0.6, 0.6),              # 设置条形颜色（带透明度）\n    width = c(0.1, 0.2, 3, 1.5, 0.3),           # 设置每根条形的宽度（可为向量）\n    title = \"Barplot with Custom Width\"         # 设置标题\n)\n```\n\n::: {.cell-output-display}\n![Base R 控制条形图宽度与间距](bar_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1)) # 恢复为1行1列\n```\n:::\n\n\n### 条纹\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用 barplot() 绘制带有不同条纹密度和角度的条形图\nbarplot(\n    height = data$value,                   # 指定每根条形的高度\n    names = data$name,                     # 指定每根条形的名称\n    density = c(5, 10, 20, 30, 7),         # 设置每根条形的条纹密度（数值越大，条纹越密）\n    angle = c(0, 45, 90, 11, 36),          # 设置每根条形的条纹角度（单位为度）\n    col = \"brown\"                          # 设置条形的主色为棕色\n)\n```\n\n::: {.cell-output-display}\n![Base R 条形图添加条纹和角度](bar_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### 坐标轴\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构建数据框，包含5个分组及其对应的数值\ndata <- data.frame(\n    name = letters[1:5],                  # 分组名称（a-e）\n    value = sample(seq(4, 15), 5)         # 每组的数值（4到15之间的随机数）\n)\n\npar(mfrow = c(2, 3)) # 3行2列\n\n# 基础条形图，指定条形高度、分组名称和颜色\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    col = \"#69b3a2\"                       # 设置条形颜色\n)\n\n# 坐标轴标签方向使用 las 参数\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    col = \"#69b3a2\",                      # 设置条形颜色\n    horiz = TRUE,                         # 设置为水平条形图\n    las = 1,                              # y轴刻度标签水平显示\n    main = \"las 控制标签方向\"              # 主标题\n)\n\n# 更改组标签使用 names.arg 参数\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names.arg = c(\"group1\", \"group2\", \"group3\", \"group4\", \"group5\"), # 自定义分组标签\n    col = \"#69b3a2\",                      # 设置条形颜色\n    main = \"names.arg 控制标签内容\"         # 主标题\n)\n\n# 坐标轴标签和坐标轴标题样式设置\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    names.arg = c(\"group1\", \"group2\", \"group3\", \"group4\", \"group5\"), # 自定义分组标签\n    font.axis = 2,                        # 坐标轴刻度字体加粗\n    col.axis = \"orange\",                  # 坐标轴刻度颜色\n    cex.axis = 1.5                        # 坐标轴刻度字体大小\n)\n\n# 自定义坐标轴标题样式\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    xlab = \"category\",                    # x轴标题\n    font.lab = 2,                         # 坐标轴标题字体加粗\n    col.lab = \"orange\",                   # 坐标轴标题颜色\n    cex.lab = 2,                          # 坐标轴标题字体大小\n    main = \"自定义坐标轴标题样式\"\n)\n\n# 增加边距大小，适应长标签\npar(mar = c(11, 4, 4, 4))               # 设置下边距为11，其余为默认\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    col = \"#69b3a2\",                      # 设置条形颜色\n    names.arg = c(\n        \"very long group name 1\",\n        \"very long group name 2\",\n        \"very long group name 3\",\n        \"very long group name 4\",\n        \"very long group name 5\"\n    ),                                    # 长标签\n    las = 2,                              # 标签竖直显示\n    main = \"增加边距适应长标签\"\n)\n```\n\n::: {.cell-output-display}\n![Base R 坐标轴与标签设置](bar_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 恢复默认边距和布局\npar(mar = c(0, 0, 0, 0))\npar(mfrow = c(1, 1)) # 1行1列\n```\n:::\n\n\n\n### `n `\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构建数据框，包含名称、平均值和样本量\ndata <- data.frame(\n    name = c(\n        \"DD\",\n        \"with himself\",\n        \"with DC\",\n        \"with Silur\",\n        \"DC\",\n        \"with himself\",\n        \"with DD\",\n        \"with Silur\",\n        \"Silur\",\n        \"with himself\",\n        \"with DD\",\n        \"with DC\"\n    ),\n    average = sample(seq(1, 10), 12, replace = TRUE),   # 平均值（1~10之间的随机数）\n    number = sample(seq(4, 39), 12, replace = TRUE)     # 样本量（4~39之间的随机数）\n)\n\n# 增加底部边距，防止标签重叠\npar(mar = c(6, 4, 4, 4))\n\n# 绘制基础条形图\nmy_bar <- barplot(\n    data$average,                        # 条形高度为平均值\n    border = FALSE,                      # 不显示条形边框\n    names.arg = data$name,               # 条形名称\n    las = 2,                             # x轴标签竖直显示\n    col = c(\n        rgb(0.3, 0.1, 0.4, 0.6),           # 不同分组的颜色\n        rgb(0.3, 0.5, 0.4, 0.6),\n        rgb(0.3, 0.9, 0.4, 0.6),\n        rgb(0.3, 0.9, 0.4, 0.6)\n    ),\n    ylim = c(0, 13),                     # y轴范围\n    main = \"\"                            # 主标题为空\n)\n\n# 添加竖直分隔线，辅助分组视觉\nabline(v = c(4.9, 9.7), col = \"grey\")\n\n# 在每根条形上方添加样本量文本\ntext(\n    my_bar, data$average + 0.4,                  # 位置：条形顶端稍上方\n    paste(\"n: \", data$number, sep = \"\"),         # 显示样本量\n    cex = 1                                      # 字体大小\n)\n\n# 添加图例，说明不同颜色代表的分组\nlegend(\n    \"topleft\",                                   # 图例位置\n    legend = c(\"Alone\", \"with Himself\", \"With other genotype\"), # 图例标签\n    col = c(\n        rgb(0.3, 0.1, 0.4, 0.6),\n        rgb(0.3, 0.5, 0.4, 0.6),\n        rgb(0.3, 0.9, 0.4, 0.6),\n        rgb(0.3, 0.9, 0.4, 0.6)\n    ),\n    bty = \"n\",                                   # 不显示图例边框\n    pch = 20,                                    # 图例点形状\n    pt.cex = 2,                                  # 图例点大小\n    cex = 0.8,                                   # 图例字体大小\n    horiz = FALSE,                               # 图例竖直排列\n    inset = c(0.05, 0.05)                        # 图例内边距\n)\n```\n\n::: {.cell-output-display}\n![Base R 条形图显示样本量（n）及分组图例（含详细中文注释）](bar_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n### Error bar\n\n依赖 `arrows()` 函数来添加误差线, 比较复杂\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构建数据集：3种环境条件（A、B、C）下，2种植物（sorgho和poacee）各10个样本的高度\ndata <- data.frame(\n    specie = c(rep(\"sorgho\", 10), rep(\"poacee\", 10)),\n    cond_A = rnorm(20, 10, 4),\n    cond_B = rnorm(20, 8, 3),\n    cond_C = rnorm(20, 5, 4)\n)\n\n# 计算每种植物、每种条件下的平均值\nbilan <- aggregate(cbind(cond_A, cond_B, cond_C) ~ specie, data = data, mean)\nrownames(bilan) <- bilan[, 1]           # 设置行名为植物名称\nbilan <- as.matrix(bilan[, -1])         # 转为矩阵，去掉第一列（植物名称）\n\n# 设置y轴上限，留出空间显示误差线\nlim <- 1.2 * max(bilan)\n\n# 定义一个函数，用于在图上添加误差线（arrows函数实现）\nerror.bar <- function(x, y, upper, lower = upper, length = 0.1, ...) {\n    arrows(x, y + upper, x, y - lower, angle = 90, code = 3, length = length, ...)\n}\n\n# 计算每种植物、每种条件下的标准差，并换算为置信区间（1.96倍标准差/样本量）\nstdev <- aggregate(cbind(cond_A, cond_B, cond_C) ~ specie, data = data, sd)\nrownames(stdev) <- stdev[, 1]\nstdev <- as.matrix(stdev[, -1]) * 1.96 / 10\n\n# 绘制分组条形图\nze_barplot <- barplot(\n    bilan,\n    beside = TRUE,                # 分组显示\n    legend.text = TRUE,           # 显示图例\n    col = c(\"blue\", \"skyblue\"),   # 设置颜色\n    ylim = c(0, lim),             # 设置y轴范围\n    ylab = \"height\"               # y轴标签\n)\n\n# 添加误差线\nerror.bar(ze_barplot, bilan, stdev)\n```\n\n::: {.cell-output-display}\n![Base R 绘制带误差线的分组条形图示例（含详细中文注释）](bar_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## Interactive\n\n@sec-scatter-interactive 有示例\n\n[web-mekko-chart-with-interactivity](https://r-graph-gallery.com/web-mekko-chart-with-interactivity.html) 亦有示例\n\n\n## Pearl\n\n- [Economist](https://r-graph-gallery.com/web-horizontal-barplot-with-labels-the-economist.html) 经济学人的优美条形图\n\n![Economist](./image/economist.png)\n\n- [Hiking Locations in Washington](https://r-graph-gallery.com/web-circular-barplot-with-R-and-ggplot2.html) 的优美环状条形图\n\n![Hiking Locations in Washington](./image/washington.png)\n\n- [拥有最多德甲比赛场次球队分享数和亏损数的哑铃条形图](https://r-graph-gallery.com/web-dumbell-chart.html) \n\n![拥有最多德甲比赛场次球队分享数和亏损数的哑铃条形图](./image/dumbell.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}