{
  "hash": "761096e30c6d0230d06bc38f0afce24e",
  "result": {
    "engine": "knitr",
    "markdown": "# Treemap {#sec-treemap}\n\n树图以嵌套矩形的集合形式展示层次结构数据。每个组由一个矩形表示，其面积与其值成正比。\n\n## PKG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(treemap) \nlibrary(d3treeR) # 可选，用于交互式树图\n# remotes::install_github(\"timelyportfolio/d3treeR\")\n```\n:::\n\n\n## `Treemap`\n\n### 基本\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构建示例数据\ngroup <- c(\"group-1\", \"group-2\", \"group-3\")\nvalue <- c(13, 5, 22)\ndata <- data.frame(group, value)\n\n# 绘制基本的Treemap\ntreemap(data, index = \"group\", vSize = \"value\", type = \"index\")\n```\n\n::: {.cell-output-display}\n![基本的Treemap](treemap_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### subgroup\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构建带有subgroup的示例数据\ngroup <- c(rep(\"group-1\", 4), rep(\"group-2\", 2), rep(\"group-3\", 3))\nsubgroup <- paste(\"subgroup\", c(1, 2, 3, 4, 1, 2, 1, 2, 3), sep = \"-\")\nvalue <- c(13, 5, 22, 12, 11, 7, 3, 1, 23)\ndata <- data.frame(group, subgroup, value)\n\n# 绘图\ntreemap(data, index = c(\"group\", \"subgroup\"), vSize = \"value\", type = \"index\")\n```\n\n::: {.cell-output-display}\n![带有subgroup的Treemap](treemap_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### 定制\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(\n    data,\n    index = c(\"group\", \"subgroup\"), # 指定分组和子分组的变量名，决定树图的层次结构\n    vSize = \"value\",                # 指定每个矩形面积对应的数据列\n    type = \"index\",                 # 颜色类型，这里按分组着色\n    fontsize.labels = c(15, 12),    # 标签字体大小，分别对应group和subgroup\n    fontcolor.labels = c(\"white\", \"orange\"), # 标签字体颜色，分别对应group和subgroup\n    fontface.labels = c(2, 1),      # 标签字体样式，2为粗体，1为常规\n    bg.labels = c(\"transparent\"),   # 标签背景色，这里设置为透明\n    align.labels = list(\n        c(\"center\", \"center\"),      # group标签居中对齐\n        c(\"right\", \"bottom\")        # subgroup标签右下对齐\n    ),\n    overlap.labels = 0.5,           # 标签重叠容忍度，0为不允许重叠，1为总是显示\n    inflate.labels = F              # 是否根据矩形大小自动放大标签，F为不放大\n)\n```\n\n::: {.cell-output-display}\n![定制标签的Treemap](treemap_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(\n    data,\n    index = c(\"group\", \"subgroup\"),    # 指定分组和子分组的变量名，决定树图的层次结构\n    vSize = \"value\",                   # 指定每个矩形面积对应的数据列\n    type = \"index\",                    # 颜色类型，这里按分组着色\n    border.col = c(\"black\", \"white\"),  # 边框颜色，分别对应group和subgroup\n    border.lwds = c(7, 2)              # 边框线宽，分别对应group和subgroup\n)\n```\n\n::: {.cell-output-display}\n![定制边框的Treemap](treemap_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntreemap(\n    data,\n    index = c(\"group\", \"subgroup\"), # 指定分组和子分组的变量名，决定树图的层次结构\n    vSize = \"value\", # 指定每个矩形面积对应的数据列\n    type = \"index\", # 颜色类型，这里按分组着色，更多类型见 help(treemap)\n    palette = \"Set2\", # 选择调色板，这里用RColorBrewer内置的\"Set2\"配色\n    title = \"My Treemap\", # 设置树图的主标题\n    fontsize.title = 12 # 设置主标题的字体大小\n)\n```\n\n::: {.cell-output-display}\n![定制颜色和标题的Treemap](treemap_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## `d3treeR`\n\n点击一个组来放大并显示其子组。\n\n点击顶部的组名可以取消放大并回到之前的状态。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载d3treeR包\nlibrary(d3treeR)\n\n# 绘制treemap对象，设置分组、子分组、面积、颜色、调色板和标签样式\np <- treemap(\n    data,\n    index = c(\"group\", \"subgroup\"), # 指定分组和子分组，决定树图的层次结构\n    vSize = \"value\",                # 指定每个矩形面积对应的数据列\n    type = \"index\",                 # 颜色类型，这里按分组着色\n    palette = \"Set2\",               # 使用RColorBrewer的\"Set2\"配色方案\n    bg.labels = c(\"white\"),         # 标签背景色为白色\n    align.labels = list(\n        c(\"center\", \"center\"),       # group标签居中对齐\n        c(\"right\", \"bottom\")         # subgroup标签右下对齐\n    )\n)\n```\n\n::: {.cell-output-display}\n![使用d3treeR实现可交互的Treemap](treemap_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 使用d3treeR将静态treemap对象转为可交互的HTML小部件\nd3tree2(p, rootname = \"Treemap 示例\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"d3tree2 html-widget html-fill-item\" id=\"htmlwidget-dee6ed130e5e5a297930\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-dee6ed130e5e5a297930\">{\"x\":{\"data\":{\"name\":\"Treemap 示例\",\"id\":1,\"size\":null,\"children\":[{\"name\":\"group-1\",\"color\":\"#66C2A5\",\"h\":1,\"id\":2,\"size\":52,\"stdErr\":52,\"vColor\":4,\"vSize\":52,\"w\":0.5360824742268041,\"x0\":0,\"y0\":0,\"children\":[{\"name\":\"subgroup-1\",\"color\":\"#4BAF7F\",\"h\":0.6730769230769231,\"id\":3,\"size\":13,\"stdErr\":13,\"vColor\":1,\"vSize\":13,\"w\":0.1991163475699558,\"x0\":0.3369661266568483,\"y0\":0.3269230769230769},{\"name\":\"subgroup-2\",\"color\":\"#4BAF8A\",\"h\":0.3269230769230769,\"id\":4,\"size\":5,\"stdErr\":5,\"vColor\":1,\"vSize\":5,\"w\":0.15767131594906,\"x0\":0.3784111582777441,\"y0\":0},{\"name\":\"subgroup-3\",\"color\":\"#4BAF95\",\"h\":0.6730769230769231,\"id\":5,\"size\":22,\"stdErr\":22,\"vColor\":1,\"vSize\":22,\"w\":0.3369661266568483,\"x0\":0,\"y0\":0.3269230769230769},{\"name\":\"subgroup-4\",\"color\":\"#4BAFA0\",\"h\":0.3269230769230769,\"id\":6,\"size\":12,\"stdErr\":12,\"vColor\":1,\"vSize\":12,\"w\":0.3784111582777441,\"x0\":0,\"y0\":0}]},{\"name\":\"group-2\",\"color\":\"#FC8D62\",\"h\":0.4,\"id\":7,\"size\":18,\"stdErr\":18,\"vColor\":2,\"vSize\":18,\"w\":0.4639175257731959,\"x0\":0.5360824742268041,\"y0\":0,\"children\":[{\"name\":\"subgroup-1\",\"color\":\"#E34F3C\",\"h\":0.4,\"id\":8,\"size\":11,\"stdErr\":11,\"vColor\":1,\"vSize\":11,\"w\":0.2835051546391752,\"x0\":0.5360824742268041,\"y0\":0},{\"name\":\"subgroup-2\",\"color\":\"#E3873C\",\"h\":0.4,\"id\":9,\"size\":7,\"stdErr\":7,\"vColor\":1,\"vSize\":7,\"w\":0.1804123711340206,\"x0\":0.8195876288659794,\"y0\":0}]},{\"name\":\"group-3\",\"color\":\"#8DA0CB\",\"h\":0.6,\"id\":10,\"size\":27,\"stdErr\":27,\"vColor\":3,\"vSize\":27,\"w\":0.4639175257731959,\"x0\":0.5360824742268041,\"y0\":0.4,\"children\":[{\"name\":\"subgroup-1\",\"color\":\"#7493B7\",\"h\":0.4499999999999999,\"id\":11,\"size\":3,\"stdErr\":3,\"vColor\":1,\"vSize\":3,\"w\":0.06872852233676977,\"x0\":0.9312714776632303,\"y0\":0.55},{\"name\":\"subgroup-2\",\"color\":\"#7488B7\",\"h\":0.15,\"id\":12,\"size\":1,\"stdErr\":1,\"vColor\":1,\"vSize\":1,\"w\":0.06872852233676977,\"x0\":0.9312714776632303,\"y0\":0.4},{\"name\":\"subgroup-3\",\"color\":\"#747DB7\",\"h\":0.6,\"id\":13,\"size\":23,\"stdErr\":23,\"vColor\":1,\"vSize\":23,\"w\":0.3951890034364261,\"x0\":0.5360824742268041,\"y0\":0.4}]}]},\"meta\":{\"type\":\"index\",\"vSize\":\"value\",\"vColor\":null,\"stdErr\":\"value\",\"algorithm\":\"pivotSize\",\"vpCoorX\":[0.02812148481439815,0.9718785151856019],\"vpCoorY\":[0.01968503937007871,0.9103149606299213],\"aspRatio\":1.483511625850942,\"range\":null,\"mapping\":[null,null,null],\"draw\":true},\"legend\":null,\"options\":{\"celltext\":\"name\",\"id\":\"id\",\"valueField\":\"size\",\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\n使用d3treeR实现可交互的Treemap\n:::\n:::\n\n\n\n## Pearl\n\n[自定义注释和标签的树图](https://r-graph-gallery.com/web-treemap-with-annotations-labels-and-colors.html)\n\n![自定义注释和标签的树图](./image/treemap.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/d3-3.5.5/d3.min.js\"></script>\n<link href=\"site_libs/d3tree2-0.1/d3tree2.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/d3tree2-binding-0.1/d3tree2.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}