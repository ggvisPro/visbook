{
  "hash": "c0842152388a09d9c1b495ae5a11616d",
  "result": {
    "engine": "knitr",
    "markdown": "# Wordcloud {#sec-wordcloud}\n\n在 R 中，有两个包可以用来创建词云： `wordcloud` 和 `wordcloud2` 。\n\n\n## PKG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(wordcloud)\nlibrary(wordcloud2)\n```\n:::\n\n\n由于 `wordcloud2` 生成的词云无法被 `quarto`正确渲染，因此需要使用 `htmltools` 包来处理。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(htmltools)\nlibrary(knitr) # 需要 knitr 来获取代码块标签\n\nembed_widget <- function(widget, height = \"400px\", width = \"100%\") {\n  # 步骤 1: 生成一个基于当前代码块标签的、独一无二的文件名\n  # 这样可以防止多个小部件相互覆盖文件\n  chunk_label <- opts_current$get('label')\n  filename <- paste0(\"./wordcloud/wc-\", chunk_label, \".html\")\n  \n  # 步骤 2: 将小部件保存为一个独立的、自包含的HTML文件\n  library(htmlwidgets)\n  saveWidget(widget, filename, selfcontained = TRUE)\n  \n  # 步骤 3: 创建并返回一个指向该文件的 iframe HTML 标签\n  tags$iframe(\n    src = filename,\n    height = height,\n    width = width,\n    style = \"border:none;\"\n  )\n}\n```\n:::\n\n\n## 问题\n\n在社交媒体上常用. 然而, Building a wordcloud is a [pitfall on its own](https://www.data-to-viz.com/graph/wordcloud.html), except if it is done for aesthetic reasons: \n\n- Area is a poor metaphor of a numeric value, it is hardly perceive by the human eye\n\n- Longer words appear bigger by construction\n\n\n## `wordcloud2`\n\n`wordcloud2` 包是 R 中最好的词云包, 提供丰富的功能和更美观的输出。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(demoFreq) |> knitr::kable(caption = \"示例数据,两列, 第一列是word, 第二列是频率\")\n```\n\n::: {.cell-output-display}\n\n\nTable: 示例数据,两列, 第一列是word, 第二列是频率\n\n|       |word   | freq|\n|:------|:------|----:|\n|oil    |oil    |   85|\n|said   |said   |   73|\n|prices |prices |   48|\n|opec   |opec   |   42|\n|mln    |mln    |   31|\n|the    |the    |   26|\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- wordcloud2(data = demoFreq, size = 1.6) # 词云示例\nembed_widget(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"./wordcloud/wc-basic.html\" height=\"400px\" width=\"100%\" style=\"border:none;\"></iframe>\n```\n\n\n词云示例\n:::\n:::\n\n\n### `color`\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- wordcloud2(demoFreq, size=1.6, color='random-dark')\nembed_widget(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"./wordcloud/wc-color-random-dark.html\" height=\"400px\" width=\"100%\" style=\"border:none;\"></iframe>\n```\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- wordcloud2(demoFreq, size=1.6, color=rep_len(c(\"green\",\"blue\"), nrow(demoFreq)))\nembed_widget(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"./wordcloud/wc-color-custom.html\" height=\"400px\" width=\"100%\" style=\"border:none;\"></iframe>\n```\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- wordcloud2(demoFreq, size=1.6, color='random-light', backgroundColor=\"black\")\nembed_widget(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"./wordcloud/wc-color-black.html\" height=\"400px\" width=\"100%\" style=\"border:none;\"></iframe>\n```\n\n:::\n:::\n\n\n### `shape`\n\nshape 参数来自定义词云的形状。可用的形状有：\n\n- circle\n- cardioid\n- diamond\n- triangle-forward\n- triangle\n- pentagon\n- star\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- wordcloud2(demoFreq, size = 0.7, shape = 'star')\nembed_widget(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"./wordcloud/wc-star.html\" height=\"400px\" width=\"100%\" style=\"border:none;\"></iframe>\n```\n\n:::\n:::\n\n\n或者使用图片作为蒙版:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 自己测试没有成功\nwordcloud2(\n  demoFreq,\n  figPath = \"~/Desktop/R-graph-gallery/img/other/peaceAndLove.jpg\",\n  size = 1.5,\n  color = \"skyblue\",\n  backgroundColor = \"black\"\n)\n```\n:::\n\n\n![图片蒙版](./image/wordcloud.png)\n\n### 方向\n\n使用三个参数旋转文字： `minRotation` , `maxRotation` 和 `rotateRatio` \n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- wordcloud2(\n  demoFreq,\n  size = 2.3,\n  minRotation = -pi / 6, # 最小旋转角度\n  maxRotation = -pi / 6, # 最大旋转角度\n  rotateRatio = 1 # 旋转比例\n)\nembed_widget(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"./wordcloud/wc-rotation.html\" height=\"400px\" width=\"100%\" style=\"border:none;\"></iframe>\n```\n\n:::\n:::\n\n\n### 中文\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- wordcloud2(\n  demoFreqC,\n  size = 2,\n  # fontFamily = \"Pingfang SC\",\n  color = \"random-light\",\n  backgroundColor = \"grey\"\n)\nembed_widget(p)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"./wordcloud/wc-chinese.html\" height=\"400px\" width=\"100%\" style=\"border:none;\"></iframe>\n```\n\n:::\n:::\n\n\n\n### 字母\n\n函数 `letterCloud` 允许使用字母或单词作为词云的遮罩\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 字母遮罩\nletterCloud(\n  demoFreq,\n  word = \"R\",\n  color = 'random-light',\n  backgroundColor = \"black\"\n)\n\n# 单词遮罩\nletterCloud(demoFreq, word = \"PEACE\", color = \"white\", backgroundColor = \"pink\")\n```\n:::\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nknitr::include_graphics(\"./image/wc-letter.png\")\nknitr::include_graphics(\"./image/wc-word.png\")\n```\n\n::: {.cell-output-display}\n![左侧 字母遮罩](./image/wc-letter.png){width=240}\n:::\n\n::: {.cell-output-display}\n![右侧 单词遮罩](./image/wc-word.png){width=240}\n:::\n\n字母和单词遮罩示例\n:::\n\n\n\n### 导出\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 安装 webshot 包（如未安装）\nlibrary(webshot)\n# 安装 PhantomJS（仅需安装一次，用于网页截图）\nwebshot::install_phantomjs()\n\n# 创建词云图对象\nmy_graph <- wordcloud2(demoFreq, size = 1.5)\n\n# 保存为 HTML 文件（selfcontained = FALSE 表示资源分离存储）\nlibrary(htmlwidgets)\nsaveWidget(my_graph, \"tmp.html\", selfcontained = FALSE)\n\n# 使用 webshot 将 HTML 文件导出为 PDF 文件\n# delay 参数确保词云渲染完成，vwidth/vheight 设置输出尺寸\nwebshot(\"tmp.html\", \"fig_1.pdf\", delay = 5, vwidth = 480, vheight = 480)\n```\n:::\n\n\n## `wordcloud`\n\n`wordcloud` 包提供了基本的词云功能，但在可定制性和美观性方面不如 `wordcloud2` 包。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构建词语向量\na <- c(\n    \"Cereal\",\n    \"WSSMV\",\n    \"SBCMV\",\n    \"Experimentation\",\n    \"Talk\",\n    \"Conference\",\n    \"Writing\",\n    \"Publication\",\n    \"Analysis\",\n    \"Bioinformatics\",\n    \"Science\",\n    \"Statistics\",\n    \"Data\",\n    \"Programming\",\n    \"Wheat\",\n    \"Virus\",\n    \"Genotyping\",\n    \"Work\",\n    \"Fun\",\n    \"Surfing\",\n    \"R\",\n    \"R\",\n    \"Data-Viz\",\n    \"Python\",\n    \"Linux\",\n    \"Programming\",\n    \"Graph Gallery\",\n    \"Biologie\",\n    \"Resistance\",\n    \"Computing\",\n    \"Data-Science\",\n    \"Reproductible\",\n    \"GitHub\",\n    \"Script\"\n)\n\n# 为每个词语随机分配一个频率（0~1之间，步长0.01）\nb <- sample(seq(0, 1, 0.01), length(a), replace = TRUE)\n\n# 设置图形背景为黑色\npar(bg = \"black\")\n\nwordcloud(\n    words = a, # 词语向量\n    freq = b, # 频率向量\n    col = terrain.colors(length(a), alpha = 0.9), # 颜色方案\n    rot.per = 0.3 # 旋转比例\n)\n```\n\n::: {.cell-output-display}\n![使用 wordcloud 包生成的基础词云示例](wordcloud_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### 文本分析\n\n[文本分析](https://r-graph-gallery.com/102-text-mining-and-wordcloud.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}