{
  "hash": "e8b8684961357aaa443b905924785ee3",
  "result": {
    "engine": "knitr",
    "markdown": "# Violin {#sec-violin}\n\n`ggplot2::geom_violin()` 或 `base R::vioplot` 可以绘制小提琴图。\n\n小提琴图是箱线图的变体, 弥补了箱线图隐藏数据点的缺点。([箱线图陷阱](#sec-boxplot-trap))\n\n小提琴图是一种强大的可视化技术, 允许比较多个组的数量和分布,但是使用频率低于箱线图,我不理解.\n\n如果数据量少(几百个),还可以叠加散点.\n\n## PKG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## 基础\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_violin()\n```\n\n::: {.cell-output-display}\n![基础geom_violin](violin_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![稍微美化的geom_violin](violin_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nwider格式数据转化为long格式数据后, 再使用`geom_violin()`绘制小提琴图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(head(iris))\n```\n\n::: {.cell-output-display}\n\n\n| Sepal.Length| Sepal.Width| Petal.Length| Petal.Width|Species |\n|------------:|-----------:|------------:|-----------:|:-------|\n|          5.1|         3.5|          1.4|         0.2|setosa  |\n|          4.9|         3.0|          1.4|         0.2|setosa  |\n|          4.7|         3.2|          1.3|         0.2|setosa  |\n|          4.6|         3.1|          1.5|         0.2|setosa  |\n|          5.0|         3.6|          1.4|         0.2|setosa  |\n|          5.4|         3.9|          1.7|         0.4|setosa  |\n\n\n\niris数据(wider格式数据)\n:::\n:::\n\n\n`tidyr::gather()` 是个有意思的函数,可以将wider格式数据转化为long格式数据。\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_long <- iris |> \n  gather(key = \"type\", value = \"value\", -Species)\n\nknitr::kable(head(iris_long))\n```\n\n::: {.cell-output-display}\n\n\n|Species |type         | value|\n|:-------|:------------|-----:|\n|setosa  |Sepal.Length |   5.1|\n|setosa  |Sepal.Length |   4.9|\n|setosa  |Sepal.Length |   4.7|\n|setosa  |Sepal.Length |   4.6|\n|setosa  |Sepal.Length |   5.0|\n|setosa  |Sepal.Length |   5.4|\n\n\n\niris数据(wider格式数据转化为long格式后)\n:::\n\n```{.r .cell-code}\ntable(iris_long$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nPetal.Length  Petal.Width Sepal.Length  Sepal.Width \n         150          150          150          150 \n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris_long, aes(x = type, y = value)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![iris数据(wider格式数据转化为long格式后)小提琴图](violin_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## 排序\n\n有多种方法: `forcats::fct_reorder()`, `dplyr::arrange()` `base R::reorder()`等,我一般用`forcats::fct_reorder()`, 另外两种方法见[Reorder a variable with ggplot2](https://r-graph-gallery.com/267-reorder-a-variable-in-ggplot2.html)。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_long |> \n  # 重点是这里的fct_reorder\n  ggplot(aes(x = fct_reorder(type, value, .fun = median), y = value, fill = type)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![使用fct_reorder()排序小提琴图](violin_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n注意,如果X已经有顺序,比如月份等,就不适合使用`fct_reorder()`。\n\n## 横向\n\n有几种方法可以设置小提琴图为横向显示。\n\n- 在aes交换x和y的参数\n- `coord_flip()`\n- orientation = \"y\" \n\n`coord_flip()`是比较落后的方式,纯粹是简单粗暴的翻转(回归线基于旋转前;调整坐标轴scale基于旋转前,反直觉), 现在优先考虑`aes()`交换x和y的参数,ggplot会自动识别方向,如果识别错误,可以使用`orientation = \"y\"`。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_long |> \n  ggplot(aes(x = value, y = fct_reorder(type, value, .fun = median), fill = type)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![使用coord_flip()横向显示小提琴图](violin_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## +箱线图\n\n使用`geom_boxplot()`和`geom_violin()`结合,可以同时显示小提琴图和箱线图。\n注意: 调整`geom_boxplot()`的宽度,并且白色(fill仅放入`geom_violin()`),使其更美观。\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_long |> \n  ggplot(aes(x = type, y = value)) + \n  geom_violin(aes(fill = type), alpha = 0.5) + \n  geom_boxplot(width = 0.05) + \n  theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![小提琴图与箱线图结合](violin_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n还可以用fill增加分组.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris_long, aes(x = type, y = value, fill = Species)) +\n  geom_violin() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![分组小提琴图](violin_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## base R\n\nr-graph-gallery 有`base R::vioplot`的 [小提琴图示例](https://r-graph-gallery.com/94-violin-plot.html)\n\n\n## Pearl\n\n一种非常美观的带有统计量的小提琴图,见 @sec-ggstatsplot\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}