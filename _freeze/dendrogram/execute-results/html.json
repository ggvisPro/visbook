{
  "hash": "0aec02efeaa40e5a5ca5fc935c8878ae",
  "result": {
    "engine": "knitr",
    "markdown": "# Dendrogram {#sec-dendrogram}\n\n## PKG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggraph) # 用于绘制图形\nlibrary(igraph) # 用于图形处理\nlibrary(tidyverse) \nlibrary(RColorBrewer) # 用于颜色处理\nlibrary(collapsibleTree) # 用于交互式树状图\nlibrary(dendextend) # 用于树状图的扩展和定制\n```\n:::\n\n\n## 树状\n\n### Edge list\n\n树状图（dendrogram）是一种用于展示层级关系的图形，通常用于聚类分析或分类数据的可视化。它通过连接节点来表示不同层级之间的关系。\n\n![Edge list](./image/edge-list.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载绘图和数据处理所需的包\nlibrary(ggraph)    # 用于高级图形绘制，特别是网络和树状结构\nlibrary(igraph)    # 用于图结构的创建和处理\nlibrary(tidyverse) # 用于数据处理\n\n# 创建一个边列表数据框，定义树状结构的层级关系\n# 第一层：origin 指向 5 个 group\nd1 <- data.frame(from = \"origin\", to = paste(\"group\", seq(1, 5), sep = \"\"))\n\n# 第二层：每个 group 指向 5 个 subgroup，共 25 个 subgroup\nd2 <- data.frame(from = rep(d1$to, each = 5), to = paste(\"subgroup\", seq(1, 25), sep = \"_\"))\n\n# 合并两层边数据，形成完整的边列表\nedges <- rbind(d1, d2)\n\n# 根据边列表创建 igraph 图对象\nmygraph <- graph_from_data_frame(edges)\n\n# 使用 ggraph 绘制基础树状图（dendrogram）\nggraph(mygraph, layout = 'dendrogram', circular = FALSE) + \n    geom_edge_diagonal() +   # 绘制树的边（对角线样式）\n    geom_node_point() +      # 绘制节点\n    theme_void()             # 去除背景和坐标轴，使图形更简洁\n```\n\n::: {.cell-output-display}\n![使用ggraph和igraph包绘制基础树状图（dendrogram）](dendrogram_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### Nested df\n\n![Nested dataframe](./image/nested-dataframe.png)\n\n需要把嵌套数据框（nested dataframe）转换为边列表（edge list）\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载所需的包\nlibrary(ggraph) # 用于高级图形绘制，特别是网络和树状结构\nlibrary(igraph) # 用于图结构的创建和处理\nlibrary(tidyverse) # 用于数据处理\n\n# 创建一个嵌套数据框，包含三层层级关系\ndata <- data.frame(\n  level1 = \"CEO\", # 第一层：CEO\n  level2 = c(rep(\"boss1\", 4), rep(\"boss2\", 4)), # 第二层：boss1 和 boss2，各自有4个下属\n  level3 = paste0(\"mister_\", letters[1:8]) # 第三层：8个下属，命名为 mister_a ~ mister_h\n)\n\n# 将嵌套数据框转换为边列表（edge list）\n# 第一层到第二层的边\nedges_level1_2 <- data |>\n  select(level1, level2) |>\n  unique() |>\n  rename(from = level1, to = level2)\n# 第二层到第三层的边\nedges_level2_3 <- data |>\n  select(level2, level3) |>\n  unique() |>\n  rename(from = level2, to = level3)\n# 合并所有边\nedge_list <- rbind(edges_level1_2, edges_level2_3)\n\n# 根据边列表创建 igraph 图对象\nmygraph <- graph_from_data_frame(edge_list)\n\n# 使用 ggraph 绘制树状图（dendrogram）\nggraph(mygraph, layout = 'dendrogram', circular = FALSE) +\n  geom_edge_diagonal() + # 绘制树的边（对角线样式）\n  geom_node_point() + # 绘制节点\n  theme_void() # 去除背景和坐标轴，使图形更简洁\n```\n\n::: {.cell-output-display}\n![使用嵌套数据框（nested dataframe）和ggraph绘制树状图](dendrogram_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### 定制\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载所需的包\nlibrary(ggraph)      # 用于高级图形绘制，特别是网络和树状结构\nlibrary(igraph)      # 用于图结构的创建和处理\nlibrary(tidyverse)   # 用于数据处理\n\n# 构建边列表数据框，定义树状结构的层级关系\n# 第一层：origin 指向 7 个 group\nd1 <- data.frame(from = \"origin\", to = paste(\"group\", seq(1, 7), sep = \"\"))\n\n# 第二层：每个 group 指向 7 个 subgroup，共 49 个 subgroup\nd2 <- data.frame(\n    from = rep(d1$to, each = 7),\n    to = paste(\"subgroup\", seq(1, 49), sep = \"_\")\n)\n\n# 合并两层边数据，形成完整的边列表\nedges <- rbind(d1, d2)\n\n# 构建节点属性数据框\n# name：节点名称\n# group：所属分组（group1~group7），origin和group节点为NA\n# cluster：随机分配的类别（a~d）\n# value：随机分配的数值（10~30）\nname <- unique(c(as.character(edges$from), as.character(edges$to)))\nvertices <- data.frame(\n    name = name,\n    group = c(rep(NA, 8), rep(paste(\"group\", seq(1, 7), sep = \"\"), each = 7)),\n    cluster = sample(letters[1:4], length(name), replace = TRUE),\n    value = sample(seq(10, 30), length(name), replace = TRUE)\n)\n\n# 根据边列表和节点属性创建 igraph 图对象\nmygraph <- graph_from_data_frame(edges, vertices = vertices)\n\n# 直线条\nggraph(mygraph, layout = 'dendrogram') + \n  geom_edge_link() + \n  theme_void() # 去除背景和坐标轴，使图形更简洁\n```\n\n::: {.cell-output-display}\n![定制节点属性和分组的树状图（dendrogram）示例](dendrogram_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 曲线条\nggraph(mygraph, layout = 'dendrogram') + \n  geom_edge_diagonal() + \n  theme_void() # 去除背景和坐标轴，使图形更简洁\n```\n\n::: {.cell-output-display}\n![定制节点属性和分组的树状图（dendrogram）示例](dendrogram_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用ggraph绘制树状图，并在叶节点处添加标签\nggraph(mygraph, layout = 'dendrogram') +\n    geom_edge_diagonal() + # 绘制树的边（对角线样式）\n    geom_node_text(\n        aes(label = name, filter = leaf), # 仅对叶节点添加标签\n        angle = 90,                       # 标签旋转90度\n        hjust = 1,                        # 标签右对齐\n        nudge_y = -0.01                   # 标签向下微调\n    ) +\n    ylim(-.4, NA) +                       # 调整y轴范围，使标签显示完整\n    theme_void() # 去除背景和坐标轴，使图形更简洁\n```\n\n::: {.cell-output-display}\n![在树状图（dendrogram）上显示叶节点标签和定制节点样式](dendrogram_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 再绘制一个树状图，进一步定制叶节点样式\nggraph(mygraph, layout = 'dendrogram') +\n    geom_edge_diagonal() + # 绘制树的边（对角线样式）\n    geom_node_text(\n        aes(label = name, filter = leaf), # 仅对叶节点添加标签\n        angle = 90,                       # 标签旋转90度\n        hjust = 1,                        # 标签右对齐\n        nudge_y = -0.04                   # 标签向下微调\n    ) +\n    geom_node_point(aes(filter = leaf), alpha = 0.6) + # 仅对叶节点绘制半透明点\n    ylim(-.5, NA)  + # 调整y轴范围，使标签和点显示完整\n    theme_void() # 去除背景和坐标轴，使图形更简洁\n```\n\n::: {.cell-output-display}\n![在树状图（dendrogram）上显示叶节点标签和定制节点样式](dendrogram_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用ggraph绘制树状图，定制叶节点标签、颜色和大小\nggraph(mygraph, layout = 'dendrogram') +\n  geom_edge_diagonal() + # 绘制树的边（对角线样式）\n  geom_node_text(\n    aes(label = name, filter = leaf, color = group), # 仅对叶节点添加标签，并按分组着色\n    angle = 90, # 标签旋转90度\n    hjust = 1, # 标签右对齐\n    nudge_y = -0.1 # 标签向下微调\n  ) +\n  geom_node_point(\n    aes(filter = leaf, size = value, color = group), # 仅对叶节点绘制点，按分组着色，按value调整大小\n    alpha = 0.6 # 点的透明度\n  ) +\n  ylim(-.6, NA) + # 调整y轴范围，使标签和点显示完整\n  theme(legend.position = \"none\") + # 隐藏图例\n  theme_void() # 去除背景和坐标轴，使图形更简洁\n```\n\n::: {.cell-output-display}\n![带有分组颜色和节点数值大小的定制树状图（dendrogram）](dendrogram_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### 圆形\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载所需的包\nlibrary(ggraph)         # 用于高级图形绘制，特别是网络和树状结构\nlibrary(igraph)         # 用于图结构的创建和处理\nlibrary(tidyverse)      # 用于数据处理\nlibrary(RColorBrewer)   # 用于调色板\n\n# 创建边列表数据框，定义树状结构的层级关系\n# 第一层：origin 指向 10 个 group\nd1 <- data.frame(from = \"origin\", to = paste(\"group\", seq(1, 10), sep = \"\"))\n\n# 第二层：每个 group 指向 10 个 subgroup，共 100 个 subgroup\nd2 <- data.frame(\n    from = rep(d1$to, each = 10),\n    to = paste(\"subgroup\", seq(1, 100), sep = \"_\")\n)\n\n# 合并两层边数据，形成完整的边列表\nedges <- rbind(d1, d2)\n\n# 创建节点属性数据框\n# name：节点名称\n# value：随机分配的数值，用于节点大小\nvertices <- data.frame(\n    name = unique(c(as.character(edges$from), as.character(edges$to))),\n    value = runif(111)\n)\n\n# 添加分组信息，便于后续节点着色\nvertices$group <- edges$from[match(vertices$name, edges$to)]\n\n# 计算标签显示所需的角度、对齐方式和翻转角度\n# id：叶节点编号\nvertices$id <- NA\nmyleaves <- which(is.na(match(vertices$name, edges$from))) # 找到所有叶节点\nnleaves <- length(myleaves)                                # 叶节点总数\nvertices$id[myleaves] <- seq(1, nleaves)                   # 给叶节点编号\nvertices$angle <- 90 - 360 * vertices$id / nleaves         # 计算每个叶节点的标签角度\n\n# 根据角度调整标签对齐方式（左对齐或右对齐）\nvertices$hjust <- ifelse(vertices$angle < -90, 1, 0)\n\n# 对于左侧的标签，翻转角度以便文字正向显示\nvertices$angle <- ifelse(\n    vertices$angle < -90,\n    vertices$angle + 180,\n    vertices$angle\n)\n\n# 根据边列表和节点属性创建 igraph 图对象\nmygraph <- graph_from_data_frame(edges, vertices = vertices)\n\n# 绘制圆形树状图（circular dendrogram）\nggraph(mygraph, layout = 'dendrogram', circular = TRUE) +\n    geom_edge_diagonal(colour = \"grey\") + # 绘制树的边（对角线样式）\n    scale_edge_colour_distiller(palette = \"RdPu\") + # 边的颜色渐变\n    geom_node_text(\n        aes(\n            x = x * 1.15, # 标签位置向外扩展\n            y = y * 1.15,\n            filter = leaf, # 仅对叶节点添加标签\n            label = name,\n            angle = angle, # 标签旋转角度\n            hjust = hjust, # 标签对齐方式\n            colour = group # 按分组着色\n        ),\n        size = 2.7,\n        alpha = 1\n    ) +\n    geom_node_point(\n        aes(\n            filter = leaf, # 仅对叶节点绘制点\n            x = x * 1.07,  # 点的位置向外扩展\n            y = y * 1.07,\n            colour = group, # 按分组着色\n            size = value,   # 按value调整大小\n            alpha = 0.2     # 点的透明度\n        )\n    ) +\n    scale_colour_manual(values = rep(brewer.pal(9, \"Paired\"), 30)) + # 自定义颜色\n    scale_size_continuous(range = c(0.1, 10)) + # 节点大小范围\n    theme_void() + # 去除背景和坐标轴，使图形更简洁\n    theme(\n        legend.position = \"none\", # 隐藏图例\n        plot.margin = unit(c(0, 0, 0, 0), \"cm\") # 去除边距\n    ) +\n    expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3)) # 扩展坐标轴范围，防止标签被裁剪\n```\n\n::: {.cell-output-display}\n![圆形树状图（circular dendrogram）定制标签和节点样式示例](dendrogram_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Interactive\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载collapsibleTree包，用于绘制交互式树状图\nlibrary(collapsibleTree)\n\n# 使用warpbreaks数据集，按wool、tension、breaks三个层级绘制树状图\ncollapsibleTree(\n    warpbreaks,                   # 数据集\n    c(\"wool\", \"tension\", \"breaks\") # 层级顺序\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"collapsibleTree html-widget html-fill-item\" id=\"htmlwidget-70b0d59f865af7dcdfff\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-70b0d59f865af7dcdfff\">{\"x\":{\"data\":{\"name\":\"warpbreaks\",\"children\":[{\"name\":\"A\",\"children\":[{\"name\":\"L\",\"children\":[{\"name\":\"26\"},{\"name\":\"30\"},{\"name\":\"54\"},{\"name\":\"25\"},{\"name\":\"70\"},{\"name\":\"52\"},{\"name\":\"51\"},{\"name\":\"67\"}]},{\"name\":\"M\",\"children\":[{\"name\":\"18\"},{\"name\":\"21\"},{\"name\":\"29\"},{\"name\":\"17\"},{\"name\":\"12\"},{\"name\":\"35\"},{\"name\":\"30\"},{\"name\":\"36\"}]},{\"name\":\"H\",\"children\":[{\"name\":\"36\"},{\"name\":\"21\"},{\"name\":\"24\"},{\"name\":\"18\"},{\"name\":\"10\"},{\"name\":\"43\"},{\"name\":\"28\"},{\"name\":\"15\"},{\"name\":\"26\"}]}]},{\"name\":\"B\",\"children\":[{\"name\":\"L\",\"children\":[{\"name\":\"27\"},{\"name\":\"14\"},{\"name\":\"29\"},{\"name\":\"19\"},{\"name\":\"31\"},{\"name\":\"41\"},{\"name\":\"20\"},{\"name\":\"44\"}]},{\"name\":\"M\",\"children\":[{\"name\":\"42\"},{\"name\":\"26\"},{\"name\":\"19\"},{\"name\":\"16\"},{\"name\":\"39\"},{\"name\":\"28\"},{\"name\":\"21\"},{\"name\":\"29\"}]},{\"name\":\"H\",\"children\":[{\"name\":\"20\"},{\"name\":\"21\"},{\"name\":\"24\"},{\"name\":\"17\"},{\"name\":\"13\"},{\"name\":\"15\"},{\"name\":\"16\"},{\"name\":\"28\"}]}]}]},\"options\":{\"hierarchy\":[\"wool\",\"tension\",\"breaks\"],\"input\":null,\"attribute\":\"leafCount\",\"linkLength\":null,\"fontSize\":10,\"tooltip\":false,\"collapsed\":true,\"zoomable\":true,\"margin\":{\"top\":20,\"bottom\":20,\"left\":75,\"right\":35},\"fill\":\"lightsteelblue\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\n使用collapsibleTree包绘制交互式树状图（dendrogram）\n:::\n:::\n\n\n\n## 聚类\n\n### 基本\n\n使用 `hclust()` 进行基础层次聚类并绘制树状图\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构造一个模拟数据矩阵，包含20个样本和10个变量\ndata <- matrix(sample(seq(1, 2000), 200), ncol = 10)\nrownames(data) <- paste0(\"sample_\", seq(1, 20))   # 设置行名为 sample_1 ~ sample_20\ncolnames(data) <- paste0(\"variable\", seq(1, 10))  # 设置列名为 variable1 ~ variable10\n\n# 计算样本之间的欧氏距离（仅使用第4到第8列变量）\ndist <- dist(data[, c(4:8)], diag = TRUE)\n\n# 使用hclust函数进行层次聚类分析\nhc <- hclust(dist)\n\n# 绘制聚类结果的树状图（dendrogram）\nplot(hc)\n```\n\n::: {.cell-output-display}\n![使用hclust进行基础层次聚类并绘制树状图](dendrogram_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n可以聚焦于树的一部分。使用 `[[..]]` 运算符选择感兴趣的组：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 将层次聚类对象（hc）转换为dendrogram对象，便于后续操作\ndhc <- as.dendrogram(hc)\n\n# 设置绘图区域的边距，顺序为下、左、上、右\npar(mar = c(4, 4, 2, 2))\n\n# 绘制dendrogram的第二个分支（子树），实现对树状图局部的放大显示\nplot(\n    dhc[[2]], \n    main = \"zoom on a part of the dendrogram\" # 设置主标题\n)\n```\n\n::: {.cell-output-display}\n![聚类树状图的子树放大显示示例](dendrogram_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### color\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 构建模拟数据集，包含24个样本、3个分组变量和5个基因表达量\nsample <- paste(rep(\"sample_\", 24), seq(1, 24), sep = \"\")\nspecie <- c(rep(\"dicoccoides\", 8), rep(\"dicoccum\", 8), rep(\"durum\", 8))\ntreatment <- rep(c(rep(\"High\", 4), rep(\"Low\", 4)), 3)\ndata <- data.frame(sample, specie, treatment)\nfor (i in seq(1:5)) {\n    gene = sample(c(1:40), 24)\n    data = cbind(data, gene)\n    colnames(data)[ncol(data)] = paste(\"gene_\", i, sep = \"\")\n}\n# 高氮处理的样本基因表达量整体加100\ndata[data$treatment == \"High\", c(4:8)] = data[\n    data$treatment == \"High\",\n    c(4:8)\n] + 100\n# durum品种的样本基因表达量整体减30\ndata[data$specie == \"durum\", c(4:8)] = data[data$specie == \"durum\", c(4:8)] - 30\nrownames(data) <- data[, 1] # 设置行名为样本名\n\n# 查看数据集结构\n# head(data)\n\n# 计算样本间欧氏距离（仅用第4到8列基因表达量）\ndist = dist(data[, c(4:8)], diag = TRUE)\n\n# 层次聚类分析\nhc <- hclust(dist)\ndhc <- as.dendrogram(hc)\n\n# 查看树状图某个叶节点的属性\nspecific_leaf <- dhc[[1]][[1]][[1]]\n# specific_leaf\n# attributes(specific_leaf)\n\n# 定义函数，为每个叶节点添加颜色、字体和大小等属性\ni = 0\ncolLab <<- function(n) {\n    if (is.leaf(n)) {\n        # 获取当前节点属性\n        a = attributes(n)\n\n        # 根据标签找到原始数据行，获取处理和品种信息\n        ligne = match(attributes(n)$label, data[, 1])\n        treatment = data[ligne, 3]\n        if (treatment == \"Low\") {\n            col_treatment = \"blue\"\n        }\n        if (treatment == \"High\") {\n            col_treatment = \"red\"\n        }\n        specie = data[ligne, 2]\n        if (specie == \"dicoccoides\") {\n            col_specie = \"red\"\n        }\n        if (specie == \"dicoccum\") {\n            col_specie = \"Darkgreen\"\n        }\n        if (specie == \"durum\") {\n            col_specie = \"blue\"\n        }\n\n        # 修改叶节点属性，包括点的颜色、标签颜色、字体等\n        attr(n, \"nodePar\") <- c(\n            a$nodePar,\n            list(\n                cex = 1.5,         # 点的大小\n                lab.cex = 1,       # 标签字体大小\n                pch = 20,          # 点的形状\n                col = col_treatment, # 点的颜色（按处理分组）\n                lab.col = col_specie, # 标签颜色（按品种分组）\n                lab.font = 1,      # 标签字体\n                lab.cex = 1        # 标签字体大小\n            )\n        )\n    }\n    return(n)\n}\n\n# 应用自定义函数到树状图所有叶节点\ndL <- dendrapply(dhc, colLab)\n\n# 绘制自定义样式的树状图\nplot(dL, main = \"structure of the population\")\n\n# 添加图例，说明颜色和分组含义\nlegend(\n    \"topright\",\n    legend = c(\n        \"High Nitrogen\",   # 高氮处理\n        \"Low Nitrogen\",    # 低氮处理\n        \"Durum\",           # 品种durum\n        \"Dicoccoides\",     # 品种dicoccoides\n        \"Dicoccum\"         # 品种dicoccum\n    ),\n    col = c(\"red\", \"blue\", \"blue\", \"red\", \"Darkgreen\"),\n    pch = c(20, 20, 4, 4, 4),\n    bty = \"n\",\n    pt.cex = 1.5,\n    cex = 0.8,\n    text.col = \"black\",\n    horiz = FALSE,\n    inset = c(0, 0.1)\n)\n```\n\n::: {.cell-output-display}\n![自定义树状图叶节点颜色和标签样式](dendrogram_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## 定制\n\n### `set()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载tidyverse包，用于数据处理\nlibrary(tidyverse)\nlibrary(dendextend) # 用于dendrogram对象的定制\nlibrary(patchwork)  # 用于拼接多个图形\n\n# 使用mtcars数据集的mpg、cyl、disp三个变量进行层次聚类\ndend <- mtcars |>\n    select(mpg, cyl, disp) |> # 选择3个变量\n    dist() |>                 # 计算欧氏距离\n    hclust() |>               # 层次聚类\n    as.dendrogram()           # 转换为dendrogram对象\n\n# 设置绘图区域的边距，增加底部空间以完整显示标签\npar(mar = c(7, 3, 1, 1))\n\n# 基础树状图\nplot(dend)\n```\n\n::: {.cell-output-display}\n![使用set()函数定制mtcars数据集的树状图分支、标签和节点样式](dendrogram_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 使用set()函数定制分支颜色和粗细，以及标签颜色和大小\ndend |>\n  set(\"branches_col\", \"grey\") |>   # 设置分支颜色为灰色\n  set(\"branches_lwd\", 3) |>        # 设置分支线宽为3\n  set(\"labels_col\", \"orange\") |>   # 设置标签颜色为橙色\n  set(\"labels_cex\", 0.8) |>        # 设置标签字体大小为0.8\n  plot()\n```\n\n::: {.cell-output-display}\n![使用set()函数定制mtcars数据集的树状图分支、标签和节点样式](dendrogram_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# 定制所有节点的点形状、大小和颜色\ndend |>\n  set(\"nodes_pch\", 19)  |>         # 设置所有节点的点形状为实心圆\n  set(\"nodes_cex\", 0.7) |>         # 设置节点点的大小为0.7\n  set(\"nodes_col\", \"orange\") |>    # 设置节点点的颜色为橙色\n  plot()\n```\n\n::: {.cell-output-display}\n![使用set()函数定制mtcars数据集的树状图分支、标签和节点样式](dendrogram_files/figure-html/unnamed-chunk-12-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# 仅定制叶节点的点形状、大小和颜色\ndend |>\n  set(\"leaves_pch\", 19)  |>        # 设置叶节点的点形状为实心圆\n  set(\"leaves_cex\", 0.7) |>        # 设置叶节点点的大小为0.7\n  set(\"leaves_col\", \"skyblue\") |>  # 设置叶节点点的颜色为天蓝色\n  plot()\n```\n\n::: {.cell-output-display}\n![使用set()函数定制mtcars数据集的树状图分支、标签和节点样式](dendrogram_files/figure-html/unnamed-chunk-12-4.png){width=672}\n:::\n:::\n\n\n### Highlight\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 根据聚类结果为标签和分支着色\npar(mar = c(1, 1, 1, 7)) # 设置绘图区域边距，右侧留出空间\ndend |>\n    set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |> # 按3个聚类为标签着色\n    set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |> # 按3个聚类为分支着色\n    plot(horiz = TRUE, axes = FALSE) # 横向绘制树状图，去除坐标轴\nabline(v = 350, lty = 2) # 添加虚线，辅助观察\n```\n\n::: {.cell-output-display}\n![根据聚类结果为树状图分支和标签着色，并高亮显示指定聚类分支](dendrogram_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 高亮显示某个聚类分支（用矩形框出）\npar(mar = c(9, 1, 1, 1)) # 调整边距，底部留出空间\ndend |>\n    set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |> # 按3个聚类为标签着色\n    set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |> # 按3个聚类为分支着色\n    plot(axes = FALSE) # 绘制树状图，去除坐标轴\nrect.dendrogram(\n    dend,                # 树状图对象\n    k = 3,               # 指定聚类数为3\n    lty = 5,             # 矩形边框线型为虚线\n    lwd = 0,             # 边框线宽为0（仅填充色，无边框线）\n    x = 1,               # 指定高亮第1个聚类\n    col = rgb(0.1, 0.2, 0.4, 0.1) # 填充颜色为半透明蓝色\n)\n```\n\n::: {.cell-output-display}\n![根据聚类结果为树状图分支和标签着色，并高亮显示指定聚类分支](dendrogram_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n\n### 预期\n\n与预期聚类进行比较:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建颜色向量：am为0时为深绿色（forestgreen），为1时为绿色（green）\nmy_colors <- ifelse(mtcars$am == 0, \"forestgreen\", \"green\")\n\n# 设置绘图区域边距，底部留出空间以完整显示标签\npar(mar = c(10, 1, 1, 1))\n\n# 绘制树状图，分支和标签按3个聚类着色，叶节点为实心圆，节点大小为0.7\ndend |>\n    set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |> # 标签按聚类着色\n    set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |> # 分支按聚类着色\n    set(\"leaves_pch\", 19) |>        # 叶节点点形状为实心圆\n    set(\"nodes_cex\", 0.7) |>        # 节点点大小为0.7\n    plot(axes = FALSE)              # 去除坐标轴\n\n# 在树状图下方添加分组色条，表示am变量的分组情况\ncolored_bars(colors = my_colors, dend = dend, rowLabels = \"am\")\n```\n\n::: {.cell-output-display}\n![对比聚类结果与预期分组（am变量）并添加分组色条](dendrogram_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n###  2 树比较\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用USArrests数据集，分别用average和complete方法进行层次聚类，并转换为dendrogram对象\nd1 <- USArrests |> dist() |> hclust(method = \"average\") |> as.dendrogram()   # average法\nd2 <- USArrests |> dist() |> hclust(method = \"complete\") |> as.dendrogram()  # complete法\n\n# 对两棵树分别定制分支和标签颜色，并放入dendlist对象中\ndl <- dendlist(\n    d1 |>\n        set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |>   # 按3类为标签着色\n        set(\"branches_lty\", 1) |>                                             # 分支线型为实线\n        set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3), # 按3类为分支着色\n    d2 |>\n        set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |>\n        set(\"branches_lty\", 1) |>\n        set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3)\n)\n\n# 并排绘制两棵树状图，比较聚类结构差异\ntanglegram(\n    dl,\n    common_subtrees_color_lines = FALSE,   # 不高亮共同子树\n    highlight_distinct_edges = TRUE,       # 高亮不同的分支\n    highlight_branches_lwd = FALSE,        # 不加粗分支\n    margin_inner = 7,                      # 两树之间的间距\n    lwd = 2                                # 分支线宽\n)\n```\n\n::: {.cell-output-display}\n![对比两种不同聚类方法（average与complete）的树状图结构](dendrogram_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/d3-4.10.2/d3.min.js\"></script>\n<link href=\"site_libs/collapsibleTree-0.1.6/collapsibleTree.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/collapsibleTree-binding-0.1.8/collapsibleTree.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}