{
  "hash": "2f845a58dbba38bb6ea40c376667996b",
  "result": {
    "engine": "knitr",
    "markdown": "# Network {#sec-network}\n\n## PKG \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)       # 用于网络分析和可视化\nlibrary(RColorBrewer) # 用于提供美观的调色板\nlibrary(networkD3)    # 用于创建D3.js交互式网络图\n```\n:::\n\n\n## step\n\n### 基本\n\n![数据格式](./image/square-matrix-1.png){width=70%}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载 igraph 包, 用于网络分析和可视化\nlibrary(igraph)\n\nset.seed(10)\n\n# 创建一个5x5的邻接矩阵, 元素为0到2的随机整数\ndata <- matrix(sample(0:2, 25, replace = TRUE), nrow = 5)\n\n# 将矩阵的行名和列名设置为 A, B, C, D, E\ncolnames(data) <- rownames(data) <- LETTERS[1:5]\n\n# 从邻接矩阵创建图 (graph) 对象\nnetwork <- graph_from_adjacency_matrix(data)\n\n# 绘制网络图\nplot(network)\n```\n\n::: {.cell-output-display}\n![一个基础的网络关系图](network_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n![数据格式](./image/square-matrix-2.png){width=70%}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载 igraph 包, 用于网络分析和可视化\nlibrary(igraph)\n\n# 准备数据\nset.seed(1)\ndata <- matrix(sample(0:2, 15, replace=TRUE), nrow=3)\ncolnames(data) <- letters[1:5]\nrownames(data) <- LETTERS[1:3]\n \n# 从关联矩阵创建图 (graph) 对象\nnetwork <- graph_from_incidence_matrix(data)\n \n# 绘制网络图\nplot(network)\n```\n\n::: {.cell-output-display}\n![一个基础的关联矩阵图](network_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n![边列表](./image/square-matrix-3.png){width=30%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建数据:\nlinks <- data.frame(\n    source=c(\"A\",\"A\", \"A\", \"A\", \"A\",\"F\", \"B\"),\n    target=c(\"B\",\"B\", \"C\", \"D\", \"F\",\"A\",\"E\")\n    )\n\n# 创建网络对象\nnetwork <- graph_from_data_frame(d=links, directed=F) \n\n# 绘制网络图\nplot(network)\n```\n\n::: {.cell-output-display}\n![一个基础的边列表图](network_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建数据:\nnetwork <- graph_from_literal( A-B-C-D, E-A-E-A, D-C-A, D-A-D-C )\n\n# 绘制网络图\nplot(network)\n```\n\n::: {.cell-output-display}\n![一个基础的图字面量图](network_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### 自定\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n\n# 创建数据\nset.seed(1)\ndata <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.8,0.2)), nc=10)\nnetwork <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )\n\n# 绘制网络图\npar(mar=c(0,0,0,0))\nplot(network)\n```\n\n::: {.cell-output-display}\n![默认网络图](network_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 准备数据\nset.seed(1)\ndata <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.8,0.2)), nc=10)\n\n# 从邻接矩阵创建图 (graph) 对象\nnetwork <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )\n\n# 绘制网络图\nplot(network,\n    vertex.color = rgb(0.8,0.2,0.2,0.9),           # 节点颜色\n    vertex.frame.color = \"Forestgreen\",            # 节点边框颜色\n    vertex.shape=c(\"circle\",\"square\"),             # 节点形状\n    vertex.size=c(15:24),                          # 节点大小\n    vertex.size2=NA,                               # 节点第二个大小\n    )\n```\n\n::: {.cell-output-display}\n![自定义节点特征](network_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 绘制网络图\nplot(network,\n    vertex.label=LETTERS[1:10],                    # 节点标签\n    vertex.label.color=c(\"red\",\"blue\"),            # 标签颜色\n    vertex.label.family=\"Times\",                   # 标签字体\n    vertex.label.font=c(1,2,3,4),                  # 标签字体样式\n    vertex.label.cex=c(0.5,1,1.5),                 # 标签大小\n    vertex.label.dist=0,                           # 标签与节点的距离\n    vertex.label.degree=0 ,                        # 标签与节点的位置\n    )\n```\n\n::: {.cell-output-display}\n![自定义标签特征](network_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 绘制网络图\nplot(network,\n    edge.color=rep(c(\"red\",\"pink\"),5),           # 边颜色\n    edge.width=seq(1,10),                        # 边宽度, 默认值为1\n    edge.arrow.size=1,                           # 箭头大小, 默认值为1\n    edge.arrow.width=1,                          # 箭头宽度, 默认值为1\n    edge.lty=c(\"solid\"),                          \n    # 线型, 可以是0或“blank”, 1或“solid”, 2或“dashed”, 3或“dotted”, 4或“dotdash”, 5或“longdash”, 6或“twodash”\n    #edge.curved=c(rep(0,5), rep(1,5))            # 边弯曲度, 范围0-1 (FALSE设置为0, TRUE设置为0.5)\n    edge.curved=0.5\n    )\n```\n\n::: {.cell-output-display}\n![自定义边特征](network_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 设置背景颜色\n# par(bg=\"black\")\n\nplot(network, \n    \n    # === vertex\n    vertex.color = rgb(0.8,0.4,0.3,0.8),          # 节点颜色\n    vertex.frame.color = \"white\",                 # 节点边框颜色\n    vertex.shape=\"circle\",                        # 节点形状\n    vertex.size=14,                               # 节点大小\n    vertex.size2=NA,                              # 节点第二个大小\n    \n    # === vertex label\n    vertex.label=LETTERS[1:10],                   # 节点标签\n    vertex.label.color=\"white\",\n    vertex.label.family=\"Times\",                  # 标签字体\n    vertex.label.font=2,                          # 标签字体样式\n    vertex.label.cex=1,                           # 标签大小\n    vertex.label.dist=0,                          # 标签与节点的距离\n    vertex.label.degree=0 ,                       # 标签与节点的位置\n    \n    # === Edge\n    edge.color=\"white\",                           # 边颜色\n    edge.width=4,                                 # 边宽度\n    edge.lty=\"solid\",                             # 线型, 可以是0或“blank”, 1或“solid”, 2或“dashed”, 3或“dotted”, 4或“dotdash”, 5或“longdash”, 6或“twodash”\n    edge.curved=0.3    ,                          # 边弯曲度, 范围0-1 (FALSE设置为0, TRUE设置为0.5)\n    )\n```\n\n::: {.cell-output-display}\n![自定义网络图](network_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n### 布局算法\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nlibrary(igraph)\n \n# 创建数据\ndata <- matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20)\nnetwork <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )\n \n# 绘制网络图\nplot(network, layout=layout.sphere, main=\"sphere\")\n```\n\n::: {.cell-output-display}\n![不同布局算法](network_files/figure-html/unnamed-chunk-11-1.png){width=768}\n:::\n\n```{.r .cell-code}\nplot(network, layout=layout.circle, main=\"circle\")\n```\n\n::: {.cell-output-display}\n![不同布局算法](network_files/figure-html/unnamed-chunk-11-2.png){width=768}\n:::\n\n```{.r .cell-code}\nplot(network, layout=layout.random, main=\"random\")\n```\n\n::: {.cell-output-display}\n![不同布局算法](network_files/figure-html/unnamed-chunk-11-3.png){width=768}\n:::\n\n```{.r .cell-code}\nplot(network, layout=layout.fruchterman.reingold, main=\"fruchterman.reingold\")\n```\n\n::: {.cell-output-display}\n![不同布局算法](network_files/figure-html/unnamed-chunk-11-4.png){width=768}\n:::\n:::\n\n\n### 变量映射\n\n变量映射到节点特征:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 准备数据\n\n# 创建数据\nlinks <- data.frame(\n    source=c(\"A\",\"A\", \"A\", \"A\", \"A\",\"J\", \"B\", \"B\", \"C\", \"C\", \"D\",\"I\"),\n    target=c(\"B\",\"B\", \"C\", \"D\", \"J\",\"A\",\"E\", \"F\", \"G\", \"H\", \"I\",\"I\"),\n    importance=(sample(1:4, 12, replace=T))\n    )\nnodes <- data.frame(\n    name=LETTERS[1:10],\n    carac=c( rep(\"young\",3),rep(\"adult\",2), rep(\"old\",5))\n    )\n \n# 将数据转换为 igraph 对象\nnetwork <- graph_from_data_frame(d=links, vertices=nodes, directed=F) \n \n# 创建一个3色的调色板\nlibrary(RColorBrewer)\ncoul  <- brewer.pal(3, \"Set1\") \n \n# 创建一个颜色向量\nmy_color <- coul[as.numeric(as.factor(V(network)$carac))]\n \n# 绘制网络图\nplot(network, vertex.color=my_color)\n \n# 添加图例\nlegend(\n    \"bottomleft\",  # 图例位置\n    legend=levels(as.factor(V(network)$carac)),  # 图例标签\n    col = coul ,  # 图例颜色\n    bty = \"n\",  # 图例边框类型\n    pch=20 ,  # 图例符号类型\n    pt.cex = 3,  # 图例符号大小\n    cex = 1.5,  # 图例字体大小\n    text.col=coul ,  # 图例文字颜色\n    horiz = FALSE,  # 图例是否水平排列\n    inset = c(0.1, 0.1)  # 图例相对于绘图区域的偏移量\n    )\n```\n\n::: {.cell-output-display}\n![变量映射到节点特征](network_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n变量映射到连接特征:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 绘制网络图\nplot(network, vertex.color=my_color, edge.width=E(network)$importance*2 )\n\n# 添加图例\nlegend(\n    \"bottomleft\",  # 图例位置\n    legend=levels(as.factor(V(network)$carac)),  # 图例标签\n    col = coul ,  # 图例颜色\n    bty = \"n\",  # 图例边框类型\n    pch=20 ,  # 图例符号类型\n    pt.cex = 3,  # 图例符号大小\n    cex = 1.5,  # 图例字体大小\n    text.col=coul ,  # 图例文字颜色\n    horiz = FALSE,  # 图例是否水平排列\n    inset = c(0.1, 0.1)  # 图例相对于绘图区域的偏移量\n    )\n```\n\n::: {.cell-output-display}\n![变量映射到连接特征](network_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### 聚类可视化\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph) # 加载 igraph 包, 用于网络分析和可视化\n\n# 准备数据并计算相关性矩阵\n# 首先对 mtcars 数据集的第 1, 3, 4, 5, 6 列进行转置\n# 然后计算转置后各行(即原始数据集中的各车辆)之间的相关性矩阵, 相关性矩阵是一个对称矩阵, 对角线上的元素为1\nmat <- cor(t(mtcars[, c(1, 3:6)]))\n\n# 过滤相关性矩阵, 仅保留强相关性(>=0.995)\n# 将低于阈值的相关性系数设置为 0\nmat[mat < 0.995] <- 0\n\n# 从处理后的邻接矩阵创建 igraph 图对象\nnetwork <- graph_from_adjacency_matrix(\n  mat,\n  weighted = TRUE,      # 边权重来自于矩阵中的值\n  mode = \"undirected\",  # 创建一个无向图\n  diag = FALSE          # 忽略对角线元素 (节点的自我连接)\n)\n\n# 绘制基础的网络图\nplot(network)\n```\n\n::: {.cell-output-display}\n![基于强相关性生成的基础网络图](network_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载 RColorBrewer 包, 用于提供美观的调色板\nlibrary(RColorBrewer)\n\n# 根据 `mtcars$cyl` 的因子水平数(即气缸数的种类), 从 \"Set2\" 调色板中生成颜色\ncoul <- brewer.pal(nlevels(as.factor(mtcars$cyl)), \"Set2\")\n\n# 将颜色映射到每辆车(节点)\n# as.factor(mtcars$cyl) 将气缸数转为因子, as.numeric() 获取其整数表示, 以此作为颜色向量 `coul` 的索引\nmy_color <- coul[as.numeric(as.factor(mtcars$cyl))]\n\n# 设置绘图参数: 背景色为深灰色(\"grey13\"), 图形边距全部设为0\npar(bg = \"grey13\", mar = c(0, 0, 0, 0))\n# 设置随机种子以确保每次生成的网络布局相同\nset.seed(4)\n\n# 绘制网络图并自定义节点属性\nplot(network,\n  vertex.size = 12,                   # 节点大小\n  vertex.color = my_color,            # 节点颜色 (根据气缸数)\n  vertex.label.cex = 0.7,             # 节点标签的字体大小\n  vertex.label.color = \"white\",       # 节点标签的颜色\n  vertex.frame.color = \"transparent\"  # 节点边框颜色 (设为透明)\n)\n\n# 在图中央添加标题\ntext(0, 0, \"mtcars network\", col = \"white\", cex = 1.5)\n# 添加图例\nlegend(\n  x = -0.2, y = -0.12,\n  legend = paste(levels(as.factor(mtcars$cyl)), \" cylinders\", sep = \"\"), # 图例文字\n  col = coul,                # 图例颜色\n  bty = \"n\",                 # 无边框\n  pch = 20,                  # 图例符号为实心圆\n  pt.cex = 2,                # 符号大小\n  cex = 1,                   # 文字大小\n  text.col = \"white\",        # 文字颜色\n  horiz = FALSE              # 垂直排列\n)\n```\n\n::: {.cell-output-display}\n![根据mtcars的气缸数(cyl)对节点进行着色](network_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(network,\n  edge.color = rep(c(\"red\", \"pink\"), 5), # 边的颜色 (循环使用\"red\"和\"pink\")\n  edge.width = seq(1, 10),               # 边的宽度 (从1到10的序列)\n  edge.arrow.size = 1,                   # 箭头大小 (默认为1, 对无向图不显示)\n  edge.arrow.width = 1,                  # 箭头宽度 (默认为1, 对无向图不显示)\n  edge.lty = c(\"solid\")                  # 边线型: \"solid\"为实线\n  # 其他可选线型: \"blank\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", \"twodash\"\n  # edge.curved=c(rep(0,5), rep(1,5))     # (示例)边的曲率 (0-1之间)\n)\n```\n\n::: {.cell-output-display}\n![自定义网络图中的边属性](network_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 设置绘图背景为黑色\npar(bg = \"black\")\n\nplot(network,\n\n  # === 节点(vertex)属性 ===\n  vertex.color = rgb(0.8, 0.4, 0.3, 0.8), # 节点颜色: 使用rgb定义, 最后一个参数是透明度\n  vertex.frame.color = \"white\",          # 节点边框颜色\n  vertex.shape = \"circle\",               # 节点形状: \"circle\", \"square\", \"rectangle\"等\n  vertex.size = 14,                      # 节点大小\n  vertex.size2 = NA,                     # 节点的第二个尺寸(例如矩形的高度)\n\n  # === 节点标签(label)属性 ===\n  vertex.label = LETTERS[1:10],          # 节点标签内容 (这里用前10个大写字母)\n  vertex.label.color = \"white\",          # 标签颜色\n  vertex.label.family = \"Times\",         # 标签字体\n  vertex.label.font = 2,                 # 标签字形: 1常规, 2粗体, 3斜体, 4粗斜体\n  vertex.label.cex = 1,                  # 标签字体大小\n  vertex.label.dist = 0,                 # 标签与节点的距离\n  vertex.label.degree = 0,               # 标签相对于节点的位置(角度, 用pi表示)\n\n  # === 边(edge)属性 ===\n  edge.color = \"white\",                  # 边的颜色\n  edge.width = 4,                        # 边的宽度\n  edge.arrow.size = 1,                   # 箭头大小\n  edge.arrow.width = 1,                  # 箭头宽度\n  edge.lty = \"solid\",                    # 边线型 (\"solid\"是实线)\n  edge.curved = 0.3                      # 边的曲率\n)\n```\n\n::: {.cell-output-display}\n![综合所有自定义选项的网络图](network_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### 大小\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\n \n# 创建数据\nlinks=data.frame(\n    source=c(\"A\",\"A\", \"A\", \"A\", \"A\",\"J\", \"B\", \"B\", \"C\", \"C\", \"D\",\"I\"),\n    target=c(\"B\",\"B\", \"C\", \"D\", \"J\",\"A\",\"E\", \"F\", \"G\", \"H\", \"I\",\"I\")\n    )\n \n# 将数据转换为 igraph 对象\nnetwork <- graph_from_data_frame(d=links, directed=F) \n \n# 计算每个节点的度数\ndeg <- degree(network, mode=\"all\")\n \n# 绘制网络图\nplot(network, vertex.size=deg*6, vertex.color=rgb(0.1,0.7,0.8,0.5) )\n```\n\n::: {.cell-output-display}\n![根据节点度数调整节点大小](network_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n## Interactive\n\n### 基本\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载所需R包\nlibrary(igraph)      # 用于网络结构分析 (在此代码块中未直接使用)\n# install.packages(\"networkD3\")\nlibrary(networkD3)   # 用于创建D3.js交互式网络图\n\n# 创建一个数据框作为边列表 (edge list)\n# 每一行代表一条从 'from' 列节点到 'to' 列节点的连接\ndata <- data.frame(\n  from = c(\"A\", \"A\", \"B\", \"D\", \"C\", \"D\", \"E\", \"B\", \"C\", \"D\", \"K\", \"A\", \"M\"),\n  to = c(\"B\", \"E\", \"F\", \"A\", \"C\", \"A\", \"B\", \"Z\", \"A\", \"C\", \"A\", \"B\", \"K\")\n)\n\n# 使用 simpleNetwork 函数生成一个基础的交互式网络图\np <- simpleNetwork(data, height = \"100px\", width = \"100px\")\n\np\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"forceNetwork html-widget html-fill-item\" id=\"htmlwidget-575137ed641523c25e00\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-575137ed641523c25e00\">{\"x\":{\"links\":{\"source\":[0,0,1,3,2,3,4,1,2,3,6,0,7],\"target\":[1,4,5,0,2,0,1,8,0,2,0,1,6],\"value\":[1,1,1,1,1,1,1,1,1,1,1,1,1],\"colour\":[\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\"]},\"nodes\":{\"name\":[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"K\",\"M\",\"Z\"],\"group\":[1,1,1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['#3182bd'])\",\"fontSize\":7,\"fontFamily\":\"serif\",\"clickTextSize\":17.5,\"linkDistance\":50,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-30,\"opacity\":0.6,\"zoom\":false,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\n使用 networkD3 创建基础交互式网络图\n:::\n:::\n\n\n### 自定义\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载所需R包\nlibrary(igraph)\nlibrary(networkD3)\n\n# 创建一个数据框作为边列表\ndata <- data.frame(\n  from = c(\"A\", \"A\", \"B\", \"D\", \"C\", \"D\", \"E\", \"B\", \"C\", \"D\", \"K\", \"A\", \"M\"),\n  to = c(\"B\", \"E\", \"F\", \"A\", \"C\", \"A\", \"B\", \"Z\", \"A\", \"C\", \"A\", \"B\", \"K\")\n)\n\n# 使用 simpleNetwork 函数并添加多个参数来自定义网络图\np <- simpleNetwork(data,\n  height = \"100px\", width = \"100px\",\n  Source = 1,          # 数据框中源节点列的索引 (第一列)\n  Target = 2,          # 数据框中目标节点列的索引 (第二列)\n  linkDistance = 10,   # 节点之间的链接距离, 增大可使节点更分散\n  charge = -900,       # 节点间的电荷力: 负值表示斥力, 正值表示引力\n  fontSize = 14,       # 节点标签的字体大小\n  fontFamily = \"serif\", # 节点标签的字体\n  linkColour = \"#666\", # 所有边的颜色\n  nodeColour = \"#69b3a2\",# 所有节点的颜色\n  opacity = 0.9,       # 节点的不透明度 (0=透明, 1=不透明)\n  zoom = TRUE          # 是否允许通过滚轮缩放图形\n)\n\np\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"forceNetwork html-widget html-fill-item\" id=\"htmlwidget-cbd0980fb6f50deb4712\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-cbd0980fb6f50deb4712\">{\"x\":{\"links\":{\"source\":[0,0,1,3,2,3,4,1,2,3,6,0,7],\"target\":[1,4,5,0,2,0,1,8,0,2,0,1,6],\"value\":[1,1,1,1,1,1,1,1,1,1,1,1,1],\"colour\":[\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\",\"#666\"]},\"nodes\":{\"name\":[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"K\",\"M\",\"Z\"],\"group\":[1,1,1,1,1,1,1,1,1],\"nodesize\":[8,8,8,8,8,8,8,8,8]},\"options\":{\"NodeID\":\"name\",\"Group\":\"group\",\"colourScale\":\"d3.scaleOrdinal(['#69b3a2'])\",\"fontSize\":14,\"fontFamily\":\"serif\",\"clickTextSize\":35,\"linkDistance\":10,\"linkWidth\":\"'1.5px'.toString()\",\"charge\":-900,\"opacity\":0.9,\"zoom\":true,\"legend\":false,\"arrows\":false,\"nodesize\":true,\"radiusCalculation\":\"d.nodesize\",\"bounded\":false,\"opacityNoHover\":1,\"clickAction\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n\n自定义交互式网络图的布局和样式\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/d3-4.9.1/d3.min.js\"></script>\n<script src=\"site_libs/forceNetwork-binding-0.4.1/forceNetwork.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}