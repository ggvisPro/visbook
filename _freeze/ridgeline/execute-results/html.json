{
  "hash": "83d3e50c4513e8ceede9842e159bcb4f",
  "result": {
    "engine": "knitr",
    "markdown": "# Ridgeline {#sec-ridgeline}\n\n主要借助强大且美观的`ggridges`包来绘制山脊图。山脊图可以更好地展示多个分布的情况。\n\n山脊图（ridgeline chart）本质上是一组密度图（density plots），建议先学习密度图的绘制方法。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggridges) # 用于创建山峦图\nlibrary(ggplot2) # 提供对色盲友好的美观调色板\nlibrary(viridis) # 提供色盲友好的渐变色调色板\nlibrary(hrbrthemes) # 提供一套简洁、专业外观的 ggplot2 主题\n```\n:::\n\n\n## 基础山脊图\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) +\n  geom_density_ridges(alpha = 0.5) +\n  theme_ridges() + # 适合ridge图的主题\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![基础山脊图](ridgeline_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## 直方图类型\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) +\n  geom_density_ridges(alpha = 0.5, stat=\"binline\") + # 直方图参数\n  theme_ridges() + # 适合ridge图的主题\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![转换为直方图](ridgeline_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## 带颜色\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +\n\n  # 添加一个“渐变密度山峦图”几何对象层\n  # - geom_density_ridges_gradient() 是 ggridges 包的核心函数\n  # - `fill = ..x..` 的美学映射在这里生效，使得每个山峦的填充色根据其 x 轴数值（温度）进行渐变\n  geom_density_ridges_gradient(\n    # scale = 3: 控制山峦之间重叠的程度。数值越大，重叠越多，图形越紧凑\n    scale = 3,\n    # rel_min_height = 0.01: 裁剪每个密度曲线的尾部，移除高度低于最大高度1%的部分，使图形更整洁\n    rel_min_height = 0.01\n  ) +\n\n  # 使用 viridis 调色板来应用填充色\n  scale_fill_viridis(\n    # name = \"Temp. [F]\": 设置颜色图例的标题（尽管后面图例被隐藏了）\n    name = \"Temp. [F]\",\n    # option = \"C\": 选择 viridis 调色板中的 \"C\" 方案 (也称为 \"plasma\")\n    option = \"C\"\n  ) +\n\n  # 设置图表的标签\n  labs(title = 'Temperatures in Lincoln NE in 2016') + # 设置主标题\n\n  theme_ipsum() +\n\n  # 对主题进行微调\n  theme(\n    # legend.position=\"none\": 隐藏图例。因为颜色已经直观地反映在x轴上，所以图例不是必需的\n    legend.position=\"none\",\n    # panel.spacing: 调整不同面板（即每个月份的图）之间的垂直间距，使其更紧凑\n    panel.spacing = unit(0.1, \"lines\"),\n    # strip.text.x: 调整分面标题在X轴方向的文本属性。\n    strip.text.y = element_text(size = 8)\n  )\n```\n\n::: {.cell-output-display}\n![带X轴颜色的山峦图](ridgeline_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## Pearl\n\n### [内部有图例和注释的山脊图](https://r-graph-gallery.com/web-ridgeline-plot-with-inside-plot-and-annotations.html)\n\n一种内部有图例和注释的山脊图\n\n以下是生成该图的代码（因为原始数据比较大，在github，所以直接放了生成的图片）：\n\n![内部有图例和注释的山脊图](./image/ridgeline_inside_annotation.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # 数据整理和可视化的核心包集合\nlibrary(ggtext) # 增强ggplot2的文本渲染能力\nlibrary(ggdist) # 提供高级的分布可视化图层\nlibrary(glue) # 方便地将变量嵌入到字符串中\nlibrary(patchwork) # 用于组合和排列多个ggplot图表\n\n\n# 从 github 读取数据文件\nrent = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/rent.csv\"\n) # 包含原始租金信息的CSV文件\nrent_title_words = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/rent_title_words.csv\"\n) # 包含从标题中提取的词语和对应租金的数据\ndf_plot = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/df_plot.csv\"\n) # 专门为绘图准备的聚合数据\n\n# --- 数据预处理 ---\n\n# 按平均价格降序排列数据框\ndf_plot <- df_plot |> arrange(desc(mean_price))\n# 将 'word' 列转换为因子类型，并指定其顺序（levels），确保在图表中的显示顺序与排列后的一致\ndf_plot$word <- factor(df_plot$word, levels = unique(df_plot$word))\n\n# 计算一些将在图表中使用的全局统计量\nmean_price <- mean(rent$price, na.rm = TRUE) # 所有房源的平均租金\nmedian_price <- median(rent$price, na.rm = TRUE) # 所有房源的租金中位数\nn_rental_posts <- nrow(subset(rent, !is.na(title))) # 有效（标题不为空）的出租帖子总数\n\n# --- 图表美学设置 ---\n\n# 定义图表的背景颜色\nbg_color <- \"grey97\"\n\n# 使用 glue 包创建一个动态的副标题字符串\nplot_subtitle = glue(\n  \"Adjectives used to describe houses and apartments in San Francisco Bay Area \nCraigslist rental post titles, and their relationship with rent prices. Data is from \n{scales::number(n_rental_posts, big.mark = ',')} Craigslist rental posts between 2000 and 2018.\nThe 15 most frequent adjectives are shown.\n\"\n)\n\n# --- 创建主图表 (p) ---\n\np <- df_plot |>\n  ggplot(aes(word, price)) + # 初始化ggplot对象，设置x轴为单词，y轴为价格\n  # 添加半眼图层（雨云图的核心部分），展示数据分布\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  # 添加置信区间图层，默认显示50%, 80%, 95%的区间\n  stat_interval() +\n  # 添加一个点来表示每个单词对应的租金中位数\n  stat_summary(geom = \"point\", fun = median) +\n  # 在图表特定位置添加文本，作为平均卧室数的列标题\n  annotate(\n    \"text\",\n    x = 16,\n    y = 0,\n    label = \"(Avg. Bedrooms)\",\n    size = 3,\n    hjust = 0.5\n  ) +\n  # 为每个单词计算并显示平均卧室数\n  stat_summary(\n    aes(y = beds), # 使用 'beds' 列的数据\n    geom = \"text\", # 以文本形式显示\n    fun.data = function(x) {\n      # 自定义一个函数来计算均值并格式化输出\n      data.frame(\n        y = 0, # 将文本放置在y=0的位置\n        label = sprintf(\n          \"(%s)\",\n          scales::number(\n            mean(ifelse(x > 0, x, NA), na.rm = TRUE),\n            accuracy = 0.1\n          )\n        )\n      )\n    },\n    size = 2.5\n  ) +\n  # 添加一条水平虚线，代表所有房源的租金中位数\n  geom_hline(yintercept = median_price, col = \"grey30\", lty = \"dashed\") +\n  # 为中位数线添加文本标签\n  annotate(\n    \"text\",\n    x = 16,\n    y = median_price + 50,\n    label = \"Median Rent\",\n    size = 3,\n    hjust = 0\n  ) +\n  # 将x轴的标签（单词）转换为大写\n  scale_x_discrete(labels = toupper) +\n  # 设置y轴（价格）的刻度标记\n  scale_y_continuous(breaks = seq(2500, 20000, 2500)) +\n  # 手动设置颜色方案，这里假设 MetBrewer 包已安装\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n  # 翻转坐标轴，使条形图水平显示，并设置y轴（翻转后为价格轴）的范围，clip=\"off\"允许绘图超出面板区域\n  coord_flip(ylim = c(0, 10000), clip = \"off\") +\n  # 移除默认的颜色图例\n  guides(col = \"none\") +\n  # 设置图表的标题、副标题、说明文字和坐标轴标签\n  labs(\n    title = toupper(\"Are 'nice' and 'clean' apartments really cheaper?\"),\n    subtitle = plot_subtitle,\n    caption = \"Y-axis capped at $10,000.<br>\n     Data source: Pennington, Kate (2018). \n     Bay Area Craigslist Rental Housing Posts, 2000-2018.<br>\n     From github.com/katepennington/historic_bay_area_craigslist_housing_posts/blob/master/clean_2000_2018.csv.zip.\n     <br>\n     Visualization: Ansgar Wolsing\",\n    x = NULL, # 移除x轴标签\n    y = \"Rent (USD)\"\n  ) +\n  # 使用一个简洁的主题\n  theme_minimal() +\n  # 对主题进行深度定制\n  theme(\n    plot.background = element_rect(color = NA, fill = bg_color), # 设置图表背景\n    panel.grid = element_blank(), # 移除所有网格线\n    panel.grid.major.x = element_line(linewidth = 0.1, color = \"grey75\"), # 添加主x轴网格线（翻转后是水平线）\n    plot.title = element_text(),\n    plot.title.position = \"plot\", # 标题位置与整个图对齐\n    plot.subtitle = element_textbox_simple(\n      # 使用ggtext设置副标题，支持自动换行\n      margin = margin(t = 4, b = 16),\n      size = 10\n    ),\n    plot.caption = element_textbox_simple(\n      # 使用ggtext设置说明文字\n      margin = margin(t = 12),\n      size = 7\n    ),\n    plot.caption.position = \"plot\", # 说明文字位置与整个图对齐\n    axis.text.y = element_text(hjust = 0, margin = margin(r = -10)),\n    plot.margin = margin(4, 4, 4, 4) # 设置图表外边距\n  )\n\n# --- 创建自定义图例 (p_legend) ---\n\n# 为图例创建一个小的数据框，只使用 \"beautiful\" 这个词的数据作为示例\ndf_for_legend <- rent_title_words |>\n  filter(word == \"beautiful\")\n\n# 创建一个独立的ggplot对象作为图例\np_legend <- df_for_legend |>\n  ggplot(aes(word, price)) +\n  # 同样添加半眼图、区间图和中位数点，作为图例的示例图形\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  stat_interval() +\n  stat_summary(geom = \"point\", fun = median) +\n  # 添加富文本注释，解释图表的各个部分\n  annotate(\n    \"richtext\",\n    x = c(0.8, 0.8, 0.8, 1.4, 1.8),\n    y = c(1000, 5000, 3000, 2400, 4000),\n    label = c(\n      \"50% of prices<br>fall in this range\",\n      \"95% of prices\",\n      \"80% of prices\",\n      \"Median\",\n      \"Distribution<br>of prices\"\n    ),\n    fill = NA,\n    label.size = 0,\n    size = 2,\n    vjust = 1,\n  ) +\n  # 添加曲线箭头，将文本注释指向图形的相应部分\n  geom_curve(\n    data = data.frame(\n      x = c(0.7, 0.80, 0.80, 1.225, 1.8),\n      xend = c(0.95, 0.95, 0.95, 1.075, 1.8),\n      y = c(1800, 5000, 3000, 2300, 3800),\n      yend = c(1800, 5000, 3000, 2100, 2500)\n    ),\n    aes(x = x, xend = xend, y = y, yend = yend),\n    stat = \"unique\",\n    curvature = 0.2,\n    linewidth = 0.2,\n    color = \"grey12\",\n    arrow = arrow(angle = 20, length = unit(1, \"mm\"))\n  ) +\n  # 设置与主图一致的颜色方案\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n  # 翻转坐标轴，并精心调整坐标轴范围以适应图例内容\n  coord_flip(xlim = c(0.75, 1.3), ylim = c(0, 6000), expand = TRUE) +\n  # 移除图例\n  guides(color = \"none\") +\n  # 添加图例的标题\n  labs(title = \"Legend\") +\n  # 使用空白主题，移除所有坐标轴、背景等元素\n  theme_void() +\n  # 对图例进行主题微调\n  theme(\n    plot.title = element_text(size = 9, hjust = 0.075),\n    plot.background = element_rect(\n      color = \"grey30\",\n      linewidth = 0.2,\n      fill = bg_color\n    )\n  ) # 为图例添加边框和背景色\n\n# --- 组合图表 ---\n\n# 使用 patchwork 包的 inset_element() 函数，将自定义图例 (p_legend) 嵌入到主图表 (p) 的指定位置\n# l, r, t, b 分别代表左、右、上、下的边界，数值是相对于主图绘图区域的比例\np + inset_element(p_legend, l = 0.6, r = 1.0, t = 0.99, b = 0.7, clip = FALSE)\n```\n:::\n\n\n### [山水画一般的山脊图](https://r-graph-gallery.com/web-double-ridgeline-plot.html)\n\n山水画一般的山脊图,可视化1900年以来美国最受欢迎的50个男女姓名\n\n![可视化1900年以来美国最受欢迎的50个男女姓名](./image/ridgeline_name.png)\n\n以下是生成该图的代码：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 步骤 1: 加载所需的库\n# ------------------------------------------------\n# 注意：所有与自定义字体相关的库 (extrafont, showtext) 均已移除。\nlibrary(tidyverse)    # 用于数据处理 (dplyr) 和绘图 (ggplot2) 的核心包集合\nlibrary(ggridges)     # 用于创建山脊图 (geom_ridgeline)\nlibrary(cowplot)      # 用于组合多个 ggplot 图表\n\n\n# 步骤 2: 数据加载和准备\n# ------------------------------------------------\n\n# 加载 babynames 数据集，它包含了美国自1880年以来的婴儿姓名数据\nbabynames <- babynames::babynames\n\n# 筛选出历史上总出生数最多的 50 个女性名字\ntop_female <- babynames |>\n  filter(sex == \"F\") |>                  # 1. 筛选性别为女性的数据\n  group_by(name) |>                      # 2. 按名字进行分组\n  summarise(total = sum(n)) |>           # 3. 计算每个名字在所有年份的总出生数\n  slice_max(total, n = 50) |>            # 4. 提取总数排名前50的名字\n  mutate(\n    name = forcats::fct_reorder(name, -total) # 5. 将名字转换为因子，并根据总数降序排列\n  ) |>\n  pull(name)                             # 6. 提取出排好序的名字向量，作为后续排序的基准\n\n# 筛选出历史上总出生数最多的 50 个男性名字 (逻辑同上)\ntop_male <- babynames |>\n  filter(sex == \"M\") |>\n  group_by(name) |>\n  summarise(total = sum(n)) |>\n  slice_max(total, n = 50) |>\n  mutate(\n    name = forcats::fct_reorder(name, -total)\n  ) |>\n  pull(name)\n\n# 准备用于绘制山脊图的女性名字数据\nfemale_names <- babynames |>\n  filter(\n    sex == \"F\",\n    name %in% top_female  # 1. 只保留属于前50热门列表中的名字\n  ) |>\n  # 2. 将name列转换为因子，并指定其顺序与top_female一致，确保Y轴按总排名显示\n  mutate(name = factor(name, levels = levels(top_female))) |>\n  group_by(year, name) |>   # 3. 按年份和名字分组\n  summarise(n = sum(n))     # 4. 聚合数据\n\n# 准备用于绘制山脊图的男性名字数据 (逻辑同上)\nmale_names <- babynames |>\n  filter(\n    sex == \"M\",\n    name %in% top_male\n  ) |>\n  mutate(name = factor(name, levels = levels(top_male))) |>\n  group_by(year, name) |>\n  summarise(n = sum(n))\n\n\n# 步骤 3: 创建独立的图表\n# ------------------------------------------------\n\n########### 女性名字山脊图 (plot1) ###########\nplot1 <- ggplot(female_names, aes(x = year, y = fct_reorder(name, n), height = n / 50000, group = name)) +\n  geom_ridgeline(\n    alpha = 0.5, scale = 4.5, linewidth = 0,\n    fill = \"#05595B\", color = \"white\"\n  ) +\n  xlim(1900, NA) +\n  labs(title = \"Female\", y = \"\", x = \"\") +\n  theme_light() + # 应用一个明亮的主题\n  theme(\n    # 注意：所有 'family' 参数已被移除，将使用系统默认字体\n    plot.title = element_text(hjust = 0, size = 15),\n    axis.ticks.y = element_blank(),\n    axis.text = element_text(size = 8),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(linewidth = 0.5),\n    panel.border = element_blank()\n  ) +\n  geom_segment(aes(x = 1967, xend = 1967, y = 56.7, yend = 52), color = \"#404040\") +\n  geom_segment(aes(x = 1967, xend = 1964, y = 56.7, yend = 56.7), color = \"#404040\") +\n  annotate(\n    geom = \"text\", x = 1970, y = 54, label = \"73,982 babies called\\n'Mary' in 1921\", hjust = \"left\",\n    size = 3, color = \"#404040\" # 'family' 参数已移除\n  )\n\n######### 男性名字山脊图 (plot2) #########\nplot2 <- ggplot(male_names, aes(x = year, y = fct_reorder(name, n), height = n / 50000, group = name)) +\n  geom_ridgeline(\n    alpha = 0.5, scale = 4.5, linewidth = 0,\n    fill = \"#603601\", color = \"white\"\n  ) +\n  xlim(1900, NA) +\n  labs(title = \"Male\", y = \"\", x = \"\") +\n  theme_light() +\n  theme(\n    # 注意：所有 'family' 参数已被移除\n    plot.title = element_text(hjust = 0, size = 15),\n    axis.ticks.y = element_blank(),\n    axis.text = element_text(size = 8),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(linewidth = 0.5),\n    panel.border = element_blank(),\n    panel.background = element_rect(fill = \"white\"),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  geom_segment(aes(x = 1975, xend = 1975, y = 58, yend = 53.1), color = \"#404040\") +\n  geom_segment(aes(x = 1975, xend = 1972, y = 58, yend = 58), color = \"#404040\") +\n  annotate(\n    geom = \"text\", x = 1977, y = 54, label = \"94,756 babies called\\n'James' in 1947\", hjust = \"left\",\n    size = 3, color = \"#404040\" # 'family' 参数已移除\n  )\n\n\n# 步骤 4: 组合图表并添加标题和说明\n# ------------------------------------------------\n\n# 使用 cowplot 创建一个独立的总标题\ntitle_theme <- ggdraw() +\n  draw_label(\"50 most common given names in the US since 1900\",\n    fontface = \"bold\",\n    size = 15,\n    hjust = 0.4 # 'fontfamily' 参数已移除\n  )\n\n# 使用 cowplot 创建一个独立的图表说明/来源信息\ncaption <- ggdraw() +\n  draw_label(\"Source: {babynames} from Hadley Wickham | Graphic: Laura Navarro Soler\",\n    size = 15,\n    hjust = 0.5,\n    color = \"#6B6B6B\" # 'fontfamily' 参数已移除\n  )\n\n# 将两个山脊图水平并排组合\ngridofplots <- plot_grid(plot1, plot2, nrow = 1)\n\n# 将标题、组合图、图表说明垂直堆叠成最终的成品图\nplot_grid(title_theme,\n  gridofplots,\n  caption,\n  ncol = 1, # 最终所有组件排成一列\n  rel_heights = c(0.2, 1.5, 0.1) # 分别指定标题、图、说明的相对高度\n)\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}