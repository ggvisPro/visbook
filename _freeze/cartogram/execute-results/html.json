{
  "hash": "5ea60ef84829feb6b702f9652be5254a",
  "result": {
    "engine": "knitr",
    "markdown": "# Cartogram {#sec-cartogram}\n\n## PKG\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)    # 数据处理和可视化工具包\nlibrary(sf)           # 空间数据处理包\nlibrary(RColorBrewer) # 颜色调色板包\nlibrary(cartogram)    # 创建地图扭曲效果\nlibrary(scales)       # 格式化图表标签\nlibrary(transformr)   # 使gganimate能够与sf对象协同工作\nlibrary(gganimate)    # 创建动画效果\n```\n:::\n\n\n## Hexbin\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载必要的R包\nlibrary(tidyverse)  # 数据处理和可视化工具包\nlibrary(sf)         # 空间数据处理包\nlibrary(RColorBrewer)  # 颜色调色板包\n\n# 加载geojson文件（注意：我将文件存储在名为DATA的文件夹中）\nmy_sf <- read_sf(\"./data/us_states_hexgrid.geojson\")\n\n# 对数据进行少量格式化处理\n# 使用新的管道操作符 |> 替换google_name字段中的\"(United States)\"字符串\nmy_sf <- my_sf |>\n  mutate(google_name = gsub(\" \\\\(United States\\\\)\", \"\", google_name))\n\n# 显示六边形网格的几何形状\n# 这将绘制美国各州的六边形网格边界\nplot(st_geometry(my_sf))\n```\n\n::: {.cell-output-display}\n![美国各州六边形网格地图](cartogram_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n基于人口数据的美国各州地图扭曲（Cartogram）:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载制图包\nlibrary(cartogram)  # 用于创建地图扭曲效果的包\n\n# 加载各州人口数据（数据源：https://www.census.gov/data/tables/2017/demo/popest/nation-total.html）\npop <- read.table(\n    \"https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/pop_US.csv\", \n    sep = \",\", \n    header = T\n    )\npop$pop <- pop$pop / 1000000  # 将人口数转换为百万单位\n\n# 合并地理数据和人口数据\n# 使用新的管道操作符 |> 将空间数据与人口数据按州名进行左连接\nmy_sf <- my_sf |> left_join(pop, by = c(\"google_name\" = \"state\"))\n\n# 基于人口信息计算地图扭曲效果\n# 首先需要更改投影，我们使用墨卡托投影（即谷歌地图使用的投影，EPSG 3857）\nmy_sf_merc <- st_transform(my_sf, 3857)\ncartogram <- cartogram_cont(my_sf_merc, \"pop\")  # 根据人口数据创建连续地图扭曲\n\n# 转换回原始投影坐标系\ncartogram <- st_transform(cartogram, st_crs(my_sf))\n\n# 初步查看扭曲后的地图效果\n# 人口较多的州会显得更大，人口较少的州会显得更小\nplot(st_geometry(cartogram))\n```\n\n::: {.cell-output-display}\n![基于人口数据的美国各州地图扭曲（Cartogram）](cartogram_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 使用ggplot2创建精美的地图扭曲可视化\nggplot(cartogram) +\n  # 添加空间几何图形，根据人口数量填充颜色\n  geom_sf(aes(fill = pop), linewidth = 0.05, alpha = 0.9, color = \"black\") +\n  # 设置渐变色填充方案\n  scale_fill_gradientn(\n    colours = brewer.pal(7, \"BuPu\"),  # 使用蓝紫色调色板\n    name = \"population (in M)\",       # 图例标题\n    labels = scales::label_comma(),   # 数字格式化（添加千位分隔符）\n    guide = guide_legend(\n      keyheight = unit(3, units = \"mm\"),    # 图例键高度\n      keywidth = unit(12, units = \"mm\"),    # 图例键宽度\n      title.position = \"top\",              # 图例标题位置\n      label.position = \"bottom\"            # 图例标签位置\n    )\n  ) +\n  # 添加州的缩写代码文本标签\n  geom_sf_text(aes(label = iso3166_2), color = \"white\", size = 3, alpha = 0.6) +\n  # 使用空白主题（去除坐标轴和网格线）\n  theme_void() +\n  # 添加图表标题\n  ggtitle(\"Another look on the US population\") +\n  # 自定义主题设置\n  theme(\n    legend.position = c(0.5, 0.9),     # 图例位置（水平居中，靠近顶部）\n    legend.direction = \"horizontal\",    # 图例水平排列\n    text = element_text(color = \"#22211d\"),  # 文本颜色\n    plot.background = element_rect(fill = \"#f5f5f9\", color = NA),    # 图表背景色\n    panel.background = element_rect(fill = \"#f5f5f9\", color = NA),   # 面板背景色\n    legend.background = element_rect(fill = \"#f5f5f9\", color = NA),  # 图例背景色\n    # 标题样式设置\n    plot.title = element_text(\n        size = 22, hjust = 0.5, color = \"#4e4d47\", \n        margin = margin(b = -0.1, t = 0.4, l = 2, unit = \"cm\")\n        ),\n  )\n```\n\n::: {.cell-output-display}\n![美国人口分布的地图扭曲可视化（带颜色填充和标签）](cartogram_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## `cartogram`\n\n基础 cartogram: 非洲地区地理边界图\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载空间数据处理库\nlibrary(sf)\n\n# 读取世界边界简化数据\nwrld_simpl <- read_sf(\"./data/map/TM_WORLD_BORDERS_SIMPL-0.3.shp\")\n\n# 筛选非洲地区数据 (REGION == 2)\nafr <- wrld_simpl[wrld_simpl$REGION == 2, ]\n\n# 使用plot函数可视化非洲地区边界\nplot(st_geometry(afr))\n```\n\n::: {.cell-output-display}\n![非洲地区地理边界图](cartogram_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n根据人口数据，构建变形地图\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载变形地图库\nlibrary(cartogram)\n\n# 使用2005年人口数据构建变形地图\n\n# 首先需要将投影转换为墨卡托投影 (谷歌地图投影): EPSG: 3857\nafr <- st_transform(afr, 3857)\n\n# 创建基于人口的连续变形地图\nafr_cartogram <- cartogram_cont(afr, \"POP2005\", itermax = 5)\n\n# 将投影转换回原始投影\nafr_cartogram <- st_transform(afr_cartogram, st_crs(afr))\n\n# 这是一个新的地理空间对象，我们可以可视化它！\nplot(st_geometry(afr_cartogram))\n```\n\n::: {.cell-output-display}\n![基于2005年人口数据的非洲变形地图](cartogram_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n使用 ggplot2 来添加一些颜色、标题、图例、背景等。现在我们有了非洲的漂亮制图分级统计地图！\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(afr_cartogram) +\n  geom_sf(aes(fill = POP2005), linewidth = 0, alpha = 0.9) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![基于2005年人口数据的非洲变形地图, 美化版](cartogram_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n2005年非洲人口分布精美变形地图: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 如前所述，通过一些自定义设置可以制作更精美的地图\np_afr <- ggplot(afr_cartogram) +\n  geom_sf(aes(fill = POP2005 / 1000000), linewidth = 0, alpha = 0.9) +  # 绘制变形地图，按人口数填充\n  theme_void() +                                                          # 使用空白主题\n  scale_fill_viridis_c(\n    name = \"Population (M)\",                                              # 图例标题\n    breaks = c(1, 50, 100, 140),                                         # 设置断点\n    guide = guide_legend(\n      keyheight = unit(3, units = \"mm\"),                                  # 图例高度\n      keywidth = unit(12, units = \"mm\"),                                  # 图例宽度\n      label.position = \"bottom\",                                          # 标签位置\n      title.position = \"top\", nrow = 1                                    # 标题位置和行数\n    )\n  ) +\n  labs(title = \"Africa 2005 Population\") +                               # 添加标题\n  theme(\n    text = element_text(color = \"#22211d\"),                               # 文本颜色\n    plot.background = element_rect(fill = \"#f5f5f4\", color = NA),        # 绘图背景\n    panel.background = element_rect(fill = \"#f5f5f4\", color = NA),       # 面板背景\n    legend.background = element_rect(fill = \"#f5f5f4\", color = NA),      # 图例背景\n    plot.title = element_text(\n      size = 22, hjust = 0.5,                                            # 标题大小和对齐\n      color = \"#4e4d47\",                                                  # 标题颜色\n      margin = margin(\n        b = -0.1, t = 0.4, l = 2,                                        # 标题边距\n        unit = \"cm\"\n      )\n    ),\n    legend.position = c(0.2, 0.26)                                       # 图例位置\n  )\n\np_afr\n```\n\n::: {.cell-output-display}\n![2005年非洲人口分布精美变形地图](cartogram_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## 动画\n\n加载必要的 R 包: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 加载必要的R包\nlibrary(dplyr)      # 数据处理和清洗\nlibrary(cartogram)  # 创建地图扭曲效果\nlibrary(ggplot2)    # 数据可视化\nlibrary(transformr) # 使gganimate能够与sf对象协同工作\nlibrary(gganimate)  # 创建动画效果\nlibrary(sf)         # 读取和处理空间数据文件\n```\n:::\n\n\n准备数据: \n\n\n\n\n## 计算多个中间地图\n\n前面已经构建了基于人口数据的非洲地图扭曲: \n\n目标是在两个地图之间制作平滑动画，我们需要使用插值创建大量中间地图。\n\n这可以通过在 cartogram_cont() 函数上使用 itermax 参数来实现。我们可以计算几个中间地图扭曲并将每个都视为一个帧。\n\n最后，我们得到了一个大数据框，其中包含足够绘制 30 个地图的信息。下面展示了其中三个地图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 创建状态的循环\nafr$id <- seq(1, nrow(afr))  # 为每个国家分配唯一ID\nafr$.frame <- 0              # 初始帧设为0\n\n# 将循环结果存储在此对象上\ndt1 <- afr            # 存储初始状态\nafr_cartogram <- afr  # 复制用于循环处理\n\n# 循环创建15个渐进的地图扭曲帧\nfor (i in 1:15) {\n  # 每次迭代进行一步地图扭曲\n  afr_cartogram <- cartogram_cont(afr_cartogram, \"POP2005\", itermax = 1)\n  afr_cartogram$.frame <- i  # 为当前帧分配编号\n  \n  # 将当前帧添加到数据集中\n  dt1 <- rbind(dt1, afr_cartogram)\n}\n\n# 现在按相反顺序排列以回到初始状态（创建循环动画效果）\ndt2 <- dt1 |>\n  arrange(desc(.frame), id) |>           # 按帧号降序排列\n  mutate(.frame = -1 * .frame + 31)      # 重新编号帧以创建反向序列\n\n# 合并正向和反向帧，并按帧号和ID排序\ndt <- bind_rows(dt1, dt2) |> arrange(.frame, id)\n```\n:::\n\n\n\n\n::: {.cell layout-ncol=\"3\"}\n\n```{.r .cell-code}\n# 检查几个帧\n# 帧0：初始状态（原始地图）\nggplot() +\n  geom_sf(data = dt |> filter(.frame == 0), aes(fill = POP2005), linewidth = 0)\n\n\n# 帧5：中间扭曲状态\nggplot() +\n  geom_sf(\n    data = dt |> filter(.frame == 5), aes(fill = POP2005),\n    linewidth = 0\n  )\n\n# 帧15：最大扭曲状态\nggplot() +\n  geom_sf(\n    data = dt |> filter(.frame == 15), aes(fill = POP2005),\n    linewidth = 0\n  )\n```\n\n::: {.cell-output-display}\n![初始状态](cartogram_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![中间扭曲状态](cartogram_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![最大扭曲状态](cartogram_files/figure-html/unnamed-chunk-11-3.png){width=672}\n:::\n\n检查动画的几个关键帧\n:::\n\n\n## 使用 gganimate 制作动画\n\n最后一步包括构建 30 个地图并将它们编译成 .gif 文件。这是使用 gganimate 库完成的。该库使用另一个函数 transition_states() 和 ease_aes()。为每个帧制作新图，这使我们能够随后构建 gif。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 由于gganimate的一个错误，移除CRS（坐标参考系统）\ndt <- st_set_crs(dt, NA)\n\n# 创建动画图表对象\np <- ggplot(dt) +\n  # 添加空间几何图形，设置分组以确保动画正确跟踪每个国家\n  geom_sf(aes(fill = POP2005 / 1000000, group = id), linewidth = 0, alpha = 0.9) +\n  theme_void() +\n  # 设置颜色填充方案\n  scale_fill_viridis_c(\n    name = \"Population (M)\",\n    breaks = c(1, 50, 100, 140),\n    guide = guide_legend(\n      keyheight = unit(3, units = \"mm\"),\n      keywidth = unit(12, units = \"mm\"),\n      label.position = \"bottom\",\n      title.position = \"top\", nrow = 1\n    )\n  ) +\n  # 添加标题\n  labs(title = \"Africa\", subtitle = \"Population per country in 2005\") +\n  # 设置主题样式\n  theme(\n    text = element_text(color = \"#22211d\"),\n    plot.background = element_rect(fill = \"#f5f5f4\", color = NA),\n    panel.background = element_rect(fill = \"#f5f5f4\", color = NA),\n    legend.background = element_rect(fill = \"#f5f5f4\", color = NA),\n    plot.title = element_text(\n      size = 22, hjust = 0.5, color = \"#4e4d47\",\n      margin = margin(\n        b = -0.1, t = 0.4, l = 2,\n        unit = \"cm\"\n      )\n    ),\n    plot.subtitle = element_text(\n      size = 13, hjust = 0.5, color = \"#4e4d47\",\n      margin = margin(\n        b = -0.1, t = 0.4, l = 2,\n        unit = \"cm\"\n      )\n    ),\n    legend.position = c(0.2, 0.26)\n  ) +\n  # 来自gganimate的函数\n  transition_states(.frame) +      # 基于.frame列创建状态转换\n  ease_aes(\"cubic-in-out\")        # 设置缓动效果，使动画更平滑\n\n# 制作动画（持续5秒）\nanimate(p, duration = 5)\n```\n\n::: {.cell-output-display}\n![创建最终的动画GIF文件](cartogram_files/figure-html/unnamed-chunk-12-1.gif)\n:::\n:::\n\n\n\n## Pearl\n\n[![dorling-cartogram](./image/dorling-cartogram.png)](https://r-graph-gallery.com/web-dorling-cartogram-with-R.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}