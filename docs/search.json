[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "数据可视化探索(从入门到放弃)",
    "section": "",
    "text": "Preface\n数据可视化,对王师傅来说是很复杂的东西\n所以王师傅特地写了这个笔记,来记录学习过程和心得体会。\n看似简单,其实一点也不难.\n遗憾的是,由于王师傅打字不认真,书中的中文标点符号几乎都是错误的.\n\n\nShow/Hide Code\n# 彩蛋 右上角的封面是这段代码画的位图\nlibrary(ggplot2)\ndf &lt;- read.csv('https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/img_df2.csv')\nggplot(df, aes(x = x, y = y, color = color)) +\n  geom_point() +\n  scale_colour_identity() + #控制颜色映射\n  theme_void() #删除坐标轴\n\n\n王师傅强烈推荐 r graph gallery 的数据可视化思路:\n这本书是由quarto生成的,可以在quarto.org上了解更多.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "quick_start.html",
    "href": "quick_start.html",
    "title": "0 Quick start",
    "section": "",
    "text": "PKG\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(ggridges) # 山脊图\nlibrary(patchwork) # 图形拼接",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "quick_start.html#基本概念",
    "href": "quick_start.html#基本概念",
    "title": "0 Quick start",
    "section": "基本概念",
    "text": "基本概念\n现在有下面这张表格，记录了钻石相关的一些信息：\n\n\nShow/Hide Code\ndiamonds &lt;- diamonds |&gt; filter(carat &lt; 3)\nknitr::kable(head(diamonds))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0.23\nIdeal\nE\nSI2\n61.5\n55\n326\n3.95\n3.98\n2.43\n\n\n0.21\nPremium\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n\n\n0.23\nGood\nE\nVS1\n56.9\n65\n327\n4.05\n4.07\n2.31\n\n\n0.29\nPremium\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n\n\n0.31\nGood\nJ\nSI2\n63.3\n58\n335\n4.34\n4.35\n2.75\n\n\n0.24\nVery Good\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n\n\n\n\n\n其中:\n\n变量（Variable）：列, carat、cut、color、clarity、depth、table、price、x、y、z\n\n连续变量（Continuous Variable）：carat、depth、table、price、x、y、z\n离散变量（Discrete Variable）：cut、color、clarity\n分类变量（Categorical Variable）：cut、color、clarity\n\n观测（Observation）：行, 每个钻石的记录\n值（Value）：单元格, 如某个钻石的carat为1.5\n数据框（Data Frame）：整个表格\n\n\n这是数据分析的整体流程: \n\n\n\n\n\n\n思考题\n\n\n\nwhich part of the data analysis process is the most interesting? Which part is the most boring?",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "quick_start.html#单变量univariate-variable",
    "href": "quick_start.html#单变量univariate-variable",
    "title": "0 Quick start",
    "section": "单变量(Univariate Variable)",
    "text": "单变量(Univariate Variable)\n\n分类变量(Categorical Variable)\n对于分类变量，我们主要展示其比例构成。\n\n饼图(Pie)\n不得不说，饼图是最常见的单个分类变量可视化方式，那么直接，又那么简单。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 1, fill = cut)) + \n  geom_bar(color = \"white\") + \n  coord_polar(theta = \"y\") + \n  scale_fill_brewer(palette = \"set2\") + # 设置配色方案\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n甜甜圈图(Donut)\n甜甜圈图是饼图的变种，去掉了中间的空心部分，形成一个甜甜圈形状。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 2, fill = cut)) + \n  geom_bar(color = \"white\") +           # 绘制每个cut的条形，白色边框\n  xlim(0.5, 2.5) +                      # 设置x轴范围，决定中间空白洞的大小\n  coord_polar(theta = \"y\") +            # 使用极坐标，将条形图转换为圆环（甜甜圈）\n  scale_fill_brewer(palette = \"set2\") + # 设置配色方案\n  theme_void()                          # 移除所有背景和坐标轴，突出图形主体\n\n\n\n\n\n甜甜圈图\n\n\n\n\n\n\n堆叠条形图(Barstack)\n堆叠条形图是另一种常见的单个分类变量可视化方式(我不喜欢,我觉得它不直观)\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 1, fill = cut)) + \n  geom_bar(color = \"white\") + \n  scale_fill_brewer(palette = \"set2\") + # 设置配色方案\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n连续性变量（Continuous Variable）\n对于连续变量, 我们主要关注其变化、分布、趋势、典型值、异常值\n\n直方图(Histogram)\n下图是 53900 个钻石的克拉数分布，X轴是克拉数，Y轴是频数。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.5) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhat do you notice from the histogram?\n\n\n让我们改变一下 binwidth 的大小，看看会有什么不同。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.1) \n\n\n\n\n\n\n\n\n\n好像有些不一样了，继续改变 binwidth 的大小：\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.01) \n\n\n\n\n\n\n\n\n\nAmazing!\n\n\n\n\n\n\n思考题\n\n\n\nWhy are there more diamonds at whole carats and common fractions of carats?\nWhy are there more diamonds slightly to the right of each peak than there are slightly to the left of each peak?\n\n\n\n\n密度曲线图(Density)\n密度曲线图可以帮助我们更好地理解数据的分布情况。下图是钻石克拉数的密度曲线图，X轴是克拉数，Y轴是分布密度\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhat is the density?\nWhat is the relationship between the density curve and the histogram above?\n\n\n\n\n箱线图(Boxplot)\n箱线图是用来展示数据分布的图形，主要用于显示数据的中位数、四分位数、异常值等信息。 \n\n\n\n\n\n\n思考题\n\n\n\nHow to interpret this boxplot?\n\n\n\n\n小提琴图(Violin)\n箱线图很好,但仅展示了四分位数等,而小提琴图则显示了数据的分布密度,可以更好地展示数据的分布情况。\n\n\nShow/Hide Code\nggplot(diamonds |&gt; filter(cut == \"Fair\"), aes(x = cut, y = carat)) +\n  geom_violin() \n\n\n\n\n\n\n\n\n\n小提琴图显示分布密度\n\n\n\n\n\n\n思考题\n\n\n\nwhat is the difference in the three plots(boxplot, density plot, histogram)?\n\n\n下图很地解释了直方图、密度曲线图和箱线图这三者之前的关系\n\n\nShow/Hide Code\n## Left\np_left &lt;- ggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.1)\n\n## Middle\np_middle &lt;- ggplot(diamonds, aes(x = carat)) +\n  geom_density()\n\n## Right\np_right &lt;- ggplot(diamonds, aes(x = carat)) +\n  geom_boxplot()\n\np_left + p_middle + p_right\n\n\n\n\n\n\n\n\n\n\n\n小提琴图(Violin) + 箱线图(Boxplot)\n还有一种把小提琴图和箱线图结合的方式，近年来在科研界比较流行。\n\n\nShow/Hide Code\nggplot(diamonds |&gt; filter(cut == \"Fair\"), aes(x = cut, y = carat)) +\n  geom_violin() +\n  geom_boxplot(width = 0.1, fill = \"white\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nHow to interpret this plot?",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "quick_start.html#双变量bivariate-variable",
    "href": "quick_start.html#双变量bivariate-variable",
    "title": "0 Quick start",
    "section": "双变量(Bivariate Variable)",
    "text": "双变量(Bivariate Variable)\n\n分类-数值变量(A categorical and a numerical variable)\n\n折线图(Line)\n下面是不同切割质量的钻石的价格情况的折线图\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, color = cut)) + \n  geom_freqpoly(binwidth = 500, linewidth = 0.75)\n\n\n\n\n\n\n\n\n\n不好看!\n\n\n\n\n\n\n思考题\n\n\n\nWhy is this plot ugly?\n\n\n\n\n密度曲线图(Density)\n当各组数据差得较多时,纵轴用count不太合适,会造成摩天大厦+小平层,不如把纵轴改为density:\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, y = after_stat(density), color = cut)) + \n  geom_freqpoly(binwidth = 500, linewidth = 0.75)\n\n\n\n\n\n\n\n\n\n好多了吧 ●‘◡’● (好吧,还是有点丑)\n分面(facet)会好一点吗?\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, fill = cut)) + \n  geom_density() + \n  facet_wrap(~ cut, nrow = 1) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n山脊图(Ridge)\n近年来还流行一种“山脊图(Ridge)”，它可以更好地展示多个分布的重叠情况。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) + \n  geom_density_ridges(alpha = 0.5) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n并排箱线图(Boxplot)\n箱线图也是一种直观的可视化方式\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = cut, y = price)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n或许还可以上点颜色, 让它显得花里胡哨:\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = cut, y = price, fill = cut)) +\n  geom_boxplot(outlier.shape = NA) +\n  theme(legend.position = \"none\") + \n  coord_cartesian(ylim = c(0, 15000))\n\n\n\n\n\n\n\n\n\n等等,这不对吧,cut越好的钻石价格应该越高才对啊!!!怎么回事呀喂?\n\n\n\n\n\n\n思考题\n\n\n\nWhy does the boxplot show that the price of diamonds with “Fair” cut is higher than those with “Ideal” cut?\n\n\n\n\n折线图(Line)\n还有一种策略,是算出数值的平均数(或其他特征),然后绘制折线图:\n\n\nShow/Hide Code\ndiamonds |&gt;\n  group_by(cut) |&gt;\n  summarise(price = mean(price)) |&gt;\n  ggplot(aes(x = cut, y = price, color = cut)) +\n  geom_point() +\n  geom_line(group = 1) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n两个分类变量(Two categorical variables)\n虽然听起来有点离谱,但有时候确实需要可视化两个分类变量之间的关系.\n\n点图(Dot)\n下图是一个点图，展示了钻石的切割质量和颜色之间的关系。点的大小表示组合的数量\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = cut, y = color)) +\n  geom_count()\n\n\n\n\n\n\n\n\n\n好看吗? 好像还行。\n\n\n色块图(Tile)\n让我们再来换一种表达形式——色块图,色块的颜色表示组合的数量.\n\n\nShow/Hide Code\ndiamonds |&gt; \n  count(color, cut) |&gt;  \n  ggplot(aes(x = color, y = cut)) +\n  geom_tile(aes(fill = n)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhich one do you prefer, the dot plot or the tile plot? Why?\n\n\n\n\n堆叠条形图(Barstack)\n又到了我不喜欢的堆叠条形图了.\n下面两个图是钻石的颜色和切割质量的堆叠条形图，分别展示了每种颜色的钻石在不同切割质量下的数量分布。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = color, fill = cut)) +\n  geom_bar() + \n  scale_fill_brewer(palette = \"set2\") # 设置配色方案\n\n\n\n\n\n\n\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = color, fill = cut)) +\n  geom_bar(position = \"fill\") +\n  scale_fill_brewer(palette = \"set2\") # 设置配色方案\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhat is the difference between the two stacked bar charts?\n\n\n\n\n分面面包圈图(Facet Donut)\n其实就是多个面包圈图组合在一起,用ppt也能做.\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 1, fill = color)) +\n  geom_bar(color = \"white\") + \n  xlim(-0.5, 1.5) + \n  coord_polar(theta = \"y\") + \n  theme_void() + \n  facet_wrap(~ cut, scales=\"free_y\", nrow = 2) + \n  scale_fill_brewer(palette = \"set2\") # 设置配色方案\n\n\n\n\n\n\n\n\n\n\n\n\n两个数值变量(Two numerical variables)\n\n散点图(Scatter)\n下图是钻石的克拉数和价格之间的散点图，X轴是克拉数，Y轴是价格。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n黑色一大片,简直丑死了!\n来调整一下点的透明度吧\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point(alpha = 0.02) \n\n\n\n\n\n\n\n\n\n稍微好一点,但是还有一些更好的策略.\n\n\n分格散点图(bin)\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_bin2d()\n\n\n\n\n\n\n\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_hex()\n\n\n\n\n\n\n\n\n\n\n\n排序箱线图(Order Boxplot)\n把其中一个变量分成若干个区间,然后在每个区间内绘制箱线图,可以更好地展示数据的分布情况.\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) + \n  geom_boxplot(aes(group = cut_width(carat, 0.1)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhen do you think a Order Boxplot Plot is useful?\n\n\n\n\n散点图(Scatter) + 线性回归(Linear Regression)\n换一个数据较少的例子,这是一个散点图，展示了汽车的发动机排量和高速公路油耗之间的关系。红色的点表示2座跑车。\n\n\nShow/Hide Code\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_point(\n    data = mpg |&gt; filter(class == \"2seater\"),\n    color = \"red\"\n  ) +\n  geom_point(\n    data = mpg |&gt; filter(class == \"2seater\"),\n    shape = \"circle open\", size = 3, color = \"red\"\n  )\n\n\n\n\n\n\n\n\n\n我们还可以在散点图上添加线性回归线,来展示两者之间的关系.\n\n\nShow/Hide Code\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhat is the curve? What is the shadow around it?",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "quick_start.html#三变量",
    "href": "quick_start.html#三变量",
    "title": "0 Quick start",
    "section": "三变量",
    "text": "三变量\nThe author will update this section if he remembers it…",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "distribution.html",
    "href": "distribution.html",
    "title": "Distribution",
    "section": "",
    "text": "此部分探数据分布的可视化.\n\n\n\n数据分布\n\n\n\n1  Beeswarm 群峰图, 是一种强大的点图\n2  Histogram 直方图, 用于显示数据的基础手段\n3  Boxplot 箱线图, 用于显示数据的四分位数和异常值\n4  Density 核密度图, 密度曲线,可以比较多组\n5  Ridgeline 山脊图, 美观, 用于显示多个分布的叠加情况\n6  Violin 小提琴图, 箱线图和密度曲线的变体",
    "crumbs": [
      "Distribution"
    ]
  },
  {
    "objectID": "beeswarm.html",
    "href": "beeswarm.html",
    "title": "1  Beeswarm",
    "section": "",
    "text": "1.1 PKG\n群蜂图,像蜂群一样展示数据,使用R包beeswarm 和 ggbeeswarm 包实现。\nShow/Hide Code\nlibrary(beeswarm) # beeswarm包,绘制群峰图\nlibrary(ggplot2)\nlibrary(ggbeeswarm) # ggbeeswarm包,基于ggplot2的群峰图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Beeswarm</span>"
    ]
  },
  {
    "objectID": "beeswarm.html#iris",
    "href": "beeswarm.html#iris",
    "title": "1  Beeswarm",
    "section": "1.2 iris",
    "text": "1.2 iris\niris数据集，又称为“安德森鸢尾花卉数据集”（Anderson’s Iris data set），是 R 语言内置的一个“玩具”数据集，也是统计学、数据科学和机器学习领域中使用最频繁、最著名的示例数据集之一。\n它包含了150个鸢尾花样本的测量数据，这150个样本分别来自三个不同的鸢尾花品种：山鸢尾 (Setosa)、变色鸢尾 (Versicolor) 和 维吉尼亚鸢尾 (Virginica)，每个品种各50个样本。\n\n\nShow/Hide Code\ndata(iris) # 载入内置数据集\nknitr::kable(head(iris))\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n群峰图使用的数据集iris\n\n\niris数据集共有5个变量:\n\nSepal.Length: 花萼长度，单位是厘米。\nSepal.Width: 花萼宽度，单位是厘米。\nPetal.Length: 花瓣长度，单位是厘米。\nPetal.Width: 花瓣宽度，单位是厘米。\nSpecies: 物种/品种，一个因子变量，包含三个水平（levels）：setosa, versicolor, 和 virginica。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Beeswarm</span>"
    ]
  },
  {
    "objectID": "beeswarm.html#beeswarm",
    "href": "beeswarm.html#beeswarm",
    "title": "1  Beeswarm",
    "section": "1.3 beeswarm",
    "text": "1.3 beeswarm\n\n1.3.1 基础\n\n\nShow/Hide Code\nbeeswarm(iris$Sepal.Length)\n\n\n\n\n\n最简单的群峰图\n\n\n\n\n\n\n1.3.2 翻转坐标轴\n\n\nShow/Hide Code\nbeeswarm(iris$Sepal.Length, horizontal=TRUE)\n\n\n\n\n\n翻转坐标轴的群峰图\n\n\n\n\n\n\n1.3.3 自定义\n\n\nShow/Hide Code\nbeeswarm(\n  iris$Sepal.Length,\n  pch=16, # 点的形状\n  col='blue', # 点的颜色\n  cex=1.5, # 点的大小\n)\n\n\n\n\n\n自定义的群峰图\n\n\n\n\n\n\n1.3.4 分组\n\n\nShow/Hide Code\nbeeswarm(\n  Sepal.Length ~ Species, \n  data=iris,\n  col=c(\"orange\", \"lightblue\", \"magenta\"),\n  pch = 19, # fill the dots\n#   corral = \"gutter\" # 使用“gutter”方法来处理重叠,边缘裁切\n)\n\n\n\n\n\n分组的群峰图\n\n\n\n\n更多可以更改的参数见beeswarm包文档。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Beeswarm</span>"
    ]
  },
  {
    "objectID": "beeswarm.html#ggbeeswarm",
    "href": "beeswarm.html#ggbeeswarm",
    "title": "1  Beeswarm",
    "section": "1.4 ggbeeswarm",
    "text": "1.4 ggbeeswarm\nggbeeswarm包是ggplot2的扩展包，有两个核心函数:\n\ngeom_beeswarm()函数创建群峰图。\ngeom_quasirandom()函数创建准随机分布图,这是一种介于蜂群图和抖动图之间的混合图。\n\n\n1.4.1 基础\n\n\nShow/Hide Code\nggplot(iris,aes(y=Sepal.Length,x='')) +\n  geom_beeswarm()\n\n\n\n\n\n最基本的geom_beeswarm\n\n\n\n\n\n\n1.4.2 翻转坐标轴\n\n\nShow/Hide Code\nggplot(iris,aes(x=Sepal.Length,y='')) +\n  geom_beeswarm()\n\n\n\n\n\n翻转坐标轴的geom_beeswarm\n\n\n\n\n\n\n1.4.3 自定义颜色\n\n\nShow/Hide Code\nggplot(iris,aes(y=Sepal.Length,x='')) +\n  geom_beeswarm(color='blue') +\n  theme_minimal()\n\n\n\n\n\n自定义颜色的geom_beeswarm\n\n\n\n\n还有更多可以通过“method”参数来控制的群峰图方法,例如\"center\"、\"square\"、\"hexagon\"等。 见ggbeeswarm包文档。\n\n\n1.4.4 分组\n\n\nShow/Hide Code\nggplot(iris,aes(x=Species, y=Sepal.Length, colour=Species)) +\n  geom_beeswarm() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n分组的geom_beeswarm\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris,aes(x=Species, y=Sepal.Length, colour=Species)) +\n  geom_beeswarm() +\n  scale_color_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\")) +\n  theme_minimal() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n自定义主题的分组geom_beeswarm",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Beeswarm</span>"
    ]
  },
  {
    "objectID": "histogram.html",
    "href": "histogram.html",
    "title": "2  Histogram",
    "section": "",
    "text": "2.1 PKG\n非常简单的数据可视化形式,可以用base R::hist()或ggplot2::geom_histogram()来实现。\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(hrbrthemes) # 主题包\nlibrary(patchwork) # 图形拼接",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Histogram</span>"
    ]
  },
  {
    "objectID": "histogram.html#ggplot2",
    "href": "histogram.html#ggplot2",
    "title": "2  Histogram",
    "section": "2.2 ggplot2",
    "text": "2.2 ggplot2\n\n2.2.1 基本\n\n\nShow/Hide Code\ndata = data.frame(value = rnorm(1000))\n\nggplot(data, aes(x = value)) +\n  geom_histogram()\n\n\n\n\n\n最基本的geom_histogram\n\n\n\n\n\n\nShow/Hide Code\nggplot(data, aes(x=value)) + \n  geom_histogram(binwidth=0.1, fill=\"#69b3a2\", color=\"#e9ecef\", alpha=0.9) +\n  theme_ipsum()\n\n\n\n\n\n定制的geom_histogram\n\n\n\n\n\n\n2.2.2 分组/镜像\n还有用于比较两个变量分布(从0开始)的镜像直方图。\n直方图的默认y = -..count..，因此可以通过设置y = -..count..来实现镜像效果。\n\n\nShow/Hide Code\ndata &lt;- data.frame(\n  var1 = rnorm(100),\n  var2 = rnorm(100, mean = 2)\n)\n\nggplot(data, aes(x = x)) +\n  # 上方图\n  geom_histogram(aes(x = var1, y = ..count..), fill = \"#69b3a2\") +\n  geom_label(aes(x = 4.5, y = 6, label = \"variable1\"), color = \"#69b3a2\") +\n  # 下方图,主要是通过y = -..count..来实现镜像\n  geom_histogram(aes(x = var2, y = -..count..), fill = \"#404080\") +\n  geom_label(aes(x = 4.5, y = -4, label = \"variable2\"), color = \"#404080\") \n\n\n\n\n\n通过y = -..count.. 来绘制镜像直方图\n\n\n\n\n密度曲线图默认y = ..density..，因此可以通过设置y = -..density..来实现镜像效果。\n下图,左侧是直方图(y改为密度),右侧是密度曲线图。\n\n\nShow/Hide Code\np1 &lt;- ggplot(data, aes(x = x)) +\n  # 上方图\n  geom_histogram(aes(x = var1, y = ..density..), fill = \"#69b3a2\") +\n  geom_label(aes(x = 3.5, y = 0.2, label = \"variable1\"), color = \"#69b3a2\") +\n  # 下方图\n  geom_histogram(aes(x = var2, y = -..density..), fill = \"#404080\") +\n  geom_label(aes(x = 3.5, y = -0.2, label = \"variable2\"), color = \"#404080\") \n\np2 &lt;- ggplot(data, aes(x = x)) +\n  # 上方图\n  geom_density(aes(x = var1, y = ..density..), fill = \"#69b3a2\") +\n  geom_label(aes(x = 3.5, y = 0.2, label = \"variable1\"), color = \"#69b3a2\") +\n  # 下方图\n  geom_density(aes(x = var2, y = -..density..), fill = \"#404080\") +\n  geom_label(aes(x = 3.5, y = -0.2, label = \"variable2\"), color = \"#404080\")\n\np1 + p2\n\n\n\n\n\n通过y = -..count.. 来绘制镜像直方图\n\n\n\n\n\n\nShow/Hide Code\ndata &lt;- data.frame(\n  type = c(rep(\"variable 1\", 1000), rep(\"variable 2\", 1000)),\n  value = c(rnorm(1000), rnorm(1000, mean = 4))\n)\n\nggplot(data, aes(x = value, fill = type)) +\n  geom_histogram(color = \"#e9ecef\", alpha = 0.6, position = 'identity') +\n  scale_fill_manual(values = c(\"#69b3a2\", \"#404080\")) # 使用自定义颜色\n\n\n\n\n\n通过fill来绘制双色直方图\n\n\n\n\n\n\n2.2.3 分面\n\n\nShow/Hide Code\nggplot(iris, aes(x = `Sepal.Length`, fill = `Sepal.Length`)) + \n  geom_histogram() + \n  facet_wrap(~ Species, scale = \"free_x\")\n\n\n\n\n\nfacet_wrap分面,scale来控制自由坐标轴\n\n\n\n\n\n\n2.2.4 边缘图\n见 Section 3.4.9。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Histogram</span>"
    ]
  },
  {
    "objectID": "histogram.html#base-r",
    "href": "histogram.html#base-r",
    "title": "2  Histogram",
    "section": "2.3 base R",
    "text": "2.3 base R\n查看 r-graph-gallery的例子。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Histogram</span>"
    ]
  },
  {
    "objectID": "boxplot.html",
    "href": "boxplot.html",
    "title": "3  Boxplot",
    "section": "",
    "text": "3.1 PKG\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(hrbrthemes) # hrbrthemes 提供了更适合排版的主题\nlibrary(viridis) # viridis 提供了好看的色盲友好型颜色\nlibrary(ggdist) # ggdist 提供了半小提琴图和云雨图\nlibrary(patchwork) # patchwork 用于图形拼接\nlibrary(ggExtra) # ggExtra 用于 ggplot2 散点图的边际图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#sec-boxplot-trap",
    "href": "boxplot.html#sec-boxplot-trap",
    "title": "3  Boxplot",
    "section": "3.2 箱线图陷阱",
    "text": "3.2 箱线图陷阱\n箱线图又叫盒须图，展示数据的中位数(median)、上下四分位数(Quartiles)、四分位距(IQR)、须线(Whiskers)和异常值(outlier)。\n这是说明箱线图构成的示意图：  \n但是，r-graph-gallery 这个图的上下须比例不太对，我用 Base R 重新画了一个：\n\n\nShow/Hide Code\n# --- 1. 参数设置 ---\n# par(bg = \"#eff8fc\") # 背景\n\n# 创建一个空白的绘图区域\nplot(\n    NA,\n    xlim = c(-45, 145),\n    ylim = c(2, 8),\n    axes = FALSE,\n    xlab = \"\",\n    ylab = \"\"\n)\n\n# --- 2. 定义箱形图的统计值和位置 ---\ny_center &lt;- 5 # 图形在Y轴上的中心位置\nbox_height &lt;- 2 # 箱体的高度\ntext_color &lt;- \"#000000\" # 文本和箭头的颜色\n\n# 定义关键的统计数值\nq1 &lt;- 35 # 第1四分位数 (Q1)\nmedian_val &lt;- 50 # 中位数 (Q2)\nq3 &lt;- 65 # 第3四分位数 (Q3)\niqr &lt;- q3 - q1 # 四分位距 (IQR)\n\n# 根据IQR定义须的末端位置（内限）\nwhisker_low &lt;- q1 - 1.5 * iqr\nwhisker_high &lt;- q3 + 1.5 * iqr\n\n# 定义一些离群点 (outliers)\noutliers_low &lt;- whisker_low - c(8, 12, 15)\noutliers_high &lt;- whisker_high + c(8, 12, 15)\n\n# --- 3. 绘制图形元素 ---\n# 绘制箱体 (Box)\nrect(\n    q1,\n    y_center - box_height / 2,\n    q3,\n    y_center + box_height / 2,\n    border = \"red\",\n    lwd = 3\n)\n\n# 绘制中位数线\nsegments(\n    median_val,\n    y_center - box_height / 2,\n    median_val,\n    y_center + box_height / 2,\n    col = \"red\",\n    lwd = 3\n)\n\n# 绘制上下须 (Whiskers)\nsegments(whisker_low, y_center, q1, y_center, col = \"red\", lwd = 3)\nsegments(q3, y_center, whisker_high, y_center, col = \"red\", lwd = 3)\n\n# 绘制离群点\npoints(c(outliers_low, outliers_high), rep(y_center, 6), pch = 19, col = \"red\")\n\n# --- 4. 添加注解和箭头 ---\n# 中位数 (Median)\narrows(\n    x0 = median_val,\n    y0 = y_center + 2,\n    x1 = median_val,\n    y1 = y_center + box_height / 2 + 0.1,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    x = median_val,\n    y = y_center + 2.5,\n    labels = \"Median\\n(Q2)\",\n    col = text_color\n)\n\n# Q1\narrows(\n    x0 = q1 - 10,\n    y0 = y_center + 2,\n    x1 = q1,\n    y1 = y_center + box_height / 2 + 0.1,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    x = q1 - 10,\n    y = y_center + 2.5,\n    labels = \"25th Percentile \\n (Q1)\",\n    col = text_color\n)\n\n# Q3\narrows(\n    x0 = q3 + 10,\n    y0 = y_center + 2,\n    x1 = q3,\n    y1 = y_center + box_height / 2 + 0.1,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    x = q3 + 10,\n    y = y_center + 2.5,\n    labels = \"75th Percentile \\n (Q3)\",\n    col = text_color\n)\n\n# 四分位距 (IQR)\nsegments(\n    x0 = q1,\n    y0 = y_center - 1.5,\n    x1 = q3,\n    y1 = y_center - 1.5,\n    col = \"red\",\n    lwd = 1.5\n)\ntext(\n    x = (q1 + q3) / 2,\n    y = y_center - 2,\n    labels = \"Interquartile Range\\n(IQR)\",\n    col = text_color\n)\n\n# 左侧离群点\narrows(\n    x0 = mean(outliers_low) + 1,\n    y0 = y_center - 1,\n    x1 = outliers_low[2],\n    y1 = y_center - 0.15,\n    col = text_color,\n    length = 0.1\n)\narrows(\n    x0 = mean(outliers_low) + 1,\n    y0 = y_center - 1,\n    x1 = outliers_low[1],\n    y1 = y_center - 0.15,\n    col = text_color,\n    length = 0.1\n)\narrows(\n    x0 = mean(outliers_low) + 1,\n    y0 = y_center - 1,\n    x1 = outliers_low[3],\n    y1 = y_center - 0.15,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    mean(outliers_low) + 1,\n    y_center - 1.3,\n    \"Potential\\nOutliers\",\n    col = text_color\n)\n\n# 右侧离群点\narrows(\n    x0 = mean(outliers_high) - 1,\n    y0 = y_center - 1,\n    x1 = outliers_high[2],\n    y1 = y_center - 0.15,\n    col = text_color,\n    length = 0.1\n)\narrows(\n    x0 = mean(outliers_high) - 1,\n    y0 = y_center - 1,\n    x1 = outliers_high[1],\n    y1 = y_center - 0.15,\n    col = text_color,\n    length = 0.1\n)\narrows(\n    x0 = mean(outliers_high) - 1,\n    y0 = y_center - 1,\n    x1 = outliers_high[3],\n    y1 = y_center - 0.15,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    mean(outliers_high) - 1,\n    y_center - 1.3,\n    \"Potential\\nOutliers\",\n    col = text_color\n)\n\n# 最小值标签 (Whisker end)\narrows(\n    x0 = whisker_low,\n    y0 = y_center - 2,\n    x1 = whisker_low,\n    y1 = y_center - 0.15,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    x = whisker_low,\n    y = y_center - 2.5,\n    labels = \"Minimum \\n (Minimum Value in the Data, Q1 – 1.5*IQR)\",\n    col = text_color\n)\n\n# 最大值标签 (Whisker end)\narrows(\n    x0 = whisker_high,\n    y0 = y_center - 2,\n    x1 = whisker_high,\n    y1 = y_center - 0.15,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    whisker_high,\n    y_center - 2.5,\n    \"Maximum \\n (Maximum Value in the Data, Q3 + 1.5*IQR)\",\n    col = text_color\n)\n\n# 数据中的真实最小值\narrows(\n    x0 = min(outliers_low),\n    y0 = y_center + 2,\n    x1 = min(outliers_low),\n    y1 = y_center + 0.15,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    x = min(outliers_low),\n    y = y_center + 2.5,\n    labels = \"Minimum Value \\n in the Data\",\n    col = text_color\n)\n\n# 数据中的真实最大值\narrows(\n    x0 = max(outliers_high),\n    y0 = y_center + 2,\n    x1 = max(outliers_high),\n    y1 = y_center,\n    col = text_color,\n    length = 0.1\n)\ntext(\n    x = max(outliers_high),\n    y = y_center + 2.5,\n    labels = \"Maximum Value \\n in the Data\",\n    col = text_color\n)\n\n\n\n\n\n箱线图的构成 (由 Base R 绘制)\n\n\n\n\n但是，这种信息的总结也有个大问题——无法显示数据的分布情况。例如：正态分布可能看起来与双峰分布完全相同。因此，考虑用小提琴图或脊线图。\n\n\nShow/Hide Code\n# 创建数据集\ndata1 &lt;- data.frame(\n    name = c(\n        rep(\"A\", 500),\n        rep(\"B\", 250),\n        rep(\"B\", 250),\n        rep(\"C\", 20),\n        rep(\"D\", 100)\n    ),\n    value = c(\n        rnorm(500, 10, 5),\n        rnorm(250, 13, 1),\n        rnorm(250, 18, 1),\n        rnorm(20, 25, 4),\n        rnorm(100, 12, 1)\n    )\n)\n\ndata1 |&gt;\n    ggplot(aes(x = name, y = value, fill = name)) +\n    geom_boxplot() +\n    scale_fill_viridis(discrete = TRUE) + # 好看的色盲友好型颜色,离散变量\n    theme_ipsum() +\n    theme(legend.position = \"none\") +\n    labs(x = \"\") +\n    ggtitle(\"A somewhat misleading boxplot\")",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#改进",
    "href": "boxplot.html#改进",
    "title": "3  Boxplot",
    "section": "3.3 改进",
    "text": "3.3 改进\n\n3.3.1 添加抖动(Jitter)\n适合数据量不太大的情况\n\n\nShow/Hide Code\ndata1 |&gt;\n    ggplot(aes(x = name, y = value, fill = name)) +\n    geom_boxplot() +\n    scale_fill_viridis(discrete = TRUE) + # 好看的色盲友好型颜色,离散变量\n    geom_jitter(color = \"grey\", size = 0.5, alpha = 0.5) +\n    theme_ipsum() +\n    theme(legend.position = \"none\") +\n    labs(x = \"\") +\n    ggtitle(\"A boxplot with jitter\")\n\n\n\n\n\n添加抖动(jitter)的箱线图\n\n\n\n\n发现:\n\n组 C 样本量小。在得出组 C 的值高于其他组的结论之前，要考虑样本量.\n组 B 呈现出双峰分布(y = 18 和 y = 13),但是箱线图中看起来和组 A 并无区别.\n\n\n\n3.3.2 小提琴图(Violin)\n\n\nShow/Hide Code\n# 显示样本量\nsample_size &lt;- data1 |&gt;\n    group_by(name) |&gt;\n    summarize(num = n())\n\ndata1 |&gt;\n    left_join(sample_size) |&gt;\n    mutate(myaxis = paste0(name, \"\\n\", \"n=\", num)) |&gt;\n    ggplot(aes(x = myaxis, y = value, fill = name)) +\n    geom_violin(width = 1.4) +\n    geom_boxplot(width = 0.1, color = \"grey\", alpha = 0.2) +\n    scale_fill_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(legend.position = \"none\") +\n    labs(x = \"\") +\n    ggtitle(\"A violin plot\")\n\n\n\n\n\n\n\n\n\n\n\n3.3.3 云雨图(Raincloud)\n看了就知道,云(半小提琴)+雨(散点)的组合。\n\n\nShow/Hide Code\ndata1 |&gt;\n    ggplot(aes(x = factor(name), y = value, fill = factor(name))) +\n\n    # 添加半小提琴图（显示分布）\n    stat_halfeye(\n        adjust = 0.5,\n        justification = -0.1,\n        .width = 0,\n        point_colour = NA\n    ) +\n\n    # 添加散点（显示原始数据点）\n    stat_dots(\n        side = \"left\",\n        justification = 1.1,\n        binwidth = 0.25\n    ) +\n\n    # 设置色盲友好型配色\n    scale_fill_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(legend.position = \"none\") +\n    labs(x = \"\") +\n    ggtitle(\"A raincloud plot example\")\n\n\n\n\n\n\n\n\n\n把头顺时针旋转90度(或交换R代码X轴和Y轴)，就更像云雨了\n甚至还可以再加上箱线图\n\n\nShow/Hide Code\ndata1 |&gt;\n    ggplot(aes(x = factor(name), y = value, fill = factor(name))) +\n\n    # 添加半小提琴图（显示分布）\n    stat_halfeye(\n        adjust = 0.5,\n        justification = -0.2,\n        .width = 0,\n        point_colour = NA\n    ) +\n\n    # 添加箱线图\n    geom_boxplot(\n        width = 0.12,\n        outlier.color = NA,\n        alpha = 0.5\n    ) +\n\n    # 添加散点（显示原始数据点）\n    stat_dots(\n        side = \"left\",\n        justification = 1.1,\n        binwidth = 0.25\n    ) +\n\n    # 设置色盲友好型配色\n    scale_fill_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(legend.position = \"none\") +\n    labs(x = \"\") +\n    ggtitle(\"A raincloud plot example\")",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#ggplot2",
    "href": "boxplot.html#ggplot2",
    "title": "3  Boxplot",
    "section": "3.4 ggplot2",
    "text": "3.4 ggplot2\n主要是geom_boxplot()函数.\n\n3.4.1 基础\n\n\nShow/Hide Code\nggplot(mpg, aes(x = class, y = hwy)) +\n    geom_boxplot()\n\n\n\n\n\n最基础的箱线图\n\n\n\n\n\n\nShow/Hide Code\nggplot(mpg, aes(x = class, y = hwy)) +\n    geom_boxplot(\n        color = \"blue\", # 箱线图边框颜色为蓝色\n        fill = \"blue\", # 箱体填充颜色为蓝色\n        alpha = 0.2, # 箱体透明度为0.2，便于观察重叠部分\n\n        notch = TRUE, # 显示缺口，用于比较中位数是否有显著差异\n        notchwidth = 0.8, # 缺口的宽度\n\n        outlier.colour = \"red\", # 异常值点的边框颜色为红色\n        outlier.fill = \"red\", # 异常值点的填充颜色为红色\n        outlier.size = 1 # 异常值点的大小为3\n    )\n\n\n\n\n\n有细腰的箱线图\n\n\n\n\n\n\n3.4.2 排序\n\n\nShow/Hide Code\nmpg |&gt;\n    # fct_reorder() 函数排序\n    ggplot(aes(x = fct_reorder(class, hwy, .fun = \"median\"), y = hwy)) +\n    geom_boxplot()\n\n\n\n\n\n用均值排序箱线图\n\n\n\n\n\n\n3.4.3 定制外观\n\n\nShow/Hide Code\np1 &lt;- ggplot(mpg, aes(x = class, y = hwy)) +\n    geom_boxplot(color = \"red\", fill = \"orange\", alpha = 0.2)\n\np2 &lt;- ggplot(mpg, aes(x = class, y = hwy, fill = class)) +\n    geom_boxplot(alpha = 0.3) +\n    theme(legend.position = \"none\")\n\np3 &lt;- ggplot(mpg, aes(x = class, y = hwy, fill = class)) +\n    geom_boxplot(alpha = 0.3) +\n    theme(legend.position = \"none\") +\n    scale_fill_brewer(palette = \"BuPu\") # 调色板\n\np4 &lt;- ggplot(mpg, aes(x = class, y = hwy, fill = class)) +\n    geom_boxplot(alpha = 0.3) +\n    theme(legend.position = \"none\") +\n    scale_fill_brewer(palette = \"Dark2\") # 调色板\n\np1 + p2 + p3 + p4\n\n\n\n\n\n改变颜色\n\n\n\n\n\n\nShow/Hide Code\nmpg |&gt;\n    # 添加一列 'type'，用于标记是否高亮某个组\n    mutate(type = ifelse(class == \"subcompact\", \"Highlighted\", \"Normal\")) |&gt;\n    ggplot(aes(x = class, y = hwy, fill = type, alpha = type)) +\n    geom_boxplot() +\n    scale_fill_manual(values = c(\"#69b3a2\", \"grey\")) + # 手动设置填充色，高亮组为绿色，其余为灰色\n    scale_alpha_manual(values = c(1, 0.1)) + # 手动设置透明度，高亮组为不透明，其余为半透明\n    theme_ipsum() + # 使用 hrbrthemes 包的排版主题\n    theme(legend.position = \"none\") + # 不显示图例\n    xlab(\"\") # 去除 x 轴标签\n\n\n\n\n\n高亮某个组\n\n\n\n\n\n\n3.4.4 分组/分面\n\n\nShow/Hide Code\n# 构造数据\nvariety &lt;- rep(LETTERS[1:7], each = 40) # 7种品种，每种40个观测\ntreatment &lt;- rep(c(\"high\", \"low\"), each = 20) # 处理分为high和low，每组20个观测\nnote &lt;- seq(1:280) + sample(1:150, 280, replace = TRUE) # 生成note变量，添加一定随机性\ndata2 &lt;- data.frame(variety, treatment, note) # 组合成数据框\n\n# 分组箱线图\nggplot(data2, aes(x = variety, y = note, fill = treatment)) +\n    geom_boxplot()\n\n\n\n\n\n分组箱线图与分面箱线图\n\n\n\n\nShow/Hide Code\n# 少分面箱线图\nggplot(data2, aes(x = variety, y = note, fill = treatment)) +\n    geom_boxplot() +\n    facet_wrap(~treatment)\n\n\n\n\n\n分组箱线图与分面箱线图\n\n\n\n\nShow/Hide Code\n# 多分面箱线图\nggplot(data2, aes(x = variety, y = note, fill = treatment)) +\n    geom_boxplot() +\n    facet_wrap(~variety, scale = \"free\") # 自由y轴\n\n\n\n\n\n分组箱线图与分面箱线图\n\n\n\n\n\n\n3.4.5 不等宽\n让箱线图的宽度与样本量成正比\n\n\nShow/Hide Code\n# 转换为因子类型\nmpg$drv &lt;- as.factor(mpg$drv)\n# 创建x轴标签，包含每个drv水平的名称及其对应的样本量\nn_xlab &lt;- str_glue(\"{levels(mpg$drv)}\\n(N={table(mpg$drv)})\")\n\nggplot(mpg, aes(x = drv, y = hwy, fill = drv)) +\n    geom_boxplot(varwidth = TRUE, alpha = 0.2) + # varwidth = TRUE 不等宽\n    scale_x_discrete(labels = n_xlab) +\n    theme(legend.position = \"none\")\n\n\n\n\n\n不等宽箱线图(宽带是样本量)\n\n\n\n\n\n\n3.4.6 连续变量\n把连续变量分箱后再绘制箱线图。\n\n\nShow/Hide Code\ndiamonds |&gt;\n    mutate(bin = cut_width(carat, width = 0.5, boundary = 0)) |&gt;\n    ggplot(aes(x = bin, y = price)) +\n    geom_boxplot()\n\n\n\n\n\n连续变量箱线图\n\n\n\n\n\n\n3.4.7 添加均值点\n\n\nShow/Hide Code\nggplot(mpg, aes(x = drv, y = hwy, fill = drv)) +\n    geom_boxplot(alpha = 0.7) +\n    stat_summary(fun = mean, geom = \"point\", shape = 1, size = 2, color = \"red\") +\n    theme(legend.position = \"none\")\n\n\n\n\n\n添加均值点\n\n\n\n\n\n\n3.4.8 带数据点\n\n\nShow/Hide Code\n# data1 是之前创建的数据集\ndata1 |&gt;\n    ggplot(aes(x = name, y = value, fill = name)) +\n    geom_boxplot() +\n    scale_fill_viridis(discrete = TRUE) + # 好看的色盲友好型颜色,离散变量\n    geom_jitter(color = \"grey\", size = 0.5, alpha = 0.5) +\n    theme_ipsum() + # 更适合排版的主题\n    theme(legend.position = \"none\") +\n    labs(x = \"\") +\n    ggtitle(\"A boxplot with jitter\")\n\n\n\n\n\n带抖动的箱线图\n\n\n\n\n\n\n3.4.9 外套箱线图\nggExtra包来实现更复杂（花哨）的图形，在ggplot2散点图的基础上再叠加箱线图、密度曲线等。\n\n\nShow/Hide Code\n# 创建ggplot散点图\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = cyl, size = cyl)) +\n    geom_point() +\n    theme(legend.position = \"none\")\n\nggMarginal(p, type = \"histogram\")\n\n\n\n\n\nggMarginal散点图叠加直方图\n\n\n\n\n\n\nShow/Hide Code\nggMarginal(p, type = \"density\")\n\n\n\n\n\nggMarginal散点图叠加密度图\n\n\n\n\n\n\nShow/Hide Code\nggMarginal(p, type = \"boxplot\")\n\n\n\n\n\nggMarginal散点图叠加箱线图\n\n\n\n\n还可以定制化样式：\n\n\nShow/Hide Code\n# 设置边际直方图的尺寸大小为10\nggMarginal(p, type = \"histogram\", size = 10)\n\n\n\n\n\nggMarginal定制化样式-尺寸大小\n\n\n\n\n\n\nShow/Hide Code\n# 设置边际直方图的填充颜色为slateblue，x轴直方图分箱数为10\nggMarginal(p, type = \"histogram\", fill = \"slateblue\", xparams = list(bins = 10))\n\n\n\n\n\nggMarginal定制化样式-颜色和分箱\n\n\n\n\n\n\nShow/Hide Code\n# 只在x轴添加边际图，边际图颜色为紫色，尺寸为4\nggMarginal(p, margins = \"x\", color = \"purple\", size = 4)\n\n\n\n\n\nggMarginal定制化样式-颜色和尺寸",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#base-r",
    "href": "boxplot.html#base-r",
    "title": "3  Boxplot",
    "section": "3.5 Base R",
    "text": "3.5 Base R\n主要是通过boxplot()函数.\n但是 base R 多看一秒都是浪费时间,直接ggplot2吧.\n如果实在想学,可以看 r-graph-gallery 的文档。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#sec-ggstatsplot",
    "href": "boxplot.html#sec-ggstatsplot",
    "title": "3  Boxplot",
    "section": "3.6 Pearl",
    "text": "3.6 Pearl\n\n\nShow/Hide Code\n# 自动安装packages\nif (!require(ggstatsplot)) {\n    install.packages(\n        \"ggstatsplot\",\n        repos = \"https://cloud.r-project.org\"\n    )\n}\n\nif (!require(palmerpenguins)) {\n    install.packages(\n        \"palmerpenguins\",\n        repos = \"https://cloud.r-project.org\"\n    )\n}\n\npalmerpenguins::penguins |&gt;\n    drop_na() |&gt;\n    ggstatsplot::ggbetweenstats(x = species, y = flipper_length_mm, 1)\n\n\n\n\n\n带有统计的小提琴箱线图\n\n\n\n\n在 ggstatsplot 可以看到进一步美化。\n或者\n在 tidyplots 有另一种风格的统计箱线图。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "density.html",
    "href": "density.html",
    "title": "4  Density",
    "section": "",
    "text": "4.1 PKG\n核密度曲线图其实是一个平滑的直方图，曲线下面积是1。\n通过geom_density()函数可以绘制核密度曲线图。\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(geomtextpath) # 添加文本路径\nlibrary(hrbrthemes) # theme_ipsum主题",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "density.html#单组",
    "href": "density.html#单组",
    "title": "4  Density",
    "section": "4.2 单组",
    "text": "4.2 单组\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length)) + \n  geom_density(fill=\"#69b3a2\", alpha=0.8) # 可选主题 theme_ipsum()\n\n\n\n\n\n基本的geom_density",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "density.html#多组",
    "href": "density.html#多组",
    "title": "4  Density",
    "section": "4.3 多组",
    "text": "4.3 多组\n\n4.3.1 镜像\n镜像密度曲线图见 Section 2.2.2\n\n\n4.3.2 分组和分面\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, fill = Species), ) + \n  geom_density(alpha=0.8)\n\n\n\n\n\n分组\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, fill = Species)) + \n  geom_density(alpha=0.8) + \n  facet_wrap(~ Species) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n分面\n\n\n\n\n\n\n4.3.3 山脊图\n分面不如山脊图好看，见 Chapter 5\n\n\n4.3.4 堆叠\n通过position=“fill”绘制堆叠密度图，可以看到每个组的比例\n\n\nShow/Hide Code\nggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n    geom_density(adjust=1.5, position=\"fill\") +\n    theme_ipsum()\n\n\n\n\n\n堆叠密度图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "density.html#注释标签",
    "href": "density.html#注释标签",
    "title": "4  Density",
    "section": "4.4 注释/标签",
    "text": "4.4 注释/标签\n还可以使用annot数据框来添加注释，下面的例子中，我们在鸢尾花的密度曲线上添加了每个物种的名称注释。\n\n4.4.1 geom_text\n\n\nShow/Hide Code\nannot &lt;- data.frame(\n  Species = c(\"setosa\", \"versicolor\", \"virginica\"),\n  x = c(5.2, 5.5, 6.4),\n  y = c(1.2, 0.8, 0.8)\n)\n\nggplot(iris, aes(x = Sepal.Length, fill = Species)) + \n  geom_density(alpha=0.8)  +\n  geom_text(data=annot, aes(x=x, y=y, label=Species, color=Species), hjust=0, size=4.5) +\n  theme_ipsum() + # 适合印刷的主题\n  theme(legend.position = \"none\") \n\n\n\n\n\n带注释的密度曲线图\n\n\n\n\n\n\n4.4.2 textdensity\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, color = Species, label = Species)) +\n  geom_textdensity() + \n  theme_bw() + \n  theme(legend.position = \"none\")\n\n\n\n\n\ngeomtextpath 更方便添加标签,但是不能带fill颜色\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, color = Species, label = Species)) +\n  geom_textdensity(vjust = -0.4, hjust = \"ymid\") + # hjust = \"ymid\" 调整标签位置\n  theme_bw() + \n  theme(legend.position = \"none\")\n\n\n\n\n\ngeomtextpath 调整标签位置\n\n\n\n\ntext参数: \n\nsize: 文本大小\nfontface: 字体样式\nvjust: 垂直调整\nhjust: 水平调整\n\nr-graph-gallery 还有一些示例: geomtextpath",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "density.html#边缘图",
    "href": "density.html#边缘图",
    "title": "4  Density",
    "section": "4.5 边缘图",
    "text": "4.5 边缘图\n见 Section 3.4.9",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "ridgeline.html",
    "href": "ridgeline.html",
    "title": "5  Ridgeline",
    "section": "",
    "text": "5.1 基础山脊图\n主要借助强大且美观的ggridges包来绘制山脊图。山脊图可以更好地展示多个分布的情况。\n山脊图（ridgeline chart）本质上是一组密度图（density plots），建议先学习密度图的绘制方法。\nShow/Hide Code\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) +\n  geom_density_ridges(alpha = 0.5) +\n  theme_ridges() + # 适合ridge图的主题\n  theme(legend.position = \"none\")\n\n\n\n\n\n基础山脊图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridgeline</span>"
    ]
  },
  {
    "objectID": "ridgeline.html#直方图类型",
    "href": "ridgeline.html#直方图类型",
    "title": "5  Ridgeline",
    "section": "5.2 直方图类型",
    "text": "5.2 直方图类型\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) +\n  geom_density_ridges(alpha = 0.5, stat=\"binline\") + # 直方图参数\n  theme_ridges() + # 适合ridge图的主题\n  theme(legend.position = \"none\")\n\n\n\n\n\n转换为直方图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridgeline</span>"
    ]
  },
  {
    "objectID": "ridgeline.html#带颜色",
    "href": "ridgeline.html#带颜色",
    "title": "5  Ridgeline",
    "section": "5.3 带颜色",
    "text": "5.3 带颜色\n\n\nShow/Hide Code\nggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +\n\n  # 添加一个“渐变密度山峦图”几何对象层\n  # - geom_density_ridges_gradient() 是 ggridges 包的核心函数\n  # - `fill = ..x..` 的美学映射在这里生效，使得每个山峦的填充色根据其 x 轴数值（温度）进行渐变\n  geom_density_ridges_gradient(\n    # scale = 3: 控制山峦之间重叠的程度。数值越大，重叠越多，图形越紧凑\n    scale = 3,\n    # rel_min_height = 0.01: 裁剪每个密度曲线的尾部，移除高度低于最大高度1%的部分，使图形更整洁\n    rel_min_height = 0.01\n  ) +\n\n  # 使用 viridis 调色板来应用填充色\n  scale_fill_viridis(\n    # name = \"Temp. [F]\": 设置颜色图例的标题（尽管后面图例被隐藏了）\n    name = \"Temp. [F]\",\n    # option = \"C\": 选择 viridis 调色板中的 \"C\" 方案 (也称为 \"plasma\")\n    option = \"C\"\n  ) +\n\n  # 设置图表的标签\n  labs(title = 'Temperatures in Lincoln NE in 2016') + # 设置主标题\n\n  theme_ipsum() +\n\n  # 对主题进行微调\n  theme(\n    # legend.position=\"none\": 隐藏图例。因为颜色已经直观地反映在x轴上，所以图例不是必需的\n    legend.position=\"none\",\n    # panel.spacing: 调整不同面板（即每个月份的图）之间的垂直间距，使其更紧凑\n    panel.spacing = unit(0.1, \"lines\"),\n    # strip.text.x: 调整分面标题在X轴方向的文本属性。\n    strip.text.y = element_text(size = 8)\n  )\n\n\n\n\n\n带X轴颜色的山峦图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridgeline</span>"
    ]
  },
  {
    "objectID": "ridgeline.html#pearl",
    "href": "ridgeline.html#pearl",
    "title": "5  Ridgeline",
    "section": "5.4 Pearl",
    "text": "5.4 Pearl\n\n5.4.1 内部有图例和注释的山脊图\n一种内部有图例和注释的山脊图\n以下是生成该图的代码（因为原始数据比较大，在github，所以直接放了生成的图片）：\n\n\n\n内部有图例和注释的山脊图\n\n\n\n\nShow/Hide Code\nlibrary(tidyverse) # 数据整理和可视化的核心包集合\nlibrary(ggtext) # 增强ggplot2的文本渲染能力\nlibrary(ggdist) # 提供高级的分布可视化图层\nlibrary(glue) # 方便地将变量嵌入到字符串中\nlibrary(patchwork) # 用于组合和排列多个ggplot图表\n\n\n# 从 github 读取数据文件\nrent = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/rent.csv\"\n) # 包含原始租金信息的CSV文件\nrent_title_words = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/rent_title_words.csv\"\n) # 包含从标题中提取的词语和对应租金的数据\ndf_plot = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/df_plot.csv\"\n) # 专门为绘图准备的聚合数据\n\n# --- 数据预处理 ---\n\n# 按平均价格降序排列数据框\ndf_plot &lt;- df_plot |&gt; arrange(desc(mean_price))\n# 将 'word' 列转换为因子类型，并指定其顺序（levels），确保在图表中的显示顺序与排列后的一致\ndf_plot$word &lt;- factor(df_plot$word, levels = unique(df_plot$word))\n\n# 计算一些将在图表中使用的全局统计量\nmean_price &lt;- mean(rent$price, na.rm = TRUE) # 所有房源的平均租金\nmedian_price &lt;- median(rent$price, na.rm = TRUE) # 所有房源的租金中位数\nn_rental_posts &lt;- nrow(subset(rent, !is.na(title))) # 有效（标题不为空）的出租帖子总数\n\n# --- 图表美学设置 ---\n\n# 定义图表的背景颜色\nbg_color &lt;- \"grey97\"\n\n# 使用 glue 包创建一个动态的副标题字符串\nplot_subtitle = glue(\n  \"Adjectives used to describe houses and apartments in San Francisco Bay Area \nCraigslist rental post titles, and their relationship with rent prices. Data is from \n{scales::number(n_rental_posts, big.mark = ',')} Craigslist rental posts between 2000 and 2018.\nThe 15 most frequent adjectives are shown.\n\"\n)\n\n# --- 创建主图表 (p) ---\n\np &lt;- df_plot |&gt;\n  ggplot(aes(word, price)) + # 初始化ggplot对象，设置x轴为单词，y轴为价格\n  # 添加半眼图层（雨云图的核心部分），展示数据分布\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  # 添加置信区间图层，默认显示50%, 80%, 95%的区间\n  stat_interval() +\n  # 添加一个点来表示每个单词对应的租金中位数\n  stat_summary(geom = \"point\", fun = median) +\n  # 在图表特定位置添加文本，作为平均卧室数的列标题\n  annotate(\n    \"text\",\n    x = 16,\n    y = 0,\n    label = \"(Avg. Bedrooms)\",\n    size = 3,\n    hjust = 0.5\n  ) +\n  # 为每个单词计算并显示平均卧室数\n  stat_summary(\n    aes(y = beds), # 使用 'beds' 列的数据\n    geom = \"text\", # 以文本形式显示\n    fun.data = function(x) {\n      # 自定义一个函数来计算均值并格式化输出\n      data.frame(\n        y = 0, # 将文本放置在y=0的位置\n        label = sprintf(\n          \"(%s)\",\n          scales::number(\n            mean(ifelse(x &gt; 0, x, NA), na.rm = TRUE),\n            accuracy = 0.1\n          )\n        )\n      )\n    },\n    size = 2.5\n  ) +\n  # 添加一条水平虚线，代表所有房源的租金中位数\n  geom_hline(yintercept = median_price, col = \"grey30\", lty = \"dashed\") +\n  # 为中位数线添加文本标签\n  annotate(\n    \"text\",\n    x = 16,\n    y = median_price + 50,\n    label = \"Median Rent\",\n    size = 3,\n    hjust = 0\n  ) +\n  # 将x轴的标签（单词）转换为大写\n  scale_x_discrete(labels = toupper) +\n  # 设置y轴（价格）的刻度标记\n  scale_y_continuous(breaks = seq(2500, 20000, 2500)) +\n  # 手动设置颜色方案，这里假设 MetBrewer 包已安装\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n  # 翻转坐标轴，使条形图水平显示，并设置y轴（翻转后为价格轴）的范围，clip=\"off\"允许绘图超出面板区域\n  coord_flip(ylim = c(0, 10000), clip = \"off\") +\n  # 移除默认的颜色图例\n  guides(col = \"none\") +\n  # 设置图表的标题、副标题、说明文字和坐标轴标签\n  labs(\n    title = toupper(\"Are 'nice' and 'clean' apartments really cheaper?\"),\n    subtitle = plot_subtitle,\n    caption = \"Y-axis capped at $10,000.&lt;br&gt;\n     Data source: Pennington, Kate (2018). \n     Bay Area Craigslist Rental Housing Posts, 2000-2018.&lt;br&gt;\n     From github.com/katepennington/historic_bay_area_craigslist_housing_posts/blob/master/clean_2000_2018.csv.zip.\n     &lt;br&gt;\n     Visualization: Ansgar Wolsing\",\n    x = NULL, # 移除x轴标签\n    y = \"Rent (USD)\"\n  ) +\n  # 使用一个简洁的主题\n  theme_minimal() +\n  # 对主题进行深度定制\n  theme(\n    plot.background = element_rect(color = NA, fill = bg_color), # 设置图表背景\n    panel.grid = element_blank(), # 移除所有网格线\n    panel.grid.major.x = element_line(linewidth = 0.1, color = \"grey75\"), # 添加主x轴网格线（翻转后是水平线）\n    plot.title = element_text(),\n    plot.title.position = \"plot\", # 标题位置与整个图对齐\n    plot.subtitle = element_textbox_simple(\n      # 使用ggtext设置副标题，支持自动换行\n      margin = margin(t = 4, b = 16),\n      size = 10\n    ),\n    plot.caption = element_textbox_simple(\n      # 使用ggtext设置说明文字\n      margin = margin(t = 12),\n      size = 7\n    ),\n    plot.caption.position = \"plot\", # 说明文字位置与整个图对齐\n    axis.text.y = element_text(hjust = 0, margin = margin(r = -10)),\n    plot.margin = margin(4, 4, 4, 4) # 设置图表外边距\n  )\n\n# --- 创建自定义图例 (p_legend) ---\n\n# 为图例创建一个小的数据框，只使用 \"beautiful\" 这个词的数据作为示例\ndf_for_legend &lt;- rent_title_words |&gt;\n  filter(word == \"beautiful\")\n\n# 创建一个独立的ggplot对象作为图例\np_legend &lt;- df_for_legend |&gt;\n  ggplot(aes(word, price)) +\n  # 同样添加半眼图、区间图和中位数点，作为图例的示例图形\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  stat_interval() +\n  stat_summary(geom = \"point\", fun = median) +\n  # 添加富文本注释，解释图表的各个部分\n  annotate(\n    \"richtext\",\n    x = c(0.8, 0.8, 0.8, 1.4, 1.8),\n    y = c(1000, 5000, 3000, 2400, 4000),\n    label = c(\n      \"50% of prices&lt;br&gt;fall in this range\",\n      \"95% of prices\",\n      \"80% of prices\",\n      \"Median\",\n      \"Distribution&lt;br&gt;of prices\"\n    ),\n    fill = NA,\n    label.size = 0,\n    size = 2,\n    vjust = 1,\n  ) +\n  # 添加曲线箭头，将文本注释指向图形的相应部分\n  geom_curve(\n    data = data.frame(\n      x = c(0.7, 0.80, 0.80, 1.225, 1.8),\n      xend = c(0.95, 0.95, 0.95, 1.075, 1.8),\n      y = c(1800, 5000, 3000, 2300, 3800),\n      yend = c(1800, 5000, 3000, 2100, 2500)\n    ),\n    aes(x = x, xend = xend, y = y, yend = yend),\n    stat = \"unique\",\n    curvature = 0.2,\n    linewidth = 0.2,\n    color = \"grey12\",\n    arrow = arrow(angle = 20, length = unit(1, \"mm\"))\n  ) +\n  # 设置与主图一致的颜色方案\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n  # 翻转坐标轴，并精心调整坐标轴范围以适应图例内容\n  coord_flip(xlim = c(0.75, 1.3), ylim = c(0, 6000), expand = TRUE) +\n  # 移除图例\n  guides(color = \"none\") +\n  # 添加图例的标题\n  labs(title = \"Legend\") +\n  # 使用空白主题，移除所有坐标轴、背景等元素\n  theme_void() +\n  # 对图例进行主题微调\n  theme(\n    plot.title = element_text(size = 9, hjust = 0.075),\n    plot.background = element_rect(\n      color = \"grey30\",\n      linewidth = 0.2,\n      fill = bg_color\n    )\n  ) # 为图例添加边框和背景色\n\n# --- 组合图表 ---\n\n# 使用 patchwork 包的 inset_element() 函数，将自定义图例 (p_legend) 嵌入到主图表 (p) 的指定位置\n# l, r, t, b 分别代表左、右、上、下的边界，数值是相对于主图绘图区域的比例\np + inset_element(p_legend, l = 0.6, r = 1.0, t = 0.99, b = 0.7, clip = FALSE)\n\n\n\n\n5.4.2 山水画一般的山脊图\n山水画一般的山脊图,可视化1900年以来美国最受欢迎的50个男女姓名\n\n\n\n可视化1900年以来美国最受欢迎的50个男女姓名\n\n\n以下是生成该图的代码：\n\n\nShow/Hide Code\n# 步骤 1: 加载所需的库\n# ------------------------------------------------\n# 注意：所有与自定义字体相关的库 (extrafont, showtext) 均已移除。\nlibrary(tidyverse)    # 用于数据处理 (dplyr) 和绘图 (ggplot2) 的核心包集合\nlibrary(ggridges)     # 用于创建山脊图 (geom_ridgeline)\nlibrary(cowplot)      # 用于组合多个 ggplot 图表\n\n\n# 步骤 2: 数据加载和准备\n# ------------------------------------------------\n\n# 加载 babynames 数据集，它包含了美国自1880年以来的婴儿姓名数据\nbabynames &lt;- babynames::babynames\n\n# 筛选出历史上总出生数最多的 50 个女性名字\ntop_female &lt;- babynames |&gt;\n  filter(sex == \"F\") |&gt;                  # 1. 筛选性别为女性的数据\n  group_by(name) |&gt;                      # 2. 按名字进行分组\n  summarise(total = sum(n)) |&gt;           # 3. 计算每个名字在所有年份的总出生数\n  slice_max(total, n = 50) |&gt;            # 4. 提取总数排名前50的名字\n  mutate(\n    name = forcats::fct_reorder(name, -total) # 5. 将名字转换为因子，并根据总数降序排列\n  ) |&gt;\n  pull(name)                             # 6. 提取出排好序的名字向量，作为后续排序的基准\n\n# 筛选出历史上总出生数最多的 50 个男性名字 (逻辑同上)\ntop_male &lt;- babynames |&gt;\n  filter(sex == \"M\") |&gt;\n  group_by(name) |&gt;\n  summarise(total = sum(n)) |&gt;\n  slice_max(total, n = 50) |&gt;\n  mutate(\n    name = forcats::fct_reorder(name, -total)\n  ) |&gt;\n  pull(name)\n\n# 准备用于绘制山脊图的女性名字数据\nfemale_names &lt;- babynames |&gt;\n  filter(\n    sex == \"F\",\n    name %in% top_female  # 1. 只保留属于前50热门列表中的名字\n  ) |&gt;\n  # 2. 将name列转换为因子，并指定其顺序与top_female一致，确保Y轴按总排名显示\n  mutate(name = factor(name, levels = levels(top_female))) |&gt;\n  group_by(year, name) |&gt;   # 3. 按年份和名字分组\n  summarise(n = sum(n))     # 4. 聚合数据\n\n# 准备用于绘制山脊图的男性名字数据 (逻辑同上)\nmale_names &lt;- babynames |&gt;\n  filter(\n    sex == \"M\",\n    name %in% top_male\n  ) |&gt;\n  mutate(name = factor(name, levels = levels(top_male))) |&gt;\n  group_by(year, name) |&gt;\n  summarise(n = sum(n))\n\n\n# 步骤 3: 创建独立的图表\n# ------------------------------------------------\n\n########### 女性名字山脊图 (plot1) ###########\nplot1 &lt;- ggplot(female_names, aes(x = year, y = fct_reorder(name, n), height = n / 50000, group = name)) +\n  geom_ridgeline(\n    alpha = 0.5, scale = 4.5, linewidth = 0,\n    fill = \"#05595B\", color = \"white\"\n  ) +\n  xlim(1900, NA) +\n  labs(title = \"Female\", y = \"\", x = \"\") +\n  theme_light() + # 应用一个明亮的主题\n  theme(\n    # 注意：所有 'family' 参数已被移除，将使用系统默认字体\n    plot.title = element_text(hjust = 0, size = 15),\n    axis.ticks.y = element_blank(),\n    axis.text = element_text(size = 8),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(linewidth = 0.5),\n    panel.border = element_blank()\n  ) +\n  geom_segment(aes(x = 1967, xend = 1967, y = 56.7, yend = 52), color = \"#404040\") +\n  geom_segment(aes(x = 1967, xend = 1964, y = 56.7, yend = 56.7), color = \"#404040\") +\n  annotate(\n    geom = \"text\", x = 1970, y = 54, label = \"73,982 babies called\\n'Mary' in 1921\", hjust = \"left\",\n    size = 3, color = \"#404040\" # 'family' 参数已移除\n  )\n\n######### 男性名字山脊图 (plot2) #########\nplot2 &lt;- ggplot(male_names, aes(x = year, y = fct_reorder(name, n), height = n / 50000, group = name)) +\n  geom_ridgeline(\n    alpha = 0.5, scale = 4.5, linewidth = 0,\n    fill = \"#603601\", color = \"white\"\n  ) +\n  xlim(1900, NA) +\n  labs(title = \"Male\", y = \"\", x = \"\") +\n  theme_light() +\n  theme(\n    # 注意：所有 'family' 参数已被移除\n    plot.title = element_text(hjust = 0, size = 15),\n    axis.ticks.y = element_blank(),\n    axis.text = element_text(size = 8),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(linewidth = 0.5),\n    panel.border = element_blank(),\n    panel.background = element_rect(fill = \"white\"),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  geom_segment(aes(x = 1975, xend = 1975, y = 58, yend = 53.1), color = \"#404040\") +\n  geom_segment(aes(x = 1975, xend = 1972, y = 58, yend = 58), color = \"#404040\") +\n  annotate(\n    geom = \"text\", x = 1977, y = 54, label = \"94,756 babies called\\n'James' in 1947\", hjust = \"left\",\n    size = 3, color = \"#404040\" # 'family' 参数已移除\n  )\n\n\n# 步骤 4: 组合图表并添加标题和说明\n# ------------------------------------------------\n\n# 使用 cowplot 创建一个独立的总标题\ntitle_theme &lt;- ggdraw() +\n  draw_label(\"50 most common given names in the US since 1900\",\n    fontface = \"bold\",\n    size = 15,\n    hjust = 0.4 # 'fontfamily' 参数已移除\n  )\n\n# 使用 cowplot 创建一个独立的图表说明/来源信息\ncaption &lt;- ggdraw() +\n  draw_label(\"Source: {babynames} from Hadley Wickham | Graphic: Laura Navarro Soler\",\n    size = 15,\n    hjust = 0.5,\n    color = \"#6B6B6B\" # 'fontfamily' 参数已移除\n  )\n\n# 将两个山脊图水平并排组合\ngridofplots &lt;- plot_grid(plot1, plot2, nrow = 1)\n\n# 将标题、组合图、图表说明垂直堆叠成最终的成品图\nplot_grid(title_theme,\n  gridofplots,\n  caption,\n  ncol = 1, # 最终所有组件排成一列\n  rel_heights = c(0.2, 1.5, 0.1) # 分别指定标题、图、说明的相对高度\n)",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridgeline</span>"
    ]
  },
  {
    "objectID": "violin.html",
    "href": "violin.html",
    "title": "6  Violin",
    "section": "",
    "text": "6.1 PKG\nggplot2::geom_violin() 或 base R::vioplot 可以绘制小提琴图。\n小提琴图是箱线图的变体, 弥补了箱线图隐藏数据点的缺点。(箱线图陷阱)\n小提琴图是一种强大的可视化技术, 允许比较多个组的数量和分布,但是使用频率低于箱线图,我不理解.\n如果数据量少(几百个),还可以叠加散点.\nShow/Hide Code\nlibrary(tidyverse)",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#基础",
    "href": "violin.html#基础",
    "title": "6  Violin",
    "section": "6.2 基础",
    "text": "6.2 基础\n\n\nShow/Hide Code\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_violin()\n\n\n\n\n\n基础geom_violin\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\") \n\n\n\n\n\n稍微美化的geom_violin\n\n\n\n\nwider格式数据转化为long格式数据后, 再使用geom_violin()绘制小提琴图。\n\n\nShow/Hide Code\nknitr::kable(head(iris))\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\niris数据(wider格式数据)\n\n\ntidyr::gather() 是个有意思的函数,可以将wider格式数据转化为long格式数据。\n\n\nShow/Hide Code\niris_long &lt;- iris |&gt; \n  gather(key = \"type\", value = \"value\", -Species)\n\nknitr::kable(head(iris_long))\n\n\n\n\n\nSpecies\ntype\nvalue\n\n\n\n\nsetosa\nSepal.Length\n5.1\n\n\nsetosa\nSepal.Length\n4.9\n\n\nsetosa\nSepal.Length\n4.7\n\n\nsetosa\nSepal.Length\n4.6\n\n\nsetosa\nSepal.Length\n5.0\n\n\nsetosa\nSepal.Length\n5.4\n\n\n\niris数据(wider格式数据转化为long格式后)\n\n\nShow/Hide Code\ntable(iris_long$type)\n\n\n\nPetal.Length  Petal.Width Sepal.Length  Sepal.Width \n         150          150          150          150 \n\n\n\n\nShow/Hide Code\nggplot(iris_long, aes(x = type, y = value)) +\n  geom_violin()\n\n\n\n\n\niris数据(wider格式数据转化为long格式后)小提琴图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#排序",
    "href": "violin.html#排序",
    "title": "6  Violin",
    "section": "6.3 排序",
    "text": "6.3 排序\n有多种方法: forcats::fct_reorder(), dplyr::arrange() base R::reorder()等,我一般用forcats::fct_reorder(), 另外两种方法见Reorder a variable with ggplot2。\n\n\nShow/Hide Code\niris_long |&gt; \n  # 重点是这里的fct_reorder\n  ggplot(aes(x = fct_reorder(type, value, .fun = median), y = value, fill = type)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n使用fct_reorder()排序小提琴图\n\n\n\n\n注意,如果X已经有顺序,比如月份等,就不适合使用fct_reorder()。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#横向",
    "href": "violin.html#横向",
    "title": "6  Violin",
    "section": "6.4 横向",
    "text": "6.4 横向\n有几种方法可以设置小提琴图为横向显示。\n\n在aes交换x和y的参数\ncoord_flip()\norientation = “y”\n\ncoord_flip()是比较落后的方式,纯粹是简单粗暴的翻转(回归线基于旋转前;调整坐标轴scale基于旋转前,反直觉), 现在优先考虑aes()交换x和y的参数,ggplot会自动识别方向,如果识别错误,可以使用orientation = \"y\"。\n\n\nShow/Hide Code\niris_long |&gt; \n  ggplot(aes(x = value, y = fct_reorder(type, value, .fun = median), fill = type)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\") \n\n\n\n\n\n使用coord_flip()横向显示小提琴图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#箱线图",
    "href": "violin.html#箱线图",
    "title": "6  Violin",
    "section": "6.5 +箱线图",
    "text": "6.5 +箱线图\n使用geom_boxplot()和geom_violin()结合,可以同时显示小提琴图和箱线图。 注意: 调整geom_boxplot()的宽度,并且白色(fill仅放入geom_violin()),使其更美观。\n\n\nShow/Hide Code\niris_long |&gt; \n  ggplot(aes(x = type, y = value)) + \n  geom_violin(aes(fill = type), alpha = 0.5) + \n  geom_boxplot(width = 0.05) + \n  theme(legend.position = \"none\") \n\n\n\n\n\n小提琴图与箱线图结合\n\n\n\n\n还可以用fill增加分组.\n\n\nShow/Hide Code\nggplot(iris_long, aes(x = type, y = value, fill = Species)) +\n  geom_violin() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n分组小提琴图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#base-r",
    "href": "violin.html#base-r",
    "title": "6  Violin",
    "section": "6.6 base R",
    "text": "6.6 base R\nr-graph-gallery 有base R::vioplot的 小提琴图示例",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#pearl",
    "href": "violin.html#pearl",
    "title": "6  Violin",
    "section": "6.7 Pearl",
    "text": "6.7 Pearl\n一种非常美观的带有统计量的小提琴图,见 Section 3.6",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "correlation.html",
    "href": "correlation.html",
    "title": "Correlation",
    "section": "",
    "text": "此部分探数据(变量)之间的关系\n\n\n\n变量间的关系\n\n\n\n7  Scatter 散点图，用数据点显示两个变量之间的关系\n8  Heatmap 热力图, 用颜色块显示变量之间的关系\n9  Correlogram 相关性图, 显示变量之间的统计学相关性\n10  Bubble 气泡图, 用气泡的大小和颜色表示三个变量之间的关系\n11  Conn-Scatter 连接散点图, 用线连接数据点显示变量之间的关系\n12  Density 2D 二维密度图, 用颜色块显示两个变量的密度分布",
    "crumbs": [
      "Correlation"
    ]
  },
  {
    "objectID": "scatter.html",
    "href": "scatter.html",
    "title": "7  Scatter",
    "section": "",
    "text": "7.1 PKG\n散点图显示两个数值变量之间的关系。每个点代表一个观测值。\nShow/Hide Code\n# 环境准备\nlibrary(tidyverse) # tidyverse\nlibrary(hrbrthemes) # 主题\nlibrary(patchwork) # 组合图形\nlibrary(geomtextpath) # 添加文本路径\nlibrary(ggiraph) # 交互式图形\nlibrary(sf) # 地理数据处理\nlibrary(qqman) # 曼哈顿图\nlibrary(knitr)\nset.seed(123)",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#ggplot2",
    "href": "scatter.html#ggplot2",
    "title": "7  Scatter",
    "section": "7.2 ggplot2",
    "text": "7.2 ggplot2\n\n7.2.1 基础\n\n\nShow/Hide Code\nggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + \n    geom_point()\n\n\n\n\n\n基础散点图\n\n\n\n\n\n\n7.2.2 更改外观\n\n\nShow/Hide Code\nggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + \n    geom_point(\n        color=\"orange\",\n        fill=\"#69b3a2\",\n        shape=21,\n        alpha=0.5,\n        size=6,\n        stroke = 2\n        )\n\n\n\n\n\n更改外观\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n    geom_point(\n        color = \"black\",\n        fill = \"#69b3a2\",\n        shape = 22,\n        alpha = 0.5,\n        size = 6,\n        stroke = 1\n    ) +\n    theme_ipsum()   \n\n\n\n\n\n使用hrbrthemes::theme_ipsum()主题\n\n\n\n\n\n\n7.2.3 第三变量\n\n\nShow/Hide Code\n# 改可以同时添加多个变量到aes()中,比如shape+color,但是比较乱\n\n# color\np_color &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + \n    geom_point() + \n    theme(legend.position = \"bottom\")\n\n# alpha 不推荐把离散变量Species添加到alpha\np_alpha &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, alpha=Species)) + \n    geom_point() + \n    theme(legend.position = \"bottom\")\n\n\n# Shape\np_shape &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) + \n    geom_point() + \n    theme(legend.position = \"bottom\")\n\n# Size 不推荐把离散变量Species添加到size\np_size &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, size=Species)) + \n    geom_point() +\n    theme(legend.position = \"bottom\")\n\n(p_color + p_alpha) / (p_shape + p_size)\n\n\n\n\n\n把第三种变量添加到aes()中\n\n\n\n\n\n\n7.2.4 rug\n在X轴和Y轴上添加geom_rug图,可以显示数据的分布情况。\n\n\nShow/Hide Code\nggplot(iris, aes(x=Sepal.Length, Petal.Length)) +\n  geom_point() +\n  geom_rug(color=\"steelblue\",alpha=0.1, size=1.5)\n\n\n\n\n\n添加rug图,显示点的分布\n\n\n\n\n\n\n7.2.5 拟合线\n\n\nShow/Hide Code\n# 基础散点图\np1 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + \n  geom_point( color=\"#69b3a2\") \n \n# 添加线性趋势\np2 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +\n  geom_point() +\n  geom_smooth(method=lm , color=\"red\", se=FALSE) \n\n# 添加线和阴影\np3 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +\n  geom_point() +\n  geom_smooth(method=lm , color=\"red\", fill=\"#69b3a2\", se=TRUE) \n\np1 / p2 / p3\n\n\n\n\n\n添加拟合线\n\n\n\n\n\n\n7.2.6 拟合线标签\ngeom_labelsmooth() 创建带有lable的线\n\n\nShow/Hide Code\nlibrary(hrbrthemes)\nlibrary(patchwork)\nlibrary(geomtextpath)\n\n# 一个拟合线\n\np1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point() +\n  geom_labelsmooth(\n    aes(label = 'My Label'),\n    fill = \"white\",\n    method = \"lm\",\n    formula = y ~ x,\n    size = 6,\n    linewidth = 2,\n    boxlinewidth = 0.6\n  )\n\n# 多个拟合线\np2 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +\n  geom_point() +\n  geom_labelsmooth(\n    aes(label = Species),\n    fill = \"white\",\n    method = \"lm\",\n    formula = y ~ x,\n    size = 3,\n    linewidth = 1,\n    boxlinewidth = 0.4\n  ) +\n  guides(color = 'none')\n\np1 + p2\n\n\n\n\n\n带有lable的线\n\n\n\n\n\n\n7.2.7 外套箱线图\n见 Section 3.4.9",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#标注",
    "href": "scatter.html#标注",
    "title": "7  Scatter",
    "section": "7.3 标注",
    "text": "7.3 标注\n在图上添加标注,可以突出重点信息, 参考WHY ANNOTATING?\n\n7.3.1 text\n添加文本标注的几种方式：geom_text()、geom_label()、annotate()。geom_text() 和 annotate() 写法不同,效果相同，geom_label() 有背景色。annotate() 是更全能的标注方式\n\n\nShow/Hide Code\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n    geom_point()\n\n# 注释的坐标和内容\nannotation &lt;- data.frame(\n    x = c(2, 4.5),\n    y = c(20, 25),\n    label = c(\"label 1\", \"label 2\")\n)\n\n# 使用 annotate() 添加标注\n# p +\n#     annotate(\n#         \"text\",\n#         x = c(2, 4.5),\n#         y = c(20, 25),\n#         label = c(\"label 1\", \"label 2\"),\n#         color = \"orange\",\n#         size = 7,\n#         angle = 45,\n#         fontface = \"bold\"\n#     )\n\n# 使用 geom_text() 添加标注\np +\n    geom_text( # 或者使用 geom_label\n        data = annotation,\n        aes(x = x, y = y, label = label),\n        color = \"orange\",\n        size = 7,\n        angle = 45,\n        fontface = \"bold\"\n    )\n\n\n\n\n\n使用geom_text()添加标注\n\n\n\n\n\n\n7.3.2 label\n\n\nShow/Hide Code\ndata = head(mtcars, 30)\n\nggplot(data, aes(x = wt, y = mpg)) +\n    geom_point() + # Show dots\n    geom_label(\n        label = \"Look at this!\",\n        x = 4.1,\n        y = 20,\n        label.padding = unit(0.55, \"lines\"), # Rectangle size around label\n        label.size = 0.35,\n        color = \"black\",\n        fill = \"#69b3a2\"\n    )\n\n\n\n\n\n只添加一个文本标签\n\n\n\n\n\n\nShow/Hide Code\ndata &lt;- head(iris, 20)\n\nggplot(data, aes(x = Sepal.Length, y = Sepal.Width)) + \n    geom_point() + \n    geom_label( # 与ggplot2语法相似\n        data = data |&gt; filter(Sepal.Length&gt;5 & Sepal.Width&gt;2),\n        aes(label = Species) \n    )\n\n\n\n\n\n给一部分数据加标签\n\n\n\n\n\n\nShow/Hide Code\n# 区别是 geom_label() 有背景色, 没有check_overlap参数\n\ndata = head(mtcars, 30)\n\np &lt;- ggplot(data, aes(x=wt, y=mpg)) +\n  geom_point() \n\n# 使用 geom_text() 添加标签\np_text &lt;- p +\n    geom_text(\n        label = rownames(data), # 或者 data$&lt;列名&gt;\n        nudge_x = 0.25, # 调整标签x位置\n        nudge_y = 0.25, # 调整标签y位置\n        check_overlap = T # 避免标签重叠,重叠只会留一个\n    )\n\np_label &lt;- p +\n    geom_label(\n        label = rownames(data), # 或者 data$&lt;列名&gt;\n        nudge_x = 0.25, # 调整标签x位置\n        nudge_y = 0.25, # 调整标签y位置\n    )\n\np_text + p_label\n\n\n\n\n\n使用 geom_text() / geom_label() 添加标签\n\n\n\n\n\n\n7.3.3 图形\n\n\nShow/Hide Code\n# rect 矩形\np +\n    annotate(\n        \"rect\", \n        xmin = c(2, 4),\n        xmax = c(3, 5),\n        ymin = c(20, 10),\n        ymax = c(30, 20),\n        alpha = 0.2,\n        color = \"blue\",\n        fill = \"blue\"\n    )\n\n\n\n\n\n使用 annotate() 添加图形标注\n\n\n\n\nShow/Hide Code\n#  线段\np +\n    annotate(\n        \"segment\",\n        x = 1,\n        xend = 3,\n        y = 25,\n        yend = 15,\n        colour = \"purple\",\n        size = 3,\n        alpha = 0.6\n    )\n\n\n\n\n\n使用 annotate() 添加图形标注\n\n\n\n\nShow/Hide Code\n# segment + arrow 箭头\np +\n    annotate(\n        \"segment\",\n        x = 2,\n        xend = 4,\n        y = 15,\n        yend = 25,\n        colour = \"pink\",\n        size = 3,\n        alpha = 0.6,\n        arrow = arrow()\n    )\n\n\n\n\n\n使用 annotate() 添加图形标注\n\n\n\n\n\n\nShow/Hide Code\np + \n  # 水平线\n  geom_hline(yintercept=25, color=\"orange\", size=1) + \n  # 垂直线\n  geom_vline(xintercept=3, color=\"orange\", size=1)\n\n\n\n\n\n使用 geom_hline() 添加水平线, geom_vline() 添加垂直线\n\n\n\n\n\n\nShow/Hide Code\n# 好像不知道这个到底有啥用\np +\n    annotate(\n        \"pointrange\",\n        x = 3.5,\n        y = 20,\n        ymin = 12,\n        ymax = 28,\n        colour = \"orange\",\n        size = 1,\n        alpha = 0.6\n    )\n\n\n\n\n\n使用 pointrange() 添加一个点和一条线段",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#base-r",
    "href": "scatter.html#base-r",
    "title": "7  Scatter",
    "section": "7.4 Base R",
    "text": "7.4 Base R\n见 R-graph-gallery 的 scatterplot",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#sec-scatter-interactive",
    "href": "scatter.html#sec-scatter-interactive",
    "title": "7  Scatter",
    "section": "7.5 Interactive",
    "text": "7.5 Interactive\n\n\nShow/Hide Code\n# 将mtcars数据集的行名（汽车型号）保存到一个名为'car'的新列中，方便后续调用。\nmtcars$car &lt;- rownames(mtcars)\n\n# p1: 创建一个可交互的散点图。\n# x轴是车重(wt)，y轴是燃油效率(mpg)。\n# 鼠标悬停在点上时，会显示汽车型号(tooltip = car)。\np1 &lt;- ggplot(mtcars, aes(wt, mpg, tooltip = car, data_id = car)) +\n  geom_point_interactive(size = 4)\n\n# p2: 创建一个可交互的水平条形图。\n# x轴是汽车型号，并按燃油效率(mpg)从低到高排序 (reorder(car, mpg))。\n# y轴是燃油效率(mpg)。\n# coord_flip()将图表翻转为水平方向，便于阅读。\np2 &lt;- ggplot(mtcars, aes(x = reorder(car, mpg), y = mpg, tooltip = car, data_id = car)) +\n  geom_col_interactive() +\n  coord_flip()\n\n# 使用patchwork包的 `+` 号，将散点图(p1)和条形图(p2)并排拼接成一张图。\ncombined_plot &lt;- p1 + p2 + plot_layout(ncol = 2)\n\n# 使用ggiraph包的girafe()函数，将拼接好的静态图转换为最终的HTML交互式图表。\ngirafe(ggobj = combined_plot)\n\n\n\n\n交互式散点图\n\n\n\n\nShow/Hide Code\n# 从网络读取世界地图的地理空间数据 (.geojson格式)\nworld_sf &lt;- read_sf(\"https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson\")\n\n# 从地图数据中移除南极洲和格陵兰，因为它们通常很大且没有数据，会影响可视化。\nworld_sf &lt;- world_sf %&gt;%\n  filter(!name %in% c(\"Antarctica\", \"Greenland\"))\n\n# 创建一个包含幸福度指数等指标的示例数据集。\nhappiness_data &lt;- data.frame(\n  Country = c(\"France\", \"Germany\", \"United Kingdom\", \"Japan\", \"China\", \"Vietnam\", \"United States of America\", \"Canada\", \"Mexico\"),\n  Continent = c(\"Europe\", \"Europe\", \"Europe\", \"Asia\", \"Asia\", \"Asia\", \"North America\", \"North America\", \"North America\"),\n  Happiness_Score = rnorm(mean = 30, sd = 20, n = 9),\n  GDP_per_capita = rnorm(mean = 30, sd = 20, n = 9),\n  Social_support = rnorm(mean = 30, sd = 20, n = 9),\n  Healthy_life_expectancy = rnorm(mean = 30, sd = 20, n = 9)\n)\n\n# 使用左连接(left_join)将幸福度数据合并到世界地图数据中。\n# 连接的依据是国家名称 (地图中的 'name' 和 幸福度数据中的 'Country')。\nworld_sf &lt;- world_sf %&gt;%\n  left_join(happiness_data, by = c(\"name\" = \"Country\"))\n\n# p1: 创建散点图，展示人均GDP与幸福度指数的关系。\np1 &lt;- ggplot(world_sf, aes(GDP_per_capita, Happiness_Score, tooltip = name, data_id = name, color = name)) +\n  geom_point_interactive(data = filter(world_sf, !is.na(Happiness_Score)), size = 4) +\n  theme_minimal() +\n  theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\")\n\n# p2: 创建水平条形图，按幸福度指数对国家进行排序。\np2 &lt;- ggplot(world_sf, aes(x = reorder(name, Happiness_Score), y = Happiness_Score, tooltip = name, data_id = name, fill = name)) +\n  geom_col_interactive(data = filter(world_sf, !is.na(Happiness_Score))) +\n  coord_flip() + # 翻转坐标轴，使其成为水平条形图\n  theme_minimal() +\n  theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\")\n\n# p3: 创建分层设色地图 (choropleth map)。\n# 灰色层是完整的世界地图背景。\n# 彩色层是那些有幸福度数据的国家，颜色对应国家名称。\np3 &lt;- ggplot() +\n  geom_sf(data = world_sf, fill = \"lightgrey\", color = \"lightgrey\") +\n  geom_sf_interactive(data = filter(world_sf, !is.na(Happiness_Score)), aes(fill = name, tooltip = name, data_id = name)) +\n  coord_sf(crs = st_crs(3857)) + # 使用特定的地图投影以避免变形\n  theme_void() + # 移除所有背景、网格线和坐标轴文本\n  theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\")\n\n# 使用 patchwork 拼接图形。\n# (p1 + p2) 表示将散点图和条形图并排。\n# / p3 表示将上面拼接好的图放在地图的上方。\n# plot_layout 指定上方图和下方图的高度比例为 1:2。\ncombined_plot &lt;- (p1 + p2) / p3 + plot_layout(heights = c(1, 2))\n\n# 使用 girafe 将最终的组合图转换为可交互的HTML对象。\ngirafe(ggobj = combined_plot)\n\n\n\n\n交互式散点图和地图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#manhattan",
    "href": "scatter.html#manhattan",
    "title": "7  Scatter",
    "section": "7.6 Manhattan",
    "text": "7.6 Manhattan\n曼哈顿图是一种特定的散点图，在基因组学中广泛用于研究全基因组关联研究（Genome Wide Association Study，GWAS）的结果。每个点代表一个遗传变异。X 轴显示其在染色体上的位置，Y 轴表示其与性状的关联程度。\n使用的数据如下：\n\n\nShow/Hide Code\nknitr::kable(head(gwasResults), caption = \"曼哈顿图演示数据\")\n\n\n\n曼哈顿图演示数据\n\n\nSNP\nCHR\nBP\nP\n\n\n\n\nrs1\n1\n1\n0.9148060\n\n\nrs2\n1\n2\n0.9370754\n\n\nrs3\n1\n3\n0.2861395\n\n\nrs4\n1\n4\n0.8304476\n\n\nrs5\n1\n5\n0.6417455\n\n\nrs6\n1\n6\n0.5190959\n\n\n\n\n\n\n7.6.1 基础\nmanhattan 函数非常简单：只需正确识别 4 列数据，它就能很好地完成任务\n\n\nShow/Hide Code\nmanhattan(gwasResults, chr=\"CHR\", bp=\"BP\", snp=\"SNP\", p=\"P\" )\n\n\n\n\n\n基础曼哈顿图\n\n\n\n\n高亮显示曼哈顿图上的 SNP 群体\n\n\nShow/Hide Code\nmanhattan(gwasResults, highlight = snpsOfInterest)\n\n\n\n\n\n高亮显示曼哈顿图上的 SNP 群体\n\n\n\n\n还可以添加文字注释\n\n\nShow/Hide Code\nmanhattan(gwasResults, annotatePval = 0.01)\n\n\n\n\n\n给显著的SNP添加文字注释\n\n\n\n\n从 GWAS 的输出中绘制 qq 图是一种良好的做法。它允许通过随机性比较 p 值的分布与预期分布。得益于 qq 函数，其实现过程非常直接：\n\n\nShow/Hide Code\nqq(gwasResults$P)\n\n\n\n\n\nqq 图\n\n\n\n\n\n\n7.6.2 ggplot\n使用 ggplot2 可高度定制曼哈顿图。见 Manhattan",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#sec-label-pearl",
    "href": "scatter.html#sec-label-pearl",
    "title": "7  Scatter",
    "section": "7.7 Pearl",
    "text": "7.7 Pearl\n\n7.7.1 箭头散点\n带有智慧文本标签的散点图，见 R-graph-gallery :\n\n\nShow/Hide Code\n# --- 1. 准备工作 ---\n# 加载所需的R包\nlibrary(ggrepel) # 用于添加智慧型文本标签，避免重叠\nlibrary(palmerpenguins) # 提供企鹅数据集\nlibrary(randomNames) # 用于生成随机姓名\nlibrary(tidyverse) # 加载一系列数据处理和可视化的包，如ggplot2, dplyr, stringr等\n\n# --- 2. 数据加载与处理 ---\n\n# 从 'palmerpenguins' 包中加载 'penguins' 数据集\ndata(\"penguins\", package = \"palmerpenguins\")\n\n# 移除数据集中所有包含缺失值(NA)的行，以确保数据干净。\npenguins &lt;- drop_na(penguins)\n\n# 生成随机姓名\n# set.seed() 用于设置随机数种子，确保每次运行代码时生成的“随机”结果都完全相同。\n# 这样可以保证实验的可重复性。\nset.seed(2021 + 03 + 27)\n# 为数据集中的每一行（每只企鹅）生成一个随机的名字（仅取名字，不取姓）。\nname_vector &lt;- randomNames(nrow(penguins), which.names = \"first\")\n\n# 创建一个名为 'highlight' 的指示变量（列），用于后续标记。\npenguins &lt;- penguins %&gt;%\n  mutate(\n    name = name_vector, # 将随机生成的名字添加到数据集中\n    highlight = case_when(\n      # case_when 类似于一个 if-else 语句。\n      # 如果 'name' 列的字符串是以 \"C\" 开头的 (str_starts)，\n      str_starts(name, \"C\") ~ name, # 那么 'highlight' 列的值就是这个名字\n      TRUE ~ \"\" # 对于所有其他情况，'highlight' 列的值为空字符串 \"\"\n    )\n  )\n\n# --- 3. 创建基础图形 ---\n\n# 注意 `color = species` 和 `shape = species`。\n# 这意味着每个物种(species)的点都会有不同的颜色和不同的形状。\nplt &lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(\n    aes(color = species, shape = species), # 根据物种区分颜色和形状\n    size = 1.5, # 设置点的大小\n    alpha = 0.8 # 添加一些透明度，因为数据点可能有重叠，透明化有助于观察。\n  ) +\n  # 使用 scale_color_manual() 手动指定点的颜色。\n  scale_color_manual(\n    values = c(\"#386cb0\", \"#fdb462\", \"#7fc97f\") # 为三个物种分别设置颜色\n  )\n\n# --- 4. 添加智慧型文本标签 ---\n\n# 在基础图(plt)上添加 ggrepel 提供的智慧型文本标签层。\nplt &lt;- plt +\n  geom_text_repel(\n    aes(label = highlight), # 标签的内容来自于我们之前创建的'highlight'列。\n    # 只有 'highlight' 列不为空的那些点才会被添加标签。\n    family = \"Poppins\", # 设置标签的字体\n    size = 3, # 设置标签的字号\n    min.segment.length = 0, # 即使标签离点很近，也强制画出连接线段。\n    seed = 42, # 为标签的随机布局设置种子，确保每次渲染位置相同。\n    box.padding = 0.5, # 标签文本框的内边距。\n    max.overlaps = Inf, # 允许显示所有标签，即使它们会重叠（ggrepel会尽力排开）。\n    arrow = arrow(length = unit(0.010, \"npc\")), # 在标签和点之间添加一个箭头。\n    nudge_x = .15, # 在x方向上将标签轻微推动一点距离。\n    nudge_y = .5, # 在y方向上将标签轻微推动一点距离。\n    color = \"grey50\" # 设置标签和连接线的颜色为中灰色。\n  )\n\n# --- 5. 添加标题和进行主题美化 ---\n\n# 在图(plt)上继续添加各种元素\nplt &lt;- plt +\n  # 使用 labs() 添加坐标轴标签、主标题和副标题\n  labs(\n    title = \"Palmer Penguins Data Visualization\",\n    subtitle = \"Scatter plot of flipper lenth vs bill length\",\n    x = \"flip length (mm)\",\n    y = \"bill length (mm)\"\n  ) +\n  # 使用 theme() 函数对图表的非数据元素（如背景、网格线、字体等）进行精细调整。\n  theme(\n    # --- 字体设置 ---\n    # 为图中所有未被单独指定的文本元素设置一个默认字体。\n    text = element_text(family = \"Lobster Two\", size = 8, color = \"black\"),\n\n    # --- 图例(Legend)设置 ---\n    # 自定义图例中的文本（物种名称）\n    legend.text = element_text(size = 9, family = \"Roboto\"),\n    # 自定义图例的标题（\"species\"）\n    legend.title = element_text(face = \"bold\", size = 12, family = \"Roboto\"),\n    # 手动设置图例的位置在绘图区域的右下角。c(1, 0)代表(右,下)。\n    legend.position = c(1, 0),\n    legend.justification = c(1, 0),\n    # 移除图例的背景。\n    legend.background = element_blank(),\n    # 移除图例中每个小图标（key）后面的背景。\n    legend.key = element_blank(),\n\n    # --- 标题(Title)设置 ---\n    # 自定义主标题的字体、大小、样式和颜色。\n    plot.title = element_text(\n      family = \"Lobster Two\",\n      size = 20,\n      face = \"bold\",\n      color = \"#2a475e\"\n    ),\n    # 自定义副标题。\n    plot.subtitle = element_text(\n      family = \"Lobster Two\",\n      size = 15,\n      face = \"bold\",\n      color = \"#1b2838\"\n    ),\n    # 设置标题的位置相对于整个绘图区域对齐。\n    plot.title.position = \"plot\",\n\n    # --- 坐标轴(Axis)设置 ---\n    # 调整坐标轴刻度标签的文本大小和颜色。\n    axis.text = element_text(size = 10, color = \"black\"),\n    # 调整坐标轴标题的文本大小。\n    axis.title = element_text(size = 12),\n    # 移除坐标轴上的刻度短线。\n    axis.ticks = element_blank(),\n    # 将坐标轴线设置为比默认更浅的灰色。\n    axis.line = element_line(colour = \"grey50\"),\n\n    # --- 网格线(Grid)设置 ---\n    # 移除次要网格线。\n    panel.grid.minor = element_blank(),\n    # 移除X轴的主要网格线。\n    panel.grid.major.x = element_blank(),\n    # 保留Y轴的主要网格线，并设置为灰色虚线。\n    panel.grid.major.y = element_line(color = \"#b4aea9\", linetype = \"dashed\"),\n\n    # --- 背景(Background)设置 ---\n    # 为绘图面板（panel，即数据点所在的矩形区域）和整个图表（plot）设置一个浅色的背景。\n    panel.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\"),\n    plot.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\")\n  )\n\nplt\n\n\n\n\n\n箭头散点图\n\n\n\n\n\n\n7.7.2 箭头拟合\n一种美观的带有回归拟合和自动文本排斥的散点图，见 R-graph-gallery :\n\n\n\n箭头拟合散点图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "heatmap.html",
    "href": "heatmap.html",
    "title": "8  Heatmap",
    "section": "",
    "text": "8.1 PKG\n热图是一种数据图形表示，其中矩阵中包含的各个值以颜色形式呈现。\nShow/Hide Code\n# 需要的R包\nlibrary(tidyverse)\nlibrary(RColorBrewer)\nlibrary(hrbrthemes) # 美化主题\nlibrary(viridis) # 渐变色\nlibrary(plotly) # 交互式图形\nlibrary(lattice) # 另一种绘图系统\nlibrary(RColorBrewer) # 调色板\nlibrary(viridisLite) # 调色板\nlibrary(latticeExtra) # 扩展lattice功能",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#heatmap",
    "href": "heatmap.html#heatmap",
    "title": "8  Heatmap",
    "section": "8.2 heatmap()",
    "text": "8.2 heatmap()\nheatmap() 是Base R 的函数，带有聚类功能，胜出一筹。\n\n8.2.1 基础\n\n\nShow/Hide Code\ndata &lt;- as.matrix(mtcars)\n\nheatmap(data)\n\n\n\n\n\n基础热力图\n\n\n\n\n所有的变化都被 hp 和 disp 这两个与其他变量相比具有非常高的值的变量所吸收。我们需要对数据进行标准化。\n\n\nShow/Hide Code\nheatmap(data, scale=\"column\")\n\n\n\n\n\nscale=“column”对列进行标化\n\n\n\n\n解读：\n\n行 (Rows)：右侧的标签（Toyota Corona, Porsche 914-2 等）代表了 mtcars 数据集中的32款不同汽车；\n列 (Columns)：底部的标签（cyl, am, mpg, hp 等）代表了汽车的11个性能指标。\n浅黄色代表较低的数值，深红色代表较高的数值。\n在树状图上彼此靠近的汽车，意味着它们的各项性能指标综合来看更加相似。\n例如: 请看图的底部，Maserati Bora、Chrysler Imperial 和 Cadillac Fleetwood 被紧密地聚在一起。这说明它们在整体性能上非常相似（通常是大排量、高马力、高油耗、车身重）。\n相对地，图顶部的 Toyota Corona、Datsun 710 等车也聚在一起，它们通常是性能相反的另一类车（小排量、低油耗）。\n\n\n\n8.2.2 不聚类\n刚才的图由于聚类而重新排序，可以指定不排序。\n\n\nShow/Hide Code\nheatmap(data, Colv = NA, Rowv = NA, scale=\"column\")\n\n\n\n\n\n不聚类的热力图\n\n\n\n\n\n\n8.2.3 配色\n\n\nShow/Hide Code\n# 自带调色板\nheatmap(data, scale=\"column\", col = cm.colors(256))\n\n\n\n\n\n不同配色的热力图\n\n\n\n\nShow/Hide Code\nheatmap(data, scale=\"column\", col = terrain.colors(256))\n\n\n\n\n\n不同配色的热力图\n\n\n\n\nShow/Hide Code\n# RColorBrewer 调色板\n# 需要library(RColorBrewer)\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\nheatmap(data, scale=\"column\", col = coul)\n\n\n\n\n\n不同配色的热力图\n\n\n\n\n\n\n8.2.4 布局\n\n\nShow/Hide Code\n# 使用自定义调色板，去除聚类，添加坐标轴和标题\nheatmap(\n    data,\n    Colv = NA, # 不对列进行聚类\n    Rowv = NA, # 不对行进行聚类\n    scale = \"column\", # 对列进行标准化\n    col = coul, # 使用自定义调色板\n    xlab = \"variable\", # x轴标签\n    ylab = \"car\",      # y轴标签\n    main = \"heatmap\"   # 图标题\n)\n\n\n\n\n\n热力图布局示例\n\n\n\n\nShow/Hide Code\n# 修改行标签字号和内容，使用蓝色调色板\nheatmap(\n    data,\n    scale = \"column\", # 对列进行标准化\n    cexRow = 1.5, # 行标签字号\n    labRow = paste(\"new_\", rownames(data), sep = \"\"), # 修改行标签内容\n    col = colorRampPalette(brewer.pal(8, \"Blues\"))(25) # 使用蓝色调色板\n)\n\n\n\n\n\n热力图布局示例\n\n\n\n\n\n\n8.2.5 颜色条\n\n\nShow/Hide Code\n# 按行名首字母分组\nmy_group &lt;- as.numeric(as.factor(substr(rownames(data), 1, 1)))\n# 为每组分配颜色\ncolSide &lt;- brewer.pal(9, \"Set1\")[my_group]\n# 生成主热图颜色\ncolMain &lt;- colorRampPalette(brewer.pal(8, \"Blues\"))(25)\n# 绘制带有颜色条的热力图\nheatmap(\n    data,\n    Colv = NA,         # 不对列聚类\n    Rowv = NA,         # 不对行聚类\n    scale = \"column\",  # 对列标准化\n    RowSideColors = colSide, # 行侧颜色条\n    col = colMain      # 主热图颜色\n)\n\n\n\n\n\n左侧添加颜色条",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#geom_tile",
    "href": "heatmap.html#geom_tile",
    "title": "8  Heatmap",
    "section": "8.3 geom_tile()",
    "text": "8.3 geom_tile()\ngeom_tile() 是源于 ggplot2 的瓦片函数，适用于绘制热图。\n\n8.3.1 基础\n\n\nShow/Hide Code\n# 构造示例数据\nx &lt;- LETTERS[1:20] # X轴标签，A到T\ny &lt;- paste0(\"var\", seq(1, 20)) # Y轴标签，var1到var20\ndata &lt;- expand.grid(X = x, Y = y) # 生成所有组合\ndata$Z &lt;- runif(400, 0, 5) # 生成均匀分布随机数，runif(n, min, max)\n\n# 绘制热图\nggplot(data, aes(X, Y, fill = Z)) +\n    geom_tile() # 用颜色填充瓦片\n\n\n\n\n\ngeom_tile() 基础热力图\n\n\n\n\n\n\n8.3.2 颜色\n\n\nShow/Hide Code\n# scale_fill_gradient 线性，灵活，但需自己选色。\n# scale_fill_viridis 自动、专业且色盲友好，推荐用于科学数据可视化。\n\n# 构造示例数据\nx &lt;- LETTERS[1:20]\ny &lt;- paste0(\"var\", seq(1,20))\ndata &lt;- expand.grid(X=x, Y=y)\ndata$Z &lt;- runif(400, 0, 5)\n\n# 1. 使用蓝色渐变色\nggplot(data, aes(X, Y, fill= Z)) + \n    geom_tile() +\n    scale_fill_gradient(low=\"white\", high=\"blue\") + # 渐变色从白到蓝\n    theme_ipsum()\n\n\n\n\n\n不同配色的 geom_tile() 热力图\n\n\n\n\nShow/Hide Code\n# 2. 使用 RColorBrewer 的 RdPu 调色板\nggplot(data, aes(X, Y, fill= Z)) + \n    geom_tile() +\n    scale_fill_distiller(palette = \"RdPu\") + # 使用 RdPu 调色板\n    theme_ipsum()\n\n\n\n\n\n不同配色的 geom_tile() 热力图\n\n\n\n\nShow/Hide Code\n# 3. 使用 viridis 包的配色\nggplot(data, aes(X, Y, fill= Z)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) + # 使用 viridis 渐变色\n    theme_ipsum()\n\n\n\n\n\n不同配色的 geom_tile() 热力图\n\n\n\n\n\n\n8.3.3 pivot\n\n\nShow/Hide Code\n# volcano 数据集是 R 自带的地形高度矩阵\nvolcano |&gt;\n    as_tibble() |&gt; # 转为 tibble 数据框\n    rowid_to_column(var = \"X\") |&gt; # 添加行号作为 X 坐标\n    pivot_longer(\n        cols = !X, # 除 X 外的所有列\n        names_to = \"Y\", # 列名作为 Y 坐标\n        values_to = \"Z\" # 值作为高度\n    ) |&gt;\n    mutate(Y = as.numeric(gsub(\"V\", \"\", Y))) |&gt; # Y 坐标转为数值型\n\n    # 可视化\n    ggplot(aes(X, Y, fill = Z)) +\n        geom_tile() + # 用颜色填充瓦片\n        theme_ipsum() + # 美化主题\n        theme(legend.position = \"none\") # 去除图例\n\n\n\n\n\nvolcano 热力图\n\n\n\n\n\n\n8.3.4 plotly\n\n\nShow/Hide Code\n# 构造示例数据\nx &lt;- LETTERS[1:20] # X轴标签，A到T\ny &lt;- paste0(\"var\", seq(1, 20)) # Y轴标签，var1到var20\ndata &lt;- expand.grid(X = x, Y = y) # 生成所有组合\ndata$Z &lt;- runif(400, 0, 5) # 生成均匀分布随机数\n\n# 添加自定义文本用于交互式提示\ndata &lt;- data |&gt;\n    mutate(\n        text = paste0(\n            \"x: \", x, \"\\n\",\n            \"y: \", y, \"\\n\",\n            \"Value: \", round(Z, 2), \"\\n\",\n            \"What else?\"\n        )\n    )\n\n# 使用ggplot2绘制热图，并将text映射到交互式提示\np &lt;- ggplot(data, aes(X, Y, fill = Z, text = text)) +\n    geom_tile() +\n    theme_ipsum()\n\n# 使用plotly实现交互式热图，显示自定义tooltip（悬浮提示）\nggplotly(p, tooltip = \"text\")\n\n\n\n\nplotly 交互式热力图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#interactive",
    "href": "heatmap.html#interactive",
    "title": "8  Heatmap",
    "section": "8.4 Interactive",
    "text": "8.4 Interactive\n见 heatmap, `有以下几种方式：\n\nplotly: 如前所述。\nd3heatmap: 用 Base R 的 heatmap() 相同的函数语法制作交互式热图。\nheatmaply: 最灵活的选项，允许多种不同的自定义。",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#time-series",
    "href": "heatmap.html#time-series",
    "title": "8  Heatmap",
    "section": "8.5 Time series",
    "text": "8.5 Time series\n热力图在可视化时间序列方面是一个非常不错的选择，特别是研究的时间框架是重复的，比如周。\n\n\nShow/Hide Code\n#| fig-cap: 时间序列热力图\n\n--- 1. 加载所需的R包 ---\nlibrary(ggplot2)\nlibrary(dplyr)         # 用于更方便的数据处理\nlibrary(viridis)       # 提供对色盲友好的调色板\nlibrary(Interpol.T)    # 用于加载数据集\nlibrary(lubridate)     # 用于方便地处理日期和时间\nlibrary(ggExtra)       # 提供额外的主题功能，如removeGrid()\nlibrary(tidyr)         # 用于数据整理，如此处的fill()\n\n# --- 2. 加载和初步处理数据 ---\n# 从 Interpol.T 包中加载 Trentino_hourly_T 数据集\ndata &lt;- data(Trentino_hourly_T, package = \"Interpol.T\")\n# 重命名数据框的前5个列名，使其更具可读性\nnames(h_d_t)[1:5] &lt;- c(\"stationid\", \"date\", \"hour\", \"temp\", \"flag\")\n\n# 将数据框转换为dplyr的tbl_df格式，并筛选出特定气象站（T0001）的数据\ndf &lt;- tbl_df(h_d_t) %&gt;%\n  filter(stationid == \"T0001\")\n\n# 使用lubridate包从date列中提取年、月、日信息，并创建新列\n# month()中的label=TRUE使月份显示为缩写（如 Jan, Feb），而不是数字\ndf &lt;- df %&gt;% mutate(\n  year = year(date),\n  month = month(date, label = TRUE),\n  day = day(date)\n)\n\n# 使用lubridate的ymd()函数确保date列是标准的日期格式\n# 这一步对于当前绘图不是必需的，但对于后续可能的数据分析很有用\ndf$date &lt;- ymd(df$date)\n\n# --- 3. 清理工作环境 ---\n# 删除加载数据时附带的、后续不再需要的中间变量，以节省内存\nrm(list = c(\n  \"h_d_t\", \"mo_bias\", \"Tn\", \"Tx\",\n  \"Th_int_list\", \"calibration_l\",\n  \"calibration_shape\", \"Tm_list\"\n))\n\n# --- 4. 创建用于绘图的最终数据框 ---\n# 选择绘图所需的列，并填充缺失的温度值\ndf &lt;- df %&gt;%\n  select(stationid, day, hour, month, year, temp) %&gt;%\n  fill(temp) # 使用前一个非缺失值来填充NA\n\n# 填充缺失值(NA)的注意事项：\n# 这段代码是为了演示可视化技术。\n# 数据集中有5个缺失的小时温度值。\n# 作者使用了tidyr包的fill()函数，用前一个小时的值来替换NA。\n# 这只是为了让图表好看的快速修复方法，在真实的数据分析中请不要这样做！\n# 应该使用更严谨的方法，如 tidyr 的 replace_NA 或 complete(with fill)，\n# 或者使用更专业的插补方法来处理缺失值。\n\n# 获取当前正在分析的气象站ID，用于图表标题\nstatno &lt;- unique(df$stationid)\n\n######## 绘图部分开始 #####################\n\n# --- 5. 使用ggplot2创建图表 ---\n# 初始化ggplot对象，设置核心美学映射：x轴为天，y轴为小时，填充色为温度\np &lt;- ggplot(df, aes(day, hour, fill = temp)) +\n  # 使用瓦片图层来创建热图，并给瓦片之间添加细微的白色边框\n  geom_tile(color = \"white\", size = 0.1) +\n  # 使用viridis调色板填充颜色，对色盲友好。name参数设置图例标题\n  scale_fill_viridis(name = \"Hourly Temps C\", option = \"C\")\n\n# 创建分面网格，按年份(行)和月份(列)将图表分割成多个面板\np &lt;- p + facet_grid(year ~ month)\n\n# 反转y轴（小时），使得0点在顶部，23点在底部，更符合直觉\np &lt;- p + scale_y_continuous(trans = \"reverse\", breaks = unique(df$hour))\n\n# 自定义x轴（天）的刻度，使其更清晰\np &lt;- p + scale_x_continuous(breaks = c(1, 10, 20, 31))\n\n# --- 6. 精细调整图表主题和标签 ---\n# 应用一个简洁的主题，并设置基础字体大小\np &lt;- p + theme_minimal(base_size = 8)\n\n# 添加图表标题和坐标轴标签\np &lt;- p + labs(title = paste(\"Hourly Temps - Station\", statno), x = \"Day\", y = \"Hour Commencing\")\n\n# 对图表的各种视觉元素进行精细调整\np &lt;- p + theme(legend.position = \"bottom\") + # 将图例置于底部\n  theme(plot.title = element_text(size = 14)) + # 设置主标题字体大小\n  theme(axis.text.y = element_text(size = 6)) + # 设置y轴文字大小\n  theme(strip.background = element_rect(colour = \"white\")) + # 设置分面标签的背景\n  theme(plot.title = element_text(hjust = 0)) + # 标题左对齐\n  theme(axis.ticks = element_blank()) + # 隐藏坐标轴刻度线\n  theme(axis.text = element_text(size = 7)) + # 设置坐标轴文字大小\n  theme(legend.title = element_text(size = 8)) + # 设置图例标题大小\n  theme(legend.text = element_text(size = 6)) + # 设置图例文本大小\n  removeGrid() # 使用ggExtra包的函数移除背景网格线，使图表更干净\n\n# --- 7. 显示图表 ---\n# 在R的绘图窗口中打印（显示）最终生成的图表对象\n# 建议在显示前先将绘图窗口拉大，以获得最佳视觉效果\np\n\n\n这段代码 生成了时间序列热力图。显示了气象站的每小时温度变化。\n\n\n\n时间序列热力图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#levelplot",
    "href": "heatmap.html#levelplot",
    "title": "8  Heatmap",
    "section": "8.6 levelplot()",
    "text": "8.6 levelplot()\n\n8.6.1 基础\n\n\nShow/Hide Code\n# 创建示例数据\nx &lt;- seq(1, 10, length.out = 20)\ny &lt;- seq(1, 10, length.out = 20)\ndata &lt;- expand.grid(X = x, Y = y)\ndata$Z &lt;- runif(400, 0, 5)\n\n# levelplot() 绘制基础热力图\nlevelplot(Z ~ X * Y, data = data)\n\n\n\n\n\nlevelplot() 基础热力图\n\n\n\n\n\n\n8.6.2 povit\n\n\nShow/Hide Code\n# 构造一个 10x10 的随机矩阵作为示例数据\ndata &lt;- matrix(runif(100, 0, 5), 10, 10)\ncolnames(data) &lt;- letters[1:10] # 设置列名为 a~j\nrownames(data) &lt;- paste(\"row\", 1:10) # 设置行名为 row 1 ~ row 10\n\n# 使用 levelplot() 绘制热力图\nlevelplot(data)\n\n\n\n\n\nlevelplot() 宽数据透视热力图示例\n\n\n\n\n\n\n8.6.3 翻转\n\n\nShow/Hide Code\n# 构造一个 10x10 的随机矩阵作为示例数据\ndata &lt;- matrix(runif(100, 0, 5), 10, 10)\ncolnames(data) &lt;- letters[c(1:10)] # 设置列名为 a~j\nrownames(data) &lt;- paste(rep(\"row\", 10), c(1:10), sep = \" \") # 设置行名为 row 1 ~ row 10\n\n# 翻转行顺序并转置矩阵，使热图的 y 轴从上到下递增\n# t() 转置，data[nrow(data):1, ] 反转行顺序\nlevelplot(\n    t(data[nrow(data):1, ]),         # 翻转并转置数据\n    col.regions = heat.colors(100)   # 使用 heat.colors 调色板\n)\n\n\n\n\n\n翻转 levelplot 热力图\n\n\n\n\n\n\n8.6.4 颜色\n\n\nShow/Hide Code\n# 1: R自带调色板\nlevelplot(volcano, col.regions = terrain.colors(100)) # 使用 terrain.colors() 原生调色板，可尝试 cm.colors() 或 terrain.colors()\n\n\n\n\n\n不同颜色的 levelplot() 热力图\n\n\n\n\nShow/Hide Code\n# 2: RColorBrewer 调色板\n# library(RColorBrewer)\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\nlevelplot(volcano, col.regions = coul) # 使用 RColorBrewer 的 PiYG 调色板\n\n\n\n\n\n不同颜色的 levelplot() 热力图\n\n\n\n\nShow/Hide Code\n# 3: Viridis 渐变色\n# library(viridisLite)\ncoul &lt;- viridis(100)\nlevelplot(volcano, col.regions = coul) # 使用 viridis 渐变色\n\n\n\n\n\n不同颜色的 levelplot() 热力图\n\n\n\n\nShow/Hide Code\nlevelplot(volcano, col.regions = magma(100)) # 使用 magma 渐变色\n\n\n\n\n\n不同颜色的 levelplot() 热力图\n\n\n\n\n\n\n8.6.5 平滑\n\n\nShow/Hide Code\n# 加载 latticeExtra 包以获得 panel.2dsmoother\n# library(latticeExtra)\n\n# 创建示例数据\nset.seed(1)\ndata &lt;- data.frame(x = rnorm(100), y = rnorm(100))\ndata$z &lt;- with(data, x * y + rnorm(100, sd = 1))\n\n# 使用 levelplot 绘制散点热力图，并叠加平滑层\nlevelplot(\n  z ~ x * y,\n  data,\n  panel = panel.levelplot.points, # 显示数据点\n  cex = 1.2\n) +\n  # 叠加二维平滑层，n 控制平滑网格的分辨率\n  layer_(panel.2dsmoother(..., n = 200))\n\n\n\n\n\n平滑的 levelplot() 热力图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#pearl",
    "href": "heatmap.html#pearl",
    "title": "8  Heatmap",
    "section": "8.7 Pearl",
    "text": "8.7 Pearl\n这是一个非常优秀的数据可视化作品，利用 R 语言的 ggplot2 包将美国各州从1928年到2011年的麻疹发病率数据绘制成了热图。\n代码通过逐层叠加，精细地控制了图表的每一个细节，从而清晰地讲述了“疫苗引入后麻疹病例急剧下降”这一核心故事。\n见 vaccination-heatmap\n\n\n\n麻疹疫苗接种带来的影响",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "correlogram.html",
    "href": "correlogram.html",
    "title": "9  Correlogram",
    "section": "",
    "text": "9.1 PKG\nGGally::ggpairs() 可以绘制好看的相关性图：\nShow/Hide Code\nlibrary(GGally)\nlibrary(tidyverse)\nlibrary(corrgram) # 相关性图\nlibrary(ellipse) # 椭圆\nlibrary(RColorBrewer) # 调色板\nlibrary(car) # 线性回归诊断",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#ggpairs",
    "href": "correlogram.html#ggpairs",
    "title": "9  Correlogram",
    "section": "9.2 ggpairs()",
    "text": "9.2 ggpairs()\n\n9.2.1 基础\n\n对角线是单变量分布密度曲线\n右上方是相关系数和显著性\n左下方是散点图。\n\n\n\nShow/Hide Code\n# 构造示例数据\ndata &lt;- data.frame(\n  v1 = 1:100 + rnorm(100, sd = 20),\n  v2 = 1:100 + rnorm(100, sd = 27),\n  v3 = rep(1, 100) + rnorm(100, sd = 1)\n)\ndata$v4 = data$v1**2\ndata$v5 = -(data$v1**2)\n\n# 绘图\nggpairs(data, title = \"correlogram with ggpairs()\")\n\n\n\n\n\nggpairs() 绘制相关性图\n\n\n\n\n\n\n9.2.2 split\n通过 ggpairs() 的 mapping 参数可以指定不同的美学映射，从而实现分组绘图：\n\n\nShow/Hide Code\n# 使用了color参数\nggpairs(flea, columns = 2:4, aes(colour=species)) \n\n\n\n\n\nggpairs() 分组绘图\n\n\n\n\n带有颜色的 ggpairs() 相关性图，非常美观：\n\n\nShow/Hide Code\nggpairs(\n    mtcars[, c(1, 3:7)],\n    columnLabels = c(\n        \"Miles\",\n        \"Displacement\",\n        \"Horsepower\",\n        \"Rear axle ratio\",\n        \"Weight\",\n        \"1/4 mile time\"\n    ),\n    # 这里将 mtcars$vs 转换为因子，作为分组变量上色\n    aes(color = factor(mtcars$vs)),  # &lt;--- 主要修改在这里\n    # 上三角显示相关系数\n    upper = list(continuous = wrap('cor', size = 3)),\n    # 下三角显示分组直方图\n    lower = list(combo = wrap(\"facethist\", bins = 30)),\n    # 对角线显示密度图\n    diag = list(continuous = wrap(\"densityDiag\", alpha = 0.5)),\n    # 图标题\n    title = \"Scatterplot matrix of `mtcars` Grouped by Engine\"\n)\n\n\n\n\n\n带有颜色的 ggpairs() 相关性图\n\n\n\n\n\n\n9.2.3 type\nupper、lower 和 diag 参数修改图的类型\n\n\nShow/Hide Code\n# 使用 ggpairs() 并通过 upper、lower 参数自定义图的类型\nggpairs(\n    reshape::tips[, c(1, 3, 4, 2)],\n    # 上三角连续型变量用密度图，组合型用无分面箱线图\n    upper = list(continuous = \"density\", combo = \"box_no_facet\"),\n    # 下三角连续型变量用散点图，组合型用无分面点图\n    lower = list(continuous = \"points\", combo = \"dot_no_facet\")\n)\n\n\n\n\n\nupper、lower 和 diag 参数 修改图的类型",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#ggcorr",
    "href": "correlogram.html#ggcorr",
    "title": "9  Correlogram",
    "section": "9.3 ggcorr()",
    "text": "9.3 ggcorr()\nggcorr() 可以绘制一种朴素的相关性图\n\n\nShow/Hide Code\n# data是之前构建的数据\nggcorr(data, method = c(\"everything\", \"pearson\"))\n\n\n\n\n\nggcorr() 绘制相关性图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#corrgram",
    "href": "correlogram.html#corrgram",
    "title": "9  Correlogram",
    "section": "9.4 corrgram()",
    "text": "9.4 corrgram()\n\n\nShow/Hide Code\n# 第一种：下三角为色块，上三角为饼图，主对角线为变量名\ncorrgram(\n    mtcars, \n    order = TRUE, \n    lower.panel = panel.shade,    # 下三角用色块表示相关性\n    upper.panel = panel.pie,      # 上三角用饼图表示相关性\n    text.panel = panel.txt,       # 主对角线显示变量名\n    main = \"Car Milage Data in PC2/PC1 Order\"\n) \n\n\n\n\n\ncorrgram() 绘制相关性图\n\n\n\n\nShow/Hide Code\n# 第二种：下三角为椭圆，上三角为点图，对角线为极值\ncorrgram(\n    mtcars, \n    order = TRUE, \n    lower.panel = panel.ellipse,  # 下三角用椭圆表示相关性\n    upper.panel = panel.pts,      # 上三角用点图表示相关性\n    text.panel = panel.txt,       # 主对角线显示变量名\n    diag.panel = panel.minmax,    # 对角线显示极值\n    main = \"Car Milage Data in PC2/PC1 Order\"\n) \n\n\n\n\n\ncorrgram() 绘制相关性图\n\n\n\n\nShow/Hide Code\n# 第三种：下三角为色块，上三角不显示，主对角线为变量名，不排序\ncorrgram(\n    mtcars, \n    order = NULL, \n    lower.panel = panel.shade,    # 下三角用色块表示相关性\n    upper.panel = NULL,           # 上三角不显示\n    text.panel = panel.txt,       # 主对角线显示变量名\n    main = \"Car Milage Data (unsorted)\"\n)\n\n\n\n\n\ncorrgram() 绘制相关性图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#椭圆",
    "href": "correlogram.html#椭圆",
    "title": "9  Correlogram",
    "section": "9.5 椭圆",
    "text": "9.5 椭圆\n\n\nShow/Hide Code\n# library(ellipse) # 椭圆包\n# library(RColorBrewer) # 调色板包\n\n# 计算 mtcars 数据集的相关系数矩阵\ndata &lt;- cor(mtcars)  # 计算相关系数矩阵\n\n# 用 RColorBrewer 构建 100 个颜色的调色板\nmy_colors &lt;- brewer.pal(5, \"Spectral\")  # 选择5种“Spectral”配色\nmy_colors &lt;- colorRampPalette(my_colors)(100)  # 插值生成100种颜色\n\n# 对相关系数矩阵进行排序（这里以第一行相关性为依据排序）\nord &lt;- order(data[1, ])  # 获取排序索引\ndata_ord &lt;- data[ord, ord]  # 按排序索引重新排列矩阵\n\n# 绘制椭圆相关性图\nplotcorr(\n    data_ord,  # 排序后的相关系数矩阵\n    col = my_colors[data_ord * 50 + 50],  # 根据相关系数映射颜色\n    mar = c(1, 1, 1, 1)  # 设置图形边距\n)\n\n\n\n\n\n椭圆相关性图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#散点",
    "href": "correlogram.html#散点",
    "title": "9  Correlogram",
    "section": "9.6 散点",
    "text": "9.6 散点\nplot() 可以绘制散点图矩阵：\n\n\nShow/Hide Code\n# 选择 mtcars 数据集的第1、3、4、5、6列，构建数据框\ndata &lt;- mtcars[, c(1, 3:6)]\n\n# 绘制散点图矩阵\n# pch = 20 表示点的形状为实心圆\n# cex = 1.5 表示点的大小为1.5倍\n# col = \"#69b3a2\" 设置点的颜色为绿色系\nplot(data, pch = 20, cex = 1.5, col = \"#69b3a2\")\n\n\n\n\n\nplot() 散点",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#分组散点",
    "href": "correlogram.html#分组散点",
    "title": "9  Correlogram",
    "section": "9.7 分组散点",
    "text": "9.7 分组散点\ncar::scatterplotMatrix() 可以绘制分组散点图矩阵：\n\n\nShow/Hide Code\n# 使用 R 自带的 mtcars 数据集\ndata &lt;- mtcars\n\n# 根据气缸数（cyl）生成调色板\nmy_colors &lt;- brewer.pal(nlevels(as.factor(data$cyl)), \"Set2\")\n\n# 绘制分组散点图矩阵\nscatterplotMatrix(\n    ~ mpg + disp + drat | cyl,  # 选择 mpg、disp、drat 三个变量，并按 cyl 分组\n    data = data,                # 数据来源\n    reg.line = \"\",              # 不添加回归线\n    smoother = \"\",              # 不添加平滑曲线\n    col = my_colors,            # 设置分组颜色\n    smoother.args = list(col = \"grey\"), # 平滑曲线颜色（虽然未用到）\n    cex = 1.5,                  # 点的大小\n    pch = c(15, 16, 17),        # 不同分组的点形状\n    main = \"按气缸数分组的散点图矩阵\" # 图标题\n)\n\n\n\n\n\n分组散点图矩阵",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "bubble.html",
    "href": "bubble.html",
    "title": "10  Bubble",
    "section": "",
    "text": "10.1 PKG\nShow/Hide Code\n# 加载必要的包\nlibrary(tidyverse)    # 数据处理和可视化\nlibrary(gapminder)    # 全球发展数据集\nlibrary(hrbrthemes)   # 主题样式\nlibrary(viridis)      # 配色方案\nlibrary(plotly)       # 交互式图表",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#size",
    "href": "bubble.html#size",
    "title": "10  Bubble",
    "section": "10.2 size",
    "text": "10.2 size\n气泡图（Bubble）是一种散点图，增加了第三个维度：通过点的尺寸来表示另一个数值变量的值。\n\n\nShow/Hide Code\n# 筛选2007年的数据，去除年份列\ndata &lt;- gapminder |&gt; filter(year == \"2007\") |&gt; dplyr::select(-year)\n\n# 创建气泡图：x轴为人均GDP，y轴为预期寿命，size为人口数量\nggplot(data, aes(x = gdpPercap, y = lifeExp, size = pop)) +\n  geom_point(alpha = 0.7) +           # 透明度设为0.7\n  theme(legend.position = \"bottom\")    # 图例放在底部\n\n\n\n\n\n用size来制作气泡图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#scale_size",
    "href": "bubble.html#scale_size",
    "title": "10  Bubble",
    "section": "10.3 scale_size()",
    "text": "10.3 scale_size()\n通过scale_size()可以调整气泡的大小。range 和 name 参数设置气泡的大小范围和图例名称。\n\n\nShow/Hide Code\ndata |&gt;\n  arrange(desc(pop)) |&gt;                              # 按人口数量降序排列\n  mutate(country = factor(country, country)) |&gt;      # 将国家名转换为因子\n  ggplot(aes(x = gdpPercap, y = lifeExp, size = pop)) +\n  geom_point(alpha = 0.5) +                          # 设置点的透明度\n  scale_size(range = c(.1, 24), name = \"Population (M)\")  # 调整气泡大小范围和图例名称\n\n\n\n\n\nscale_size() 调整气泡大小",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#color",
    "href": "bubble.html#color",
    "title": "10  Bubble",
    "section": "10.4 color",
    "text": "10.4 color\n增加第四个维度：颜色（color）\n\n\nShow/Hide Code\ndata |&gt;\n  arrange(desc(pop)) |&gt;     # 按人口数量降序排列\n  mutate(country = factor(country, country)) |&gt;  # 将国家名转换为因子\n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +  # 添加颜色美学映射\n    geom_point(alpha=0.5) +   # 设置点的透明度\n    scale_size(range = c(.1, 24), name=\"Population (M)\")  # 调整气泡大小范围\n\n\n\n\n\n使用color来区分不同的continent",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#pretty",
    "href": "bubble.html#pretty",
    "title": "10  Bubble",
    "section": "10.5 Pretty",
    "text": "10.5 Pretty\n\n\nShow/Hide Code\n# library(ggplot2)\n# library(dplyr)\n# library(hrbrthemes)\n# library(viridis)\n\ndata |&gt;\n  arrange(desc(pop)) |&gt;                                        # 按人口数量降序排列\n  mutate(country = factor(country, country)) |&gt;                # 将国家名转换为因子\n  ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, fill = continent)) +  # 使用fill而不是color\n  geom_point(alpha = 0.5, shape = 21, color = \"black\") +       # 设置点的形状和边框颜色\n  scale_size(range = c(.1, 24), name = \"Population (M)\") +     # 调整气泡大小范围\n  scale_fill_viridis(discrete = TRUE, guide = FALSE, option = \"A\") +  # 使用viridis配色方案\n  theme_ipsum() +                                               # 应用ipsum主题\n  theme(legend.position = \"bottom\") +                          # 图例位置\n  ylab(\"Life Expectancy\") +                                    # y轴标签\n  xlab(\"Gdp per Capita\") +                                     # x轴标签\n  theme(legend.position = \"none\")                              # 隐藏图例\n\n\n\n\n\n使用pretty的配色方案美化",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#interactive",
    "href": "bubble.html#interactive",
    "title": "10  Bubble",
    "section": "10.6 Interactive",
    "text": "10.6 Interactive\n\n\nShow/Hide Code\n# library(ggplot2)\n# library(dplyr)\n# library(plotly)\n# library(viridis)\n# library(hrbrthemes)\n\n# 从gapminder包中获取数据集\nlibrary(gapminder)\ndata &lt;- gapminder |&gt; filter(year == \"2007\") |&gt; dplyr::select(-year)\n\n# 创建交互式版本\np &lt;- data |&gt;\n  mutate(gdpPercap = round(gdpPercap, 0)) |&gt;     # 四舍五入人均GDP\n  mutate(pop = round(pop / 1000000, 2)) |&gt;       # 转换人口为百万单位并四舍五入\n  mutate(lifeExp = round(lifeExp, 1)) |&gt;         # 四舍五入预期寿命\n\n  # 重新排序国家，让大气泡在上面\n  arrange(desc(pop)) |&gt;\n  mutate(country = factor(country, country)) |&gt;\n\n  # 为工具提示准备文本\n  mutate(\n    text = paste(\n      \"Country: \",\n      country,\n      \"\\nPopulation (M): \",\n      pop,\n      \"\\nLife Expectancy: \",\n      lifeExp,\n      \"\\nGdp per capita: \",\n      gdpPercap,\n      sep = \"\"\n    )\n  ) |&gt;\n\n  # 经典的ggplot绘图\n  ggplot(aes(\n    x = gdpPercap,\n    y = lifeExp,\n    size = pop,\n    color = continent,\n    text = text\n  )) +\n  geom_point(alpha = 0.7) +                                  # 设置点的透明度\n  scale_size(range = c(1.4, 19), name = \"Population (M)\") + # 调整气泡大小范围\n  scale_color_viridis(discrete = TRUE, guide = FALSE) +     # 使用viridis配色方案\n  theme_ipsum() +                                            # 应用ipsum主题\n  theme(legend.position = \"none\")                           # 隐藏图例\n\n# 转换为交互式图表\nggplotly(p, tooltip = \"text\")\n\n\n\n\n使用plotly制作交互式气泡图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#pearl",
    "href": "bubble.html#pearl",
    "title": "10  Bubble",
    "section": "10.7 Pearl",
    "text": "10.7 Pearl\n带有文字标签的散点图，见 Section 7.7。",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html",
    "href": "connected-scatter.html",
    "title": "11  Conn-Scatter",
    "section": "",
    "text": "11.1 PKG\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(hrbrthemes) # 主题\nlibrary(babynames) # 数据集\nlibrary(ggrepel) # 标签\nlibrary(dygraphs)      # 用于绘制交互式时间序列图\nlibrary(xts)           # 用于数据框与 xts 格式转换\nlibrary(tidyverse)     # 数据处理\nlibrary(lubridate)     # 处理日期时间",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#基础",
    "href": "connected-scatter.html#基础",
    "title": "11  Conn-Scatter",
    "section": "11.2 基础",
    "text": "11.2 基础\ngeom_point() 和 geom_line() 组合在一起。\n\n\nShow/Hide Code\n# 读取数据，并将日期列转换为 Date 类型\ndata &lt;- read.table(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv\", header=T)\ndata$date &lt;- as.Date(data$date)\n\n# 取数据的最后10行，绘制连接散点图\ndata |&gt;\n    tail(10) |&gt;\n    ggplot(aes(x = date, y = value)) +\n    geom_line() +   # 添加连线\n    geom_point()    # 添加散点\n\n\n\n\n\n连接散点图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#主题",
    "href": "connected-scatter.html#主题",
    "title": "11  Conn-Scatter",
    "section": "11.3 主题",
    "text": "11.3 主题\n使用 hrbrthemes::theme_ipsum() 函数自定义主题。\n\n\nShow/Hide Code\n# 取数据的最后10行，绘制连接散点图，并自定义主题\ndata |&gt;\n    tail(10) |&gt;\n    ggplot(aes(x = date, y = value)) +\n    geom_line(color = \"grey\") +  # 添加灰色连线\n    geom_point(shape = 21, color = \"black\", fill = \"#69b3a2\", size = 6) +  # 添加带填充色的点\n    theme_ipsum() +  # 应用 hrbrthemes 的主题\n    ggtitle(\"Evolution of bitcoin price\")  # 添加标题\n\n\n\n\n\ntheme_ipsum() 定制主题",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#演变",
    "href": "connected-scatter.html#演变",
    "title": "11  Conn-Scatter",
    "section": "11.4 演变",
    "text": "11.4 演变\n连接散点图也可以是一种强大的技术，用来讲述两个变量演变的故事。\n下面的示例展示了美国名为 Amanda 和 Ashley 的婴儿数量演变。\n\n\nShow/Hide Code\n# 筛选1970年后的女性婴儿，名字为 Ashley 或 Amanda 的数据\ndata &lt;- babynames |&gt;\n  filter(name %in% c(\"Ashley\", \"Amanda\")) |&gt; # 只保留 Ashley 和 Amanda\n  filter(sex == \"F\") |&gt; # 只保留女性\n  filter(year &gt; 1970) |&gt; # 只保留1970年后的数据\n  select(year, name, n) |&gt; # 选择年份、名字和数量\n  spread(key = name, value = n, -1) # 宽数据格式，每列为一个名字\n\n# 绘图：x轴为 Amanda，y轴为 Ashley，标签为年份\ndata |&gt;\n  ggplot(aes(x = Amanda, y = Ashley, label = year)) +\n  geom_point() + # 绘制散点\n  geom_segment(aes(\n    xend = c(tail(Amanda, n = -1), NA), # 连接相邻年份的点\n    yend = c(tail(Ashley, n = -1), NA)\n  ))\n\n\n\n\n\nAshley 和 Amanda 名字在美国的流行演变（1970年后，女婴）\n\n\n\n\n再改进一下，在图表中添加箭头和标签来引导读者：\n\n\nShow/Hide Code\n# 随机选择部分年份用于标签\ntmp_date &lt;- data %&gt;% sample_frac(0.3)\n\n# 绘图\ndata %&gt;%\n  ggplot(aes(x = Amanda, y = Ashley, label = year)) +\n  geom_point(color = \"#69b3a2\") + # 绘制散点\n  geom_text_repel(data = tmp_date) + # 添加年份标签，避免重叠\n  geom_segment(\n    color = \"#69b3a2\",\n    aes(\n      xend = c(tail(Amanda, n = -1), NA), # 连接相邻年份的点\n      yend = c(tail(Ashley, n = -1), NA)\n    ),\n    arrow = arrow(length = unit(0.3, \"cm\")) # 添加箭头\n  ) +\n  theme_ipsum() # 应用主题\n\n\n\n\n\nAshley 和 Amanda 名字在美国的流行演变（带箭头和标签，1970年后，女婴）",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#time-series",
    "href": "connected-scatter.html#time-series",
    "title": "11  Conn-Scatter",
    "section": "11.5 Time series",
    "text": "11.5 Time series\n交互式时间序列图：巴黎 Vélib 自行车租赁数据（前300条）：\n\n\nShow/Hide Code\n# 加载所需包\n# library(dygraphs)      # 用于绘制交互式时间序列图\n# library(xts)           # 用于数据框与 xts 格式转换\n# library(tidyverse)     # 数据处理\n# library(lubridate)     # 处理日期时间\n\n# 读取数据\npath = 'https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/bike.csv'\ndata &lt;- read.table(path, header = TRUE, sep = \",\") %&gt;% head(300) # 取前300行数据\n\n# 将时间列从因子/字符转换为日期时间格式\ndata$datetime &lt;- ymd_hms(data$datetime)\n\n# 创建 xts 对象，dygraph 需要此格式\n# x = 观测值，order.by = 时间索引\ndon &lt;- xts(x = data$count, order.by = data$datetime)\n\n# 绘制交互式时间序列图\ndygraph(don) |&gt;\n    dyOptions(\n        labelsUTC = TRUE,         # 使用 UTC 时间标签\n        fillGraph = TRUE,         # 填充曲线下方区域\n        fillAlpha = 0.1,          # 填充透明度\n        drawGrid = FALSE,         # 不显示网格线\n        colors = \"#D8AE5A\"        # 曲线颜色\n    ) |&gt;\n    dyRangeSelector() |&gt;\n    dyCrosshair(direction = \"vertical\") |&gt;\n    dyHighlight(\n        highlightCircleSize = 5,                  # 鼠标悬停时点的大小\n        highlightSeriesBackgroundAlpha = 0.2,     # 高亮系列的背景透明度\n        hideOnMouseOut = FALSE                    # 鼠标移出时是否隐藏高亮\n    ) |&gt;\n    dyRoller(rollPeriod = 1)                    # 滚动平均窗口大小\n\n\n\n\n交互式时间序列图：巴黎 Vélib 自行车租赁数据（前300条）",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#base-r",
    "href": "connected-scatter.html#base-r",
    "title": "11  Conn-Scatter",
    "section": "11.6 Base R",
    "text": "11.6 Base R\n\n11.6.1 基础\n\n\nShow/Hide Code\n# 构造示例数据\na = c(1:5)                  # x 轴数据，1 到 5\nb = c(5, 3, 4, 5, 5)        # 第一组 y 轴数据\nc = c(4, 5, 4, 3, 1)        # 第二组 y 轴数据\n\n# 绘制第一组数据的连接散点图\nplot(\n    b ~ a,                    # y ~ x 公式\n    type = \"b\",               # 点和线都显示\n    bty = \"l\",                # 只显示左和下边框\n    xlab = \"value of a\",      # x 轴标签\n    ylab = \"value of b\",      # y 轴标签\n    col = rgb(0.2, 0.4, 0.1, 0.7), # 线和点的颜色（半透明绿色）\n    lwd = 3,                  # 线宽\n    pch = 17,                 # 点的形状（三角形）\n    ylim = c(1, 5)            # y 轴范围\n)\n\n# 添加第二组数据的连接散点图\nlines(\n    c ~ a,                    # y ~ x 公式\n    col = rgb(0.8, 0.4, 0.1, 0.7), # 线和点的颜色（半透明橙色）\n    lwd = 3,                  # 线宽\n    pch = 19,                 # 点的形状（实心圆）\n    type = \"b\"                # 点和线都显示\n)\n\n# 添加图例\nlegend(\n    \"bottomleft\",             # 图例位置\n    legend = c(\"Group 1\", \"Group 2\"), # 图例标签\n    col = c(\n        rgb(0.2, 0.4, 0.1, 0.7),\n        rgb(0.8, 0.4, 0.1, 0.7)\n    ),                        # 图例颜色\n    pch = c(17, 19),          # 图例点形状\n    bty = \"n\",                # 不显示图例边框\n    pt.cex = 2,               # 点的大小\n    cex = 1.2,                # 字体大小\n    text.col = \"black\",       # 文字颜色\n    horiz = FALSE,            # 垂直排列\n    inset = c(0.1, 0.1)       # 图例内边距\n)\n\n\n\n\n\n基础 R 语言绘制连接散点图（两组数据）\n\n\n\n\n\n\n11.6.2 背景图\n\n\nShow/Hide Code\n# 加载图片读取包\nlibrary(jpeg)\nlibrary(png)\n\n# 读取PNG图片作为背景\nmy_image &lt;- readPNG(\"./image/R_full_medium.png\")\n\n# 设置空白绘图区，不画任何点\nplot(1:2, type='n', main=\"\", xlab=\"x\", ylab=\"y\")\n\n# 获取绘图区参数，并将图片填充到指定区域\nlim &lt;- par()\nrasterImage(my_image, \n            xleft=1, xright=2, \n            ybottom=1.3, ytop=1.7)\n\n# 添加网格线\ngrid()\n\n# 在图片上添加连接散点图\nlines(\n  x=c(1, 1.2, 1.4, 1.6, 1.8, 2.0), \n  y=c(1, 1.3, 1.7, 1.6, 1.7, 1.0), \n  type=\"b\", lwd=5, col=\"black\"\n)\n\n\n\n\n\n在背景图片上绘制连接散点图（基础R）\n\n\n\n\n\n\n11.6.3 lubridate()\n使用日期前，务必使用 lubridate() 把 “日期” 转化为 日期/时间格式。\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(124)\n\n# 构造日期字符串，格式为 \"2015/03/XX\"，XX为1到31中的随机6个数字\ndate &lt;- paste(\"2015/03/\", sample(seq(1, 31), 6), sep = \"\")\n\n# 随机生成6个1到100之间的整数，作为数值\nvalue &lt;- sample(seq(1, 100), 6)\n\n# 将日期和数值合并为数据框\ndata &lt;- data.frame(date, value)\n\n# 将日期列转换为 Date 类型，便于后续处理和绘图\ndata$date &lt;- as.Date(data$date)\n\n# 按照日期升序排列数据\ndata &lt;- data[order(data$date), ]\n\n# 绘制连接散点图\nplot(\n    data$value ~ data$date,                 # y轴为value，x轴为date\n    type = \"b\",                             # 同时绘制点和线\n    lwd = 3,                                # 线宽为3\n    col = rgb(0.1, 0.7, 0.1, 0.8),          # 线和点的颜色（半透明绿色）\n    ylab = \"value of ...\",                  # y轴标签\n    xlab = \"date\",                          # x轴标签\n    bty = \"l\",                              # 只显示左和下边框\n    pch = 20,                               # 点的形状（实心圆）\n    cex = 4                                 # 点的大小\n)\n\n# 添加水平辅助线，y轴从0到100，每隔10画一条灰色线\nabline(h = seq(0, 100, 10), col = \"grey\", lwd = 0.8)\n\n\n\n\n\n使用 lubridate() 处理日期时间\n\n\n\n\n\n\n11.6.4 Cheatsheet\nBase R 提供了许多选项来自定义图表外观。基本上所有功能都可以通过这几个选项实现：\n\nlwd → 线条宽度\ntype → 点之间的连接\nlty → 线条类型\ncex → 形状大小\ncol → 控制颜色\npch → 标记形状\n\n\n\nShow/Hide Code\n# 设置绘图区边距\npar(mar = c(3, 3, 3, 3))\n\nnum &lt;- 0   # 用于lty编号\nnum1 &lt;- 0  # 用于type和lwd编号\n\n# 创建空白绘图区，不显示任何点\nplot(\n  0, 0,\n  xlim = c(0, 21),           # x轴范围\n  ylim = c(0.5, 6.5),        # y轴范围\n  col = \"white\",             # 不显示点\n  yaxt = \"n\",                # 不显示y轴刻度\n  ylab = \"\",                 # y轴标签为空\n  xlab = \"\"                  # x轴标签为空\n)\n\n# 填充图形各行，分别演示不同参数\nfor (i in seq(1, 20)) {\n  # 第一行：pch（点的形状）\n  points(i, 1, pch = i, cex = 3)\n  # 第二行：col（颜色）\n  points(i, 2, col = i, pch = 16, cex = 3)\n  # 第三行：cex（点的大小）\n  points(i, 3, col = \"black\", pch = 16, cex = i * 0.25)\n\n  # 第四行：lty（线型），每隔3个画一条线\n  if (i %in% c(seq(1, 18, 3))) {\n    num = num + 1\n    points(c(i, i + 2), c(4, 4), col = \"black\", lty = num, type = \"l\", lwd = 2)\n    text(i + 1.1, 4.15, num)  # 标注lty编号\n  }\n\n  # 第五、六行：type（线型类型）和lwd（线宽），每隔5个画一组\n  if (i %in% c(seq(1, 20, 5))) {\n    num1 = num1 + 1\n    # type参数演示（点、线、点线、点线重叠）\n    points(\n      c(i, i + 1, i + 2, i + 3),\n      c(5, 5, 5, 5),\n      col = \"black\",\n      type = c(\"p\", \"l\", \"b\", \"o\")[num1],\n      lwd = 2\n    )\n    text(i + 1.1, 5.2, c(\"p\", \"l\", \"b\", \"o\")[num1])  # 标注type类型\n\n    # lwd参数演示（线宽1~4）\n    points(\n      c(i, i + 1, i + 2, i + 3),\n      c(6, 6, 6, 6),\n      col = \"black\",\n      type = \"l\",\n      lwd = num1\n    )\n    text(i + 1.1, 6.2, num1)  # 标注lwd数值\n  }\n}\n\n# 添加y轴标签，分别对应各参数\naxis(\n  2,\n  at = c(1, 2, 3, 4, 5, 6),\n  labels = c(\"pch\", \"col\", \"cex\", \"lty\", \"type\", \"lwd\"),\n  tick = TRUE,\n  col = \"black\",\n  las = 1,\n  cex.axis = 0.8\n)\n\n# 添加x轴标签，1~20\naxis(\n  1,\n  at = seq(1, 20),\n  labels = seq(1, 20),\n  tick = TRUE,\n  col = \"black\",\n  las = 1,\n  cex.axis = 0.8\n)\n\n\n\n\n\nBase R 图形参数速查表：pch, col, cex, lty, type, lwd 的效果演示",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#pearl",
    "href": "connected-scatter.html#pearl",
    "title": "11  Conn-Scatter",
    "section": "11.7 Pearl",
    "text": "11.7 Pearl\n带有文字标签的散点图，见 Section 7.7。",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "density2d.html",
    "href": "density2d.html",
    "title": "12  Density 2D",
    "section": "",
    "text": "12.1 PKG\n用来显示两个数值变量之间的关系, 把数值分箱后计算观测数量, 有不同类型的形状:\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(patchwork)      # 用于组合多个图形\nlibrary(hexbin)         # 用于六边形分箱\nlibrary(RColorBrewer)   # 用于调色板",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#点图的问题",
    "href": "density2d.html#点图的问题",
    "title": "12  Density 2D",
    "section": "12.2 点图的问题",
    "text": "12.2 点图的问题\n点太多的时候难以看清信息,黑乎乎一片(或许加上透明度能好一点):\n\n\nShow/Hide Code\n# 生成三组二维正态分布的数据，每组20000个点,3个群体\na &lt;- data.frame(x = rnorm(20000, 10, 1.9), y = rnorm(20000, 10, 1.2))    # 第一组，均值为10\nb &lt;- data.frame(x = rnorm(20000, 14.5, 1.9), y = rnorm(20000, 14.5, 1.9)) # 第二组，均值为14.5\nc &lt;- data.frame(x = rnorm(20000, 9.5, 1.9), y = rnorm(20000, 15.5, 1.9))  # 第三组，x均值9.5，y均值15.5\n\n# 合并三组数据\ndata &lt;- rbind(a, b, c)\n\n# 绘制基础散点图，展示所有数据点的分布情况\nggplot(data, aes(x = x, y = y)) +\n    geom_point()\n\n\n\n\n\n基础散点图,3个群体,由于点太多而看不清",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#geom_bin2d",
    "href": "density2d.html#geom_bin2d",
    "title": "12  Density 2D",
    "section": "12.3 geom_bin2d()",
    "text": "12.3 geom_bin2d()\n\n12.3.1 基础\nggplot2::geom_bin2d() 是一个用于绘制二维直方图的函数, 它将数据分成网格, 并计算每个网格中的点数, 通过颜色深浅来表示点的分布.\n\n\nShow/Hide Code\nggplot(data, aes(x = x, y = y)) +\n  geom_bin2d() +\n  ggtitle(\"geom_bin2d() with default\") +\n  theme_bw()\n\n\n\n\n\n使用默认geom_bin2d绘制二维密度图\n\n\n\n\n\n\n12.3.2 bins\n\n\nShow/Hide Code\nggplot(data, aes(x = x, y = y)) +\n  geom_bin2d(bins = 70) +\n  scale_fill_continuous(type = \"viridis\") + # 使用viridis色彩映射\n  ggtitle(\"geom_bin2d() with bins = 70\") +\n  theme_bw()\n\n\n\n\n\n通过bins参数控制箱的数量\n\n\n\n\n\n\n12.3.3 叠加散点图\n散点图可以叠加在 2D 密度图之上:\n\n\nShow/Hide Code\n# 生成示例数据，x和y分别为1到100的序列加上正态噪声\nsample_data &lt;- data.frame(\n    x_values = 1:100 + rnorm(100, sd = 20),  # x轴数据，添加标准差为20的正态噪声\n    y_values = 1:100 + rnorm(100, sd = 27)   # y轴数据，添加标准差为27的正态噪声\n)\n\n# 绘图\nggplot(sample_data, aes(x_values, y_values)) +\n    # 绘制二维密度的栅格图，fill映射到密度值，不显示等高线\n    stat_density_2d(\n        geom = \"tile\", \n        aes(fill = ..density..), \n        contour = FALSE\n    ) +\n    # 叠加白色散点图，突出每个观测点\n    geom_point(colour = \"white\")\n\n\n\n\n\n使用stat_density2d绘制二维密度图并叠加散点图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#geom_hex",
    "href": "density2d.html#geom_hex",
    "title": "12  Density 2D",
    "section": "12.4 geom_hex()",
    "text": "12.4 geom_hex()\n\n12.4.1 基础\n\n\nShow/Hide Code\n# 使用默认geom_hex()绘制二维密度图\nggplot(data, aes(x = x, y = y)) +\n  geom_hex() +\n  ggtitle(\"geom_hex() with default\") +\n  theme_bw()\n\n\n\n\n\n基础六角二位密度图geom_hex()\n\n\n\n\n\n\nShow/Hide Code\nggplot(data, aes(x = x, y = y)) +\n  geom_hex(bins = 70) +\n  scale_fill_continuous(type = \"viridis\") + # 使用viridis色彩映射\n  ggtitle(\"geom_hex() with bins = 70\") +\n  theme_bw() \n\n\n\n\n\n通过bins参数控制箱的数量",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#geom_density_2d",
    "href": "density2d.html#geom_density_2d",
    "title": "12  Density 2D",
    "section": "12.5 geom_density_2d()",
    "text": "12.5 geom_density_2d()\nstat_density_2d() 与 stat_density_2d() 可以绘制二维密度图\n\n12.5.1 基础\n\n\nShow/Hide Code\n# 仅显示二维密度的等高线\np1 &lt;- ggplot(data, aes(x = x, y = y)) +\n    geom_density_2d()\n\n# 仅显示密度区域\np2 &lt;- ggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..level..), geom = \"polygon\")\n\n# 同时显示密度区域和等高线\np3 &lt;- ggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..level..), geom = \"polygon\", colour = \"white\")\n\n# 使用raster方式显示密度\np4 &lt;- ggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(\n        aes(fill = ..density..), # 填充颜色映射到密度值\n        geom = \"raster\",         # 使用栅格图层\n        contour = FALSE          # 不显示等高线\n    ) +\n    scale_x_continuous(expand = c(0, 0)) + # 去除x轴边距\n    scale_y_continuous(expand = c(0, 0)) + # 去除y轴边距\n    theme(legend.position = 'none')        # 不显示图例\n\np1 + p2 + p3 + p4 + plot_layout(ncol = 2) \n\n\n\n\n\ngeom_density_2d()\n\n\n\n\n\n\n12.5.2 Palette\n\n\nShow/Hide Code\n# 使用数字索引选择调色板, direction = -1 反转调色方向\nggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) + # 绘制二维密度的栅格图\n    scale_fill_distiller(palette = 4, direction = -1) + # palette=4表示第4个内置调色板, direction=-1表示反转色阶\n    scale_x_continuous(expand = c(0, 0)) + # 去除x轴边距\n    scale_y_continuous(expand = c(0, 0)) + # 去除y轴边距\n    theme(legend.position = 'none')\n\n\n\n\n\n使用数字索引选择调色板, direction = -1 反转调色方向\n\n\n\n\n\n\nShow/Hide Code\n# 使用数字索引选择调色板, direction = 1 保持默认方向\nggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) +\n    scale_fill_distiller(palette = 4, direction = 1) + # direction=1为默认方向\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme(legend.position = 'none')\n\n\n\n\n\n使用数字索引选择调色板, direction = 1 保持默认方向\n\n\n\n\n\n\nShow/Hide Code\n# 使用调色板名称调用,如\"Spectral\"\nggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) +\n    scale_fill_distiller(palette = \"Spectral\", direction = 1) + # palette参数直接指定调色板名称\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme(legend.position = 'none')\n\n\n\n\n\n使用调色板名称调用,如Spectral",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#hexbin",
    "href": "density2d.html#hexbin",
    "title": "12  Density 2D",
    "section": "12.6 hexbin",
    "text": "12.6 hexbin\n使用 hexbin 和 RColorBrewer 绘制基础六边形二维密度图:\n\n\nShow/Hide Code\n# library(hexbin)         # 用于六边形分箱\n# library(RColorBrewer)   # 用于调色板\n\n# 生成数据：x和y分别为正态分布，均值分别为1.5和1.6，共5000个点\nx &lt;- rnorm(mean = 1.5, 5000)\ny &lt;- rnorm(mean = 1.6, 5000)\n\n# 进行六边形分箱，xbins控制六边形的数量\nbin &lt;- hexbin(x, y, xbins = 40)\n\n# 生成颜色映射，使用Spectral调色板并反转\nmy_colors = colorRampPalette(rev(brewer.pal(11, 'Spectral')))\n\n# 绘制六边形二维密度图，不显示主标题和图例\nplot(bin, main = \"\", colramp = my_colors, legend = FALSE)\n\n\n\n\n\n使用hexbin包和RColorBrewer绘制基础六边形二维密度图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "ranking.html",
    "href": "ranking.html",
    "title": "Ranking",
    "section": "",
    "text": "此部分探索数据排名（有序数据）的不同方法。\n\n\n\nRanking\n\n\n\n13  Bar : 条形图, 简单又好用的可视化方法\n14  Spider : 雷达图, 适合展示多维数据\n15  Wordcloud : 词云图，花里胡哨\n16  Parallel : 平行坐标图，雷达图的改进，适合展示多维数据\n17  Lollipop : 棒棒糖图，条形图的改进\n18  Cir-bar : 圆形条形图，条形图的改进，适合展示超多组数据\n8  Heatmap : 热力图",
    "crumbs": [
      "Ranking"
    ]
  },
  {
    "objectID": "bar.html",
    "href": "bar.html",
    "title": "13  Bar",
    "section": "",
    "text": "13.1 PKG\nGO GO GO! 出发咯! 简答实用的条形图~\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(patchwork) # 拼图\nlibrary(ggpattern) # 条形图填充图案\nlibrary(hrbrthemes) # 主题\nlibrary(RColorBrewer) # 调色板",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Bar</span>"
    ]
  },
  {
    "objectID": "bar.html#ggplot2",
    "href": "bar.html#ggplot2",
    "title": "13  Bar",
    "section": "13.2 ggplot2()",
    "text": "13.2 ggplot2()\n\n13.2.1 基本\n\n\nShow/Hide Code\n# 创建数据框，包含名称和对应的数值\ndata &lt;- data.frame(\n    name = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n    value = c(3, 12, 5, 18, 45)\n)\n\n# 绘制条形图\nggplot(data, aes(x = name, y = value)) +\n    geom_bar(stat = \"identity\")  # stat=\"identity\" 表示y轴直接使用数据中的value数值\n\n\n\n\n\ngeom_bar() 基础条形图\n\n\n\n\n\n\n13.2.2 color\n\n\nShow/Hide Code\n# 1: 统一颜色。color 设置边框颜色，fill 设置填充色\np1 &lt;- ggplot(mtcars, aes(x = as.factor(cyl))) +\n    geom_bar(color = \"blue\", fill = rgb(0.1, 0.4, 0.5, 0.7)) +\n    ggtitle(\"color and fill\") +\n    theme_minimal()\n\n# 2: 使用色相（Hue）区分\np2 &lt;- ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +\n    geom_bar() +\n    scale_fill_hue(c = 40) +\n    theme(legend.position = \"none\", minimal = TRUE) +\n    ggtitle(\"Hue\")\n\n# 3: 使用 RColorBrewer 调色板\np3 &lt;- ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +\n    geom_bar() +\n    scale_fill_brewer(palette = \"Set1\") +\n    theme(legend.position = \"none\", minimal = TRUE) +\n    ggtitle(\"RColorBrewer\")\n\n# 4: 使用灰度（Greyscale）填充\np4 &lt;- ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +\n    geom_bar() +\n    scale_fill_grey(start = 0.25, end = 0.75) +\n    theme(legend.position = \"none\", minimal = TRUE) +\n    ggtitle(\"Greyscale\")\n\n# 5: 手动设置颜色\np5 &lt;- ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +\n    geom_bar() +\n    scale_fill_manual(values = c(\"red\", \"green\", \"blue\")) +\n    theme(legend.position = \"none\", minimal = TRUE) +\n    ggtitle(\"manual\")\n\n# 使用 patchwork 拼图\n(p1 + p2) / (p3 + p4) / p5 \n\n\n\n\n\n不同方式设置条形图颜色示例：统一颜色、色相、RColorBrewer、灰度、手动设置\n\n\n\n\n\n\n13.2.3 横向\n横向条形图, 旧时代用 coord_flip()，新世纪用 直接交换 x 轴和 y 轴。\n\n\nShow/Hide Code\n# 创建数据框，包含名称和对应的数值\ndata &lt;- data.frame(\n    name = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n    value = c(3, 12, 5, 18, 45)\n)\n\n# 绘制横向条形图\nggplot(data, aes(y = name, x= value)) +\n    geom_bar(stat = \"identity\")   # stat=\"identity\" 表示y轴直接使用数据中的value数值 效果等于 geom_col()\n\n\n\n\n\n横向条形图示例\n\n\n\n\n\n\n13.2.4 bins\n\n\nShow/Hide Code\nggplot(data, aes(x = name, y = value)) +\n  geom_bar(stat = \"identity\", width = 0.2)\n\n\n\n\n\n使用 bins 参数控制条形图的分组数量\n\n\n\n\n\n\n13.2.5 排序\n排序有多种方法: forcats::fct_reorder(), dplyr::arrange() base R::reorder()等,我一般用forcats::fct_reorder(), 另外两种方法见 Reorder a variable with ggplot2。\n\n\nShow/Hide Code\nggplot(\n  data,\n  aes(x = fct_reorder(name, -value), y = value, width = value / 100)\n) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n使用 width 控制可变宽图(样本量或其它值)\n\n\n\n\n\n\n13.2.6 Error bars\ngeom_errorbar() 用于添加误差棒:\n\n\nShow/Hide Code\n# 创建包含均值和标准差的数据框\ndata &lt;- data.frame(\n    name = letters[1:5],                 # 分组名称\n    value = sample(seq(4, 15), 5),       # 每组的数值\n    sd = c(1, 0.2, 3, 2, 4)              # 每组的标准差\n)\n\n# 绘制带误差线的条形图\nggplot(data, aes(x = name, y = value)) +\n    geom_bar(\n        stat = \"identity\",                 # 直接使用数据中的数值\n        fill = \"skyblue\",                  # 设置填充色\n        alpha = 0.7                        # 设置透明度\n    ) +\n    geom_errorbar(\n        aes(ymin = value - sd, ymax = value + sd), # 误差线范围\n        width = 0.4,                      # 误差线横向宽度\n        colour = \"orange\",                 # 误差线颜色\n        alpha = 0.9,                       # 误差线透明度\n        linewidth = 1.3                         # 误差线粗细\n    )\n\n\n\n\n\n带误差线的条形图示例\n\n\n\n\n还可以定制误差线的样式和颜色等:\n\n\nShow/Hide Code\nlibrary(tidyverse)\n\ndata &lt;- data.frame(\n  name = letters[1:5],\n  value = sample(seq(4, 15), 5),\n  sd = c(1, 0.2, 3, 2, 4)\n)\n\n# 1. 矩形误差线（geom_crossbar）\np_rect &lt;- ggplot(data) +\n  geom_bar(\n    aes(x = name, y = value),\n    stat = \"identity\",\n    fill = \"skyblue\",\n    alpha = 0.5\n  ) +\n  geom_crossbar(\n    aes(x = name, y = value, ymin = value - sd, ymax = value + sd),\n    width = 0.4,\n    colour = \"orange\",\n    alpha = 0.9,\n    linewidth = 1.3\n  ) +\n  theme_minimal()\n# geom_crossbar 用矩形表示误差区间\n\n# 2. 线段误差线（geom_linerange）\np_line &lt;- ggplot(data) +\n  geom_bar(\n    aes(x = name, y = value),\n    stat = \"identity\",\n    fill = \"skyblue\",\n    alpha = 0.5\n  ) +\n  geom_linerange(\n    aes(x = name, ymin = value - sd, ymax = value + sd),\n    colour = \"orange\",\n    alpha = 0.9,\n    linewidth = 1.3\n  ) +\n  theme_minimal()\n# geom_linerange 用竖线表示误差区间\n\n# 3. 线段+点误差线（geom_pointrange）\np_point &lt;- ggplot(data) +\n  geom_bar(\n    aes(x = name, y = value),\n    stat = \"identity\",\n    fill = \"skyblue\",\n    alpha = 0.5\n  ) +\n  geom_pointrange(\n    aes(x = name, y = value, ymin = value - sd, ymax = value + sd),\n    colour = \"orange\",\n    alpha = 0.9,\n    size = 1.3\n  ) +\n  theme_minimal()\n# geom_pointrange 用点和线段表示误差区间\n\n# 4. 横向条形图带误差线（coord_flip）\np_horiz &lt;- ggplot(data) +\n  geom_bar(\n    aes(y = name, x = value),\n    stat = \"identity\",\n    fill = \"skyblue\",\n    alpha = 0.5\n  ) +\n  geom_errorbar(\n    aes(y = name, xmin = value - sd, xmax = value + sd),\n    width = 0.4,\n    colour = \"orange\",\n    alpha = 0.9,\n    size = 1.3\n  ) +\n  theme_minimal()\n# coord_flip() 让条形图横向显示\n\n# patchwork 拼图展示\n(p_rect + p_line) / (p_point + p_horiz)\n\n\n\n\n\n不同类型误差线的条形图示例：矩形、线段、线段+点、横向\n\n\n\n\n\n\n13.2.7 type\n标准差、标准误和置信区间是统计学中常用的误差类型。下面是一个示例，展示如何使用 ggplot2 绘制这三种误差类型的条形图。\n\n\nShow/Hide Code\n# 数据准备：提取iris数据集中的Species和Sepal.Length两列\ndata &lt;- iris |&gt; select(Species, Sepal.Length)\n\n# 计算每个物种的均值、标准差、标准误和置信区间\nmy_sum &lt;- data |&gt;\n    group_by(Species) |&gt;\n    summarise(\n        n = n(),                              # 样本量\n        mean = mean(Sepal.Length),            # 平均值\n        sd = sd(Sepal.Length)                 # 标准差\n    ) |&gt;\n    mutate(se = sd / sqrt(n)) |&gt;            # 标准误\n    mutate(ic = se * qt((1 - 0.05) / 2 + .5, n - 1)) # 置信区间（95%）\n\n# 1. 使用标准差绘制误差线\np_sd &lt;- ggplot(my_sum) +\n    geom_bar(\n        aes(x = Species, y = mean),\n        stat = \"identity\",\n        fill = \"forestgreen\",\n        alpha = 0.5\n    ) +\n    geom_errorbar(\n        aes(x = Species, ymin = mean - sd, ymax = mean + sd), # 标准差误差线\n        width = 0.4,\n        colour = \"orange\",\n        alpha = 0.9,\n        size = 1.5\n    ) +\n    ggtitle(\"Standard Deviation\")\n\n# 2. 使用标准误绘制误差线\np_se &lt;- ggplot(my_sum) +\n    geom_bar(\n        aes(x = Species, y = mean),\n        stat = \"identity\",\n        fill = \"forestgreen\",\n        alpha = 0.5\n    ) +\n    geom_errorbar(\n        aes(x = Species, ymin = mean - se, ymax = mean + se), # 标准误误差线\n        width = 0.4,\n        colour = \"orange\",\n        alpha = 0.9,\n        size = 1.5\n    ) +\n    ggtitle(\"Standard Error\")\n\n# 3. 使用置信区间绘制误差线\np_ic &lt;- ggplot(my_sum) +\n    geom_bar(\n        aes(x = Species, y = mean),\n        stat = \"identity\",\n        fill = \"forestgreen\",\n        alpha = 0.5\n    ) +\n    geom_errorbar(\n        aes(x = Species, ymin = mean - ic, ymax = mean + ic), # 置信区间误差线\n        width = 0.4,\n        colour = \"orange\",\n        alpha = 0.9,\n        size = 1.5\n    ) +\n    ggtitle(\"Confidence Interval\")\n\n# 使用 patchwork 拼图展示三种误差类型的条形图\np_sd + p_se + p_ic\n\n\n\n\n\n三种误差类型（标准差、标准误、置信区间）的条形图示例\n\n\n\n\n\n\n13.2.8 黑白\n用图案等给黑白条形图加上伪色彩, 用于黑白印刷\n\n\nShow/Hide Code\n# 创建数据框，包含名称和对应的数值\ndf &lt;- data.frame(\n    name = c(\"north\", \"south\", \"south-east\", \"north-west\", \"south-west\"),\n    val = sample(seq(7, 15), 5)\n)\n\n# 绘制黑白条形图，使用灰度填充\nggplot(df, aes(x = name, y = val, fill = name)) +\n    geom_bar(stat = \"identity\", alpha = .6, width = .4) + # 绘制条形图，设置透明度和宽度\n    scale_fill_grey(start = 0, end = 0.8) +               # 使用灰度色阶填充，start和end控制灰度范围\n    theme_bw()                                            # 使用黑白主题\n\n\n\n\n\n黑白填充条形图示例：使用灰度填充不同类别\n\n\n\n\n\n\nShow/Hide Code\n#| fig-cap: \"使用 ggpattern 包为黑白条形图添加不同图案填充（适合黑白印刷）\"\n\n# 加载所需包\nlibrary(ggpattern)\nlibrary(ggplot2)\nlibrary(hrbrthemes)\n\n# 使用 ggpattern 绘制带有不同图案的黑白条形图\nggplot(df, aes(x = name, y = val)) +\n    geom_col_pattern(\n        aes(\n            pattern = name,              # 不同类别使用不同图案\n            pattern_angle = name,        # 不同类别图案角度不同\n            pattern_spacing = name       # 不同类别图案间距不同\n        ),\n        fill = 'white',                # 条形图主色为白色\n        colour = 'black',              # 条形边框为黑色\n        pattern_density = 0.5,         # 图案密度\n        pattern_fill = 'black',        # 图案填充色为黑色\n        pattern_colour = 'darkgrey'    # 图案线条颜色为深灰色\n    ) +\n    theme_bw()                       # 使用黑白主题",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Bar</span>"
    ]
  },
  {
    "objectID": "bar.html#base-r",
    "href": "bar.html#base-r",
    "title": "13  Bar",
    "section": "13.3 Base R",
    "text": "13.3 Base R\n\n13.3.1 基本\n\n\nShow/Hide Code\n# 构建数据框，包含5个分组及其对应的数值\ndata &lt;- data.frame(\n    name = letters[1:5],                  # 分组名称（a-e）\n    value = sample(seq(4, 15), 5)         # 每组的数值（4到15之间的随机数）\n)\n\n# 使用 barplot() 绘制基础条形图\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    col = \"skyblue\",                      # 设置条形颜色\n    border = \"blue\",                      # 设置条形边框颜色\n    xlab = \"分组\",                        # x轴标签\n    ylab = \"数值\"                         # y轴标签\n)\n\n\n\n\n\nBase R 基础条形图示例（含详细中文注释）\n\n\n\n\n\n\n13.3.2 color\n\n\nShow/Hide Code\npar(mfrow = c(1, 3)) # 1行3列\n\n# 1. 统一颜色填充\nbarplot(\n    height = data$value,                    # 指定每根条形的高度\n    names = data$name,                      # 指定每根条形的名称\n    col = rgb(0.2, 0.4, 0.6, 0.6)           # 设置所有条形为同一颜色（带透明度）\n)\n\n# 2. 为每根条形指定不同颜色（使用 RColorBrewer 调色板）\ncoul &lt;- brewer.pal(5, \"Set2\")             # 选择5种Set2调色板颜色\nbarplot(\n    height = data$value,\n    names = data$name,\n    col = coul                              # 每根条形使用不同颜色\n)\n\n# 3. 更改条形边框颜色\nbarplot(\n    height = data$value,\n    names = data$name,\n    border = \"#69b3a2\",                     # 设置条形边框颜色\n    col = \"white\"                           # 填充色为白色\n)\n\n\n\n\n\nBase R 条形图颜色设置\n\n\n\n\nShow/Hide Code\npar(mfrow = c(1, 1)) # 恢复为1行1列\n\n\n\n\n13.3.3 X & Y\n\n\nShow/Hide Code\n# 使用 barplot() 绘制条形图，并设置坐标轴标签、主标题、颜色和y轴范围\nbarplot(\n    height = data$value,                    # 指定每根条形的高度\n    names = data$name,                      # 指定每根条形的名称\n    col = rgb(0.8, 0.1, 0.1, 0.6),          # 设置条形颜色（红色，带透明度）\n    xlab = \"categories\",                    # 设置x轴标签\n    ylab = \"values\",                        # 设置y轴标签\n    main = \"My title\",                      # 设置主标题\n    ylim = c(0, 40)                         # 设置y轴范围\n)\n\n\n\n\n\nBase R 坐标轴与标题设置\n\n\n\n\n\n\n13.3.4 水平\n\n\nShow/Hide Code\n# 使用 barplot() 绘制水平条形图\nbarplot(\n    height = data$value,      # 指定每根条形的高度\n    names = data$name,        # 指定每根条形的名称\n    col = \"#69b3a2\",          # 设置条形颜色\n    horiz = TRUE,             # 设置为水平条形图\n    las = 1                   # y轴刻度标签水平显示\n)\n\n\n\n\n\nBase R 水平条形图示例\n\n\n\n\n\n\n13.3.5 宽度 间距\n\n\nShow/Hide Code\npar(mfrow = c(1, 2)) # 1行2列\n\n# 控制条形之间的间距（space 参数）\nbarplot(\n    height = data$value,                        # 指定每根条形的高度\n    names = data$name,                          # 指定每根条形的名称\n    col = rgb(0.2, 0.4, 0.6, 0.6),              # 设置条形颜色（带透明度）\n    space = c(0.1, 0.2, 3, 1.5, 0.3),           # 设置每根条形之间的间距（可为向量）\n    title = \"Barplot with Custom Spacing\"       # 设置标题\n)\n\n# 控制每根条形的宽度（width 参数）\nbarplot(\n    height = data$value,                        # 指定每根条形的高度\n    names = data$name,                          # 指定每根条形的名称\n    col = rgb(0.2, 0.4, 0.6, 0.6),              # 设置条形颜色（带透明度）\n    width = c(0.1, 0.2, 3, 1.5, 0.3),           # 设置每根条形的宽度（可为向量）\n    title = \"Barplot with Custom Width\"         # 设置标题\n)\n\n\n\n\n\nBase R 控制条形图宽度与间距\n\n\n\n\nShow/Hide Code\npar(mfrow = c(1, 1)) # 恢复为1行1列\n\n\n\n\n13.3.6 条纹\n\n\nShow/Hide Code\n# 使用 barplot() 绘制带有不同条纹密度和角度的条形图\nbarplot(\n    height = data$value,                   # 指定每根条形的高度\n    names = data$name,                     # 指定每根条形的名称\n    density = c(5, 10, 20, 30, 7),         # 设置每根条形的条纹密度（数值越大，条纹越密）\n    angle = c(0, 45, 90, 11, 36),          # 设置每根条形的条纹角度（单位为度）\n    col = \"brown\"                          # 设置条形的主色为棕色\n)\n\n\n\n\n\nBase R 条形图添加条纹和角度\n\n\n\n\n\n\n13.3.7 坐标轴\n\n\nShow/Hide Code\n# 构建数据框，包含5个分组及其对应的数值\ndata &lt;- data.frame(\n    name = letters[1:5],                  # 分组名称（a-e）\n    value = sample(seq(4, 15), 5)         # 每组的数值（4到15之间的随机数）\n)\n\npar(mfrow = c(2, 3)) # 3行2列\n\n# 基础条形图，指定条形高度、分组名称和颜色\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    col = \"#69b3a2\"                       # 设置条形颜色\n)\n\n# 坐标轴标签方向使用 las 参数\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    col = \"#69b3a2\",                      # 设置条形颜色\n    horiz = TRUE,                         # 设置为水平条形图\n    las = 1,                              # y轴刻度标签水平显示\n    main = \"las 控制标签方向\"              # 主标题\n)\n\n# 更改组标签使用 names.arg 参数\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names.arg = c(\"group1\", \"group2\", \"group3\", \"group4\", \"group5\"), # 自定义分组标签\n    col = \"#69b3a2\",                      # 设置条形颜色\n    main = \"names.arg 控制标签内容\"         # 主标题\n)\n\n# 坐标轴标签和坐标轴标题样式设置\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    names.arg = c(\"group1\", \"group2\", \"group3\", \"group4\", \"group5\"), # 自定义分组标签\n    font.axis = 2,                        # 坐标轴刻度字体加粗\n    col.axis = \"orange\",                  # 坐标轴刻度颜色\n    cex.axis = 1.5                        # 坐标轴刻度字体大小\n)\n\n# 自定义坐标轴标题样式\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    names = data$name,                    # 指定每根条形的名称\n    xlab = \"category\",                    # x轴标题\n    font.lab = 2,                         # 坐标轴标题字体加粗\n    col.lab = \"orange\",                   # 坐标轴标题颜色\n    cex.lab = 2,                          # 坐标轴标题字体大小\n    main = \"自定义坐标轴标题样式\"\n)\n\n# 增加边距大小，适应长标签\npar(mar = c(11, 4, 4, 4))               # 设置下边距为11，其余为默认\nbarplot(\n    height = data$value,                  # 指定每根条形的高度\n    col = \"#69b3a2\",                      # 设置条形颜色\n    names.arg = c(\n        \"very long group name 1\",\n        \"very long group name 2\",\n        \"very long group name 3\",\n        \"very long group name 4\",\n        \"very long group name 5\"\n    ),                                    # 长标签\n    las = 2,                              # 标签竖直显示\n    main = \"增加边距适应长标签\"\n)\n\n\n\n\n\nBase R 坐标轴与标签设置\n\n\n\n\nShow/Hide Code\n# 恢复默认边距和布局\npar(mar = c(0, 0, 0, 0))\npar(mfrow = c(1, 1)) # 1行1列\n\n\n\n\n13.3.8 n\n\n\nShow/Hide Code\n# 构建数据框，包含名称、平均值和样本量\ndata &lt;- data.frame(\n    name = c(\n        \"DD\",\n        \"with himself\",\n        \"with DC\",\n        \"with Silur\",\n        \"DC\",\n        \"with himself\",\n        \"with DD\",\n        \"with Silur\",\n        \"Silur\",\n        \"with himself\",\n        \"with DD\",\n        \"with DC\"\n    ),\n    average = sample(seq(1, 10), 12, replace = TRUE),   # 平均值（1~10之间的随机数）\n    number = sample(seq(4, 39), 12, replace = TRUE)     # 样本量（4~39之间的随机数）\n)\n\n# 增加底部边距，防止标签重叠\npar(mar = c(6, 4, 4, 4))\n\n# 绘制基础条形图\nmy_bar &lt;- barplot(\n    data$average,                        # 条形高度为平均值\n    border = FALSE,                      # 不显示条形边框\n    names.arg = data$name,               # 条形名称\n    las = 2,                             # x轴标签竖直显示\n    col = c(\n        rgb(0.3, 0.1, 0.4, 0.6),           # 不同分组的颜色\n        rgb(0.3, 0.5, 0.4, 0.6),\n        rgb(0.3, 0.9, 0.4, 0.6),\n        rgb(0.3, 0.9, 0.4, 0.6)\n    ),\n    ylim = c(0, 13),                     # y轴范围\n    main = \"\"                            # 主标题为空\n)\n\n# 添加竖直分隔线，辅助分组视觉\nabline(v = c(4.9, 9.7), col = \"grey\")\n\n# 在每根条形上方添加样本量文本\ntext(\n    my_bar, data$average + 0.4,                  # 位置：条形顶端稍上方\n    paste(\"n: \", data$number, sep = \"\"),         # 显示样本量\n    cex = 1                                      # 字体大小\n)\n\n# 添加图例，说明不同颜色代表的分组\nlegend(\n    \"topleft\",                                   # 图例位置\n    legend = c(\"Alone\", \"with Himself\", \"With other genotype\"), # 图例标签\n    col = c(\n        rgb(0.3, 0.1, 0.4, 0.6),\n        rgb(0.3, 0.5, 0.4, 0.6),\n        rgb(0.3, 0.9, 0.4, 0.6),\n        rgb(0.3, 0.9, 0.4, 0.6)\n    ),\n    bty = \"n\",                                   # 不显示图例边框\n    pch = 20,                                    # 图例点形状\n    pt.cex = 2,                                  # 图例点大小\n    cex = 0.8,                                   # 图例字体大小\n    horiz = FALSE,                               # 图例竖直排列\n    inset = c(0.05, 0.05)                        # 图例内边距\n)\n\n\n\n\n\nBase R 条形图显示样本量（n）及分组图例（含详细中文注释）\n\n\n\n\n\n\n13.3.9 Error bar\n依赖 arrows() 函数来添加误差线, 比较复杂\n\n\nShow/Hide Code\n# 构建数据集：3种环境条件（A、B、C）下，2种植物（sorgho和poacee）各10个样本的高度\ndata &lt;- data.frame(\n    specie = c(rep(\"sorgho\", 10), rep(\"poacee\", 10)),\n    cond_A = rnorm(20, 10, 4),\n    cond_B = rnorm(20, 8, 3),\n    cond_C = rnorm(20, 5, 4)\n)\n\n# 计算每种植物、每种条件下的平均值\nbilan &lt;- aggregate(cbind(cond_A, cond_B, cond_C) ~ specie, data = data, mean)\nrownames(bilan) &lt;- bilan[, 1]           # 设置行名为植物名称\nbilan &lt;- as.matrix(bilan[, -1])         # 转为矩阵，去掉第一列（植物名称）\n\n# 设置y轴上限，留出空间显示误差线\nlim &lt;- 1.2 * max(bilan)\n\n# 定义一个函数，用于在图上添加误差线（arrows函数实现）\nerror.bar &lt;- function(x, y, upper, lower = upper, length = 0.1, ...) {\n    arrows(x, y + upper, x, y - lower, angle = 90, code = 3, length = length, ...)\n}\n\n# 计算每种植物、每种条件下的标准差，并换算为置信区间（1.96倍标准差/样本量）\nstdev &lt;- aggregate(cbind(cond_A, cond_B, cond_C) ~ specie, data = data, sd)\nrownames(stdev) &lt;- stdev[, 1]\nstdev &lt;- as.matrix(stdev[, -1]) * 1.96 / 10\n\n# 绘制分组条形图\nze_barplot &lt;- barplot(\n    bilan,\n    beside = TRUE,                # 分组显示\n    legend.text = TRUE,           # 显示图例\n    col = c(\"blue\", \"skyblue\"),   # 设置颜色\n    ylim = c(0, lim),             # 设置y轴范围\n    ylab = \"height\"               # y轴标签\n)\n\n# 添加误差线\nerror.bar(ze_barplot, bilan, stdev)\n\n\n\n\n\nBase R 绘制带误差线的分组条形图示例（含详细中文注释）",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Bar</span>"
    ]
  },
  {
    "objectID": "bar.html#interactive",
    "href": "bar.html#interactive",
    "title": "13  Bar",
    "section": "13.4 Interactive",
    "text": "13.4 Interactive\nSection 7.5 有示例\nweb-mekko-chart-with-interactivity 亦有示例",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Bar</span>"
    ]
  },
  {
    "objectID": "bar.html#pearl",
    "href": "bar.html#pearl",
    "title": "13  Bar",
    "section": "13.5 Pearl",
    "text": "13.5 Pearl\n\nEconomist 经济学人的优美条形图\n\n\n\n\nEconomist\n\n\n\nHiking Locations in Washington 的优美环状条形图\n\n\n\n\nHiking Locations in Washington\n\n\n\n拥有最多德甲比赛场次球队分享数和亏损数的哑铃条形图\n\n\n\n\n拥有最多德甲比赛场次球队分享数和亏损数的哑铃条形图",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Bar</span>"
    ]
  },
  {
    "objectID": "spider.html",
    "href": "spider.html",
    "title": "14  Spider",
    "section": "",
    "text": "14.1 PKG\n蛛网图, 又称雷达图. 缺点不少, 在数据科学领域不推荐使用.\nShow/Hide Code\nlibrary(fmsb) # 用于绘制雷达图\nlibrary(RColorBrewer) # 用于生成颜色\nlibrary(scales)         # 用于设置透明度\nlibrary(tidyverse)      # 用于数据处理和可视化\nlibrary(hrbrthemes)     # 用于美化图表主题\nlibrary(colormap)      # 用于生成颜色映射\nlibrary(GGally)       # 用于绘制平行坐标图\nlibrary(viridis)      # 用于生成颜色映射\n# remotes::install_github(\"ricardo-bion/ggradar\")\nlibrary(ggradar)     # 用于绘制雷达图\nlibrary(palmerpenguins) # 用于示例企鹅数据集\nlibrary(scales)  # 用于设置透明度\nlibrary(showtext) # 用于加载字体\nshowtext_auto() # 自动加载字体",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "spider.html#问题",
    "href": "spider.html#问题",
    "title": "14  Spider",
    "section": "14.2 问题",
    "text": "14.2 问题\n\n圆形布局 = 更难阅读\n不支持排名\n类别顺序影响巨大: 同样的数据不同的排序,形状差别巨大\n刻度不自由: 直观上 各类别的刻度应该是一样的, 设置每个类别的刻度不同, 会导致误解\n重叠绘图: 过多观测时不好展示\n过度评估差异: 雷达图中形状的面积也会以平方而非线性的方式增加，看起来差异比实际更显著\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(1)\n\n# 生成一个包含10个科目的数据框，每个科目随机生成一个2到20之间的整数\ndata &lt;- as.data.frame(matrix(sample(2:20, 10, replace = TRUE), ncol = 10))\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\n    \"math\",        # 数学\n    \"english\",     # 英语\n    \"biology\",     # 生物\n    \"music\",       # 音乐\n    \"R-coding\",    # R编程\n    \"data-viz\",    # 数据可视化\n    \"french\",      # 法语\n    \"physic\",      # 物理\n    \"statistic\",   # 统计\n    \"sport\"        # 体育\n)\n\n# 为了使用fmsb包绘制雷达图，需要在数据框前面添加最大值和最小值两行\ndata &lt;- rbind(rep(20, 10), rep(0, 10), data)\n\n# 自定义雷达图\npar(mar = c(0, 0, 0, 0)) # 设置画布边距\nradarchart(\n    data,                # 输入数据\n    axistype = 1,        # 坐标轴类型\n\n    # 自定义多边形\n    pcol = rgb(0.2, 0.5, 0.5, 0.9),   # 多边形边框颜色\n    pfcol = rgb(0.2, 0.5, 0.5, 0.5),  # 多边形填充颜色\n    plwd = 4,                         # 多边形边框线宽\n\n    # 自定义网格\n    cglcol = \"grey\",                  # 网格线颜色\n    cglty = 1,                        # 网格线类型\n    axislabcol = \"grey\",              # 轴标签颜色\n    caxislabels = seq(0, 20, 5),      # 轴标签内容\n    cglwd = 0.8,                      # 网格线宽\n\n    # 自定义标签\n    vlcex = 1.3                       # 变量标签字体大小\n)\n\n# 条形图：展示同一组数据的分布，更易于比较\ndata |&gt;\n    slice(3) |&gt;                         # 选取第三行（即实际数据，前两行为最大最小值）\n    t() |&gt;                              # 转置数据框，方便后续处理\n    as.data.frame() |&gt;                  # 转换为数据框\n    tibble::rownames_to_column() |&gt;     # 将行名（科目名）转为一列\n    arrange(V1) |&gt;                      # 按分数升序排列\n    mutate(rowname = factor(rowname, rowname)) |&gt; # 保持原有顺序\n    ggplot(aes(x = rowname, y = V1)) +  # 绘图，x轴为科目，y轴为分数\n    geom_segment(\n        aes(x = rowname, xend = rowname, y = 0, yend = V1),\n        color = \"grey\"                    # 绘制灰色线段\n    ) +\n    geom_point(size = 5, color = \"#69b3a2\") + # 绘制数据点\n    coord_flip() +                            # 翻转坐标轴，横向展示\n    theme_ipsum() +                           # 使用hrbrthemes包的主题\n    theme(\n        panel.grid.minor.y = element_blank(),   # 去除y轴次网格线\n        panel.grid.major.y = element_blank(),   # 去除y轴主网格线\n        axis.text = element_text(size = 48),    # 设置坐标轴文字大小\n        legend.position = \"none\"                # 不显示图例\n    ) +\n    ylim(0, 20) +                             # 设置y轴范围\n    ylab(\"mark\") +                            # y轴标签\n    xlab(\"\")                                  # x轴标签为空\n\n\n\n\n\n\n\n左：雷达图；\n\n\n\n\n\n\n\n右：棒棒糖图\n\n\n\n\n\n\n雷达图不如棒棒糖直观\n\n\n\n\n\nShow/Hide Code\n# 创建数据：Jonathan在高中各科的成绩\nset.seed(7)\ndata &lt;- as.data.frame(matrix(sample(2:20, 10, replace = TRUE), ncol = 10))\ncolnames(data) &lt;- c(\n    \"math\",        # 数学\n    \"english\",     # 英语\n    \"biology\",     # 生物\n    \"music\",       # 音乐\n    \"R-coding\",    # R编程\n    \"data-viz\",    # 数据可视化\n    \"french\",      # 法语\n    \"physic\",      # 物理\n    \"statistic\",   # 统计\n    \"sport\"        # 体育\n)\n# 将前三门科目的成绩设为19，6~8门成绩设为4，突出差异\ndata[1, 1:3] &lt;- rep(19, 3)\ndata[1, 6:8] &lt;- rep(4, 3)\n# 按fmsb包要求，前两行为最大值和最小值\ndata &lt;- rbind(rep(20, 10), rep(0, 10), data)\n\n# 改变类别顺序，生成两组不同顺序的数据\ndata2 &lt;- data[, sample(1:10, 10, replace = FALSE)]\ndata3 &lt;- data[, sample(1:10, 10, replace = FALSE)]\n\n# 自定义雷达图，展示同一组数据在不同类别顺序下的形状变化\npar(mar = c(0, 0, 0, 0))      # 设置画布边距为0\npar(mfrow = c(1, 3))          # 一行三列布局，便于对比\n\n# 绘制第一组类别顺序的雷达图\nradarchart(\n    data,                       # 输入数据\n    axistype = 1,               # 坐标轴类型\n    pcol = rgb(0.2, 0.5, 0.5, 0.9),   # 多边形边框颜色\n    pfcol = rgb(0.2, 0.5, 0.5, 0.5),  # 多边形填充颜色\n    plwd = 4,                   # 多边形边框线宽\n    cglcol = \"grey\",            # 网格线颜色\n    cglty = 1,                  # 网格线类型\n    axislabcol = \"grey\",        # 轴标签颜色\n    caxislabels = seq(0, 20, 5),# 轴标签内容\n    cglwd = 0.8,                # 网格线宽\n    vlcex = 0.8                 # 变量标签字体大小\n)\n\n# 绘制第二组类别顺序的雷达图\nradarchart(\n    data2,                      # 输入数据（类别顺序已打乱）\n    axistype = 1,\n    pcol = rgb(0.2, 0.5, 0.5, 0.9),\n    pfcol = rgb(0.2, 0.5, 0.5, 0.5),\n    plwd = 4,\n    cglcol = \"grey\",\n    cglty = 1,\n    axislabcol = \"grey\",\n    caxislabels = seq(0, 20, 5),\n    cglwd = 0.8,\n    vlcex = 0.8\n)\n\n# 绘制第三组类别顺序的雷达图\nradarchart(\n    data3,                      # 输入数据（类别顺序再次打乱）\n    axistype = 1,\n    pcol = rgb(0.2, 0.5, 0.5, 0.9),\n    pfcol = rgb(0.2, 0.5, 0.5, 0.5),\n    plwd = 4,\n    cglcol = \"grey\",\n    cglty = 1,\n    axislabcol = \"grey\",\n    caxislabels = seq(0, 20, 5),\n    cglwd = 0.8,\n    vlcex = 0.8\n)\n\n\n\n\n\n类别顺序影响雷达图形状：同一组数据，不同类别顺序，形状差异巨大\n\n\n\n\nShow/Hide Code\npar(mfrow = c(1, 1)) # 重置布局\n\n\n\nShow/Hide Code\n# 生成一个包含5个科目的数据框，每个科目分数均为7\ndata &lt;- as.data.frame(matrix(c(7, 7, 7, 7, 7), ncol = 5))\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\"math\", \"english\", \"biology\", \"music\", \"R-coding\")\n\n# fmsb包要求数据框前两行为最大值和最小值，这里最大值为20，最小值为0\ndata &lt;- rbind(rep(20, 5), rep(0, 5), data)\n\n# 复制一份数据，作为第二组数据\ndata2 &lt;- data\n# 修改第三行（即实际数据），将分数全部设为14\ndata2[3, ] &lt;- rep(14, 5)\n\n# 设置画布边距为0，避免图形被裁剪\npar(mar = rep(0, 4))\n\n# 绘制第一组数据的雷达图\nradarchart(\n    data,                   # 输入数据\n    axistype = 1,           # 坐标轴类型\n    pcol = rgb(0.2, 0.5, 0.5, 0.9),   # 多边形边框颜色\n    pfcol = rgb(0.2, 0.5, 0.5, 0.5),  # 多边形填充颜色\n    plwd = 4,               # 多边形边框线宽\n    cglcol = \"grey\",        # 网格线颜色\n    cglty = 1,              # 网格线类型\n    axislabcol = \"grey\",    # 轴标签颜色\n    caxislabels = seq(0, 20, 5), # 轴标签内容\n    cglwd = 0.8,            # 网格线宽\n    vlcex = 0.8             # 变量标签字体大小\n)\n\n# 绘制第二组数据的雷达图\nradarchart(\n    data2,                  # 输入数据\n    axistype = 1,           # 坐标轴类型\n    pcol = rgb(0.2, 0.5, 0.5, 0.9),   # 多边形边框颜色\n    pfcol = rgb(0.2, 0.5, 0.5, 0.5),  # 多边形填充颜色\n    plwd = 4,               # 多边形边框线宽\n    cglcol = \"grey\",        # 网格线颜色\n    cglty = 1,              # 网格线类型\n    axislabcol = \"grey\",    # 轴标签颜色\n    caxislabels = seq(0, 20, 5), # 轴标签内容\n    cglwd = 0.8,            # 网格线宽\n    vlcex = 0.8             # 变量标签字体大小\n)\n\n\n\n\n\n\n\n左：所有科目分数均为7；\n\n\n\n\n\n\n\n右：所有科目分数均为14。\n\n\n\n\n\n\n雷达图过度评估了差距",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "spider.html#改进",
    "href": "spider.html#改进",
    "title": "14  Spider",
    "section": "14.3 改进",
    "text": "14.3 改进\n如果刻度相同, 可以使用条形图、棒棒糖图(吸管图)代替雷达图, 并进行排序\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(1)\n\n# 生成一个包含10个科目的数据框，每个科目随机生成一个2到20之间的整数\ndata &lt;- as.data.frame(matrix(sample(2:20, 10, replace = TRUE), ncol = 10))\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\n    \"math\",        # 数学\n    \"english\",     # 英语\n    \"biology\",     # 生物\n    \"music\",       # 音乐\n    \"R-coding\",    # R编程\n    \"data-viz\",    # 数据可视化\n    \"french\",      # 法语\n    \"physic\",      # 物理\n    \"statistic\",   # 统计\n    \"sport\"        # 体育\n)\n\n# 为了与雷达图数据结构一致，前两行为最大值和最小值\ndata &lt;- rbind(rep(20, 10), rep(0, 10), data)\n\n# 棒棒糖图：展示同一组数据的分布，更易于比较\ndata |&gt;\n    slice(3) |&gt;                         # 选取第三行（即实际数据，前两行为最大最小值）\n    t() |&gt;                              # 转置数据框，方便后续处理\n    as.data.frame() |&gt;                  # 转换为数据框\n    tibble::rownames_to_column() |&gt;     # 将行名（科目名）转为一列\n    arrange(V1) |&gt;                      # 按分数升序排列\n    mutate(rowname = factor(rowname, rowname)) |&gt; # 保持原有顺序\n    ggplot(aes(x = rowname, y = V1)) +  # 绘图，x轴为科目，y轴为分数\n    geom_segment(\n        aes(x = rowname, xend = rowname, y = 0, yend = V1),\n        color = \"grey\"                    # 绘制灰色线段\n    ) +\n    geom_point(size = 5, color = \"#69b3a2\") + # 绘制数据点\n    coord_flip() +                            # 翻转坐标轴，横向展示\n    theme_ipsum() +                           # 使用hrbrthemes包的主题\n    theme(\n        panel.grid.minor.y = element_blank(),   # 去除y轴次网格线\n        panel.grid.major.y = element_blank(),   # 去除y轴主网格线\n        axis.text = element_text(size = 48),    # 设置坐标轴文字大小\n        legend.position = \"none\"                # 不显示图例\n    ) +\n    ylim(0, 20) +                             # 设置y轴范围\n    ylab(\"mark\") +                            # y轴标签\n    xlab(\"\")                                  # x轴标签为空\n\n\n\n\n\n棒棒糖图：同一组数据的分数分布，更易于比较\n\n\n\n\n两个观测进行对比(哑铃图), 设置颜色或透明度来区分两组:\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(1)\n\n# 生成一个包含10个科目的数据框，每个科目随机生成一个2到20之间的整数，共两组观测\ndata &lt;- as.data.frame(matrix(sample(2:20, 20, replace = TRUE), ncol = 10))\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\n    \"math\",        # 数学\n    \"english\",     # 英语\n    \"biology\",     # 生物\n    \"music\",       # 音乐\n    \"R-coding\",    # R编程\n    \"data-viz\",    # 数据可视化\n    \"french\",      # 法语\n    \"physic\",      # 物理\n    \"statistic\",   # 统计\n    \"sport\"        # 体育\n)\n\n# 为了与雷达图数据结构一致，前两行为最大值和最小值\ndata &lt;- rbind(rep(20, 10), rep(0, 10), data)\n\n# 哑铃图：对比两组观测在各科目的分数差异\ndata |&gt;\n    slice(c(3, 4)) |&gt;                         # 选取第三、四行（即两组实际观测数据）\n    t() |&gt;                                    # 转置数据框，方便后续处理\n    as.data.frame() |&gt;                        # 转换为数据框\n    tibble::rownames_to_column() |&gt;           # 将行名（科目名）转为一列\n    arrange(V1) |&gt;                            # 按第一组分数升序排列\n    mutate(rowname = factor(rowname, rowname)) |&gt; # 保持原有顺序\n    ggplot(aes(x = rowname, y = V1)) +        # 绘图，x轴为科目，y轴为第一组分数\n    geom_segment(\n        aes(x = rowname, xend = rowname, y = V2, yend = V1),\n        color = \"grey\"                        # 绘制两组分数之间的线段\n    ) +\n    geom_point(size = 5, color = \"#69b3a2\") + # 绘制第一组分数的数据点\n    geom_point(aes(y = V2), size = 5, color = \"#69b3a2\", alpha = 0.5) + # 绘制第二组分数的数据点（透明）\n    coord_flip() +                            # 翻转坐标轴，横向展示\n    theme_ipsum() +                           # 使用hrbrthemes包的主题\n    theme(\n        panel.grid.minor.y = element_blank(),   # 去除y轴次网格线\n        panel.grid.major.y = element_blank(),   # 去除y轴主网格线\n        axis.text = element_text(size = 48)     # 设置坐标轴文字大小\n    ) +\n    ylim(0, 20) +                             # 设置y轴范围\n    ylab(\"mark\") +                            # y轴标签\n    xlab(\"\")                                  # x轴标签为空\n\n\n\n\n\n哑铃图：对比两组观测在各科目的分数差异\n\n\n\n\n观测很多考虑分面:\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(1)\n\n# 生成一个包含4位同学、10个科目的数据框，每个科目随机生成一个2到20之间的整数\ndata &lt;- as.data.frame(matrix(sample(2:20, 40, replace = TRUE), ncol = 10))\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\n    \"math\",        # 数学\n    \"english\",     # 英语\n    \"biology\",     # 生物\n    \"music\",       # 音乐\n    \"R-coding\",    # R编程\n    \"data-viz\",    # 数据可视化\n    \"french\",      # 法语\n    \"physic\",      # 物理\n    \"statistic\",   # 统计\n    \"sport\"        # 体育\n)\n\n# 为了使用fmsb包绘制雷达图，需要在数据框前面添加最大值和最小值两行\ndata &lt;- rbind(rep(20, 10), rep(0, 10), data)\n\n# 设置行名为4位同学\nrownames(data) &lt;- c(\"-\", \"--\", \"John\", \"Angli\", \"Baptiste\", \"Alfred\")\n\n# 数据整理：选取4位同学的数据，转置后整理为长格式，便于ggplot分面绘图\ndata |&gt;\n    slice(3:6) |&gt;                        # 选取第3到第6行（4位同学的成绩）\n    t() |&gt;                               # 转置数据框，行变为科目，列为同学\n    as.data.frame() |&gt;                   # 转换为数据框\n    tibble::rownames_to_column() |&gt;      # 将行名（科目名）转为一列\n    tidyr::gather(key = name, value = mark, -rowname) |&gt; # 宽数据转为长数据\n    mutate(\n        # 重编码同学姓名，便于分面标签美观\n        name = dplyr::recode(\n            name,\n            V1 = \"John\",\n            V2 = \"Angli\",\n            V3 = \"Baptiste\",\n            V4 = \"Alfred\"\n        ),\n        # 保持科目顺序\n        # rowname = factor(rowname, rowname)\n    ) |&gt;\n    # 绘图：分面棒棒糖图\n    ggplot(aes(x = rowname, y = mark)) +\n    geom_bar(stat = \"identity\", fill = \"#69b3a2\", width = 0.6) + # 绘制条形\n    coord_flip() +                                               # 翻转坐标轴，横向展示\n    theme_ipsum() +                                              # 使用hrbrthemes包的主题\n    theme(\n        panel.grid.minor.y = element_blank(),   # 去除y轴次网格线\n        panel.grid.major.y = element_blank(),   # 去除y轴主网格线\n        axis.text = element_text(size = 48)     # 设置坐标轴文字大小\n    ) +\n    ylim(0, 20) +                             # 设置y轴范围\n    ylab(\"mark\") +                            # y轴标签\n    xlab(\"\") +                                # x轴标签为空\n    facet_wrap(~name, ncol = 4)               # 按同学分面展示，每行4个分面\n\n\n\n\n\n分面棒棒糖图：多位同学各科成绩分布对比\n\n\n\n\n多系列且不同刻度:\n\n\nShow/Hide Code\n# 加载GGally包用于平行坐标图\nlibrary(GGally)\n# 加载示例数据集iris\ndata &lt;- iris\n\n# 使用ggparcoord绘制平行坐标图\ndata |&gt;\n    ggparcoord(\n        columns = 1:4,           # 选择前4列（花萼长度、花萼宽度、花瓣长度、花瓣宽度）\n        groupColumn = 5,         # 按第5列（Species，花的种类）分组上色\n        order = \"anyClass\",      # 变量顺序自动排列\n        showPoints = TRUE,       # 显示每个观测点\n        title = \"Parallel Coordinate Plot for the Iris Data\", # 图标题\n        alphaLines = 0.3         # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) + # 使用viridis配色方案\n    theme_ipsum()                          # 使用hrbrthemes包的美化主题\n\n\n\n\n\n鸢尾花数据集的平行坐标图：不同种类的花在各特征上的分布对比",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "spider.html#单组",
    "href": "spider.html#单组",
    "title": "14  Spider",
    "section": "14.4 单组",
    "text": "14.4 单组\n\n14.4.1 基本\n\n\nShow/Hide Code\n# 生成一个包含10个科目的数据框，每个科目随机生成一个2到20之间的整数\ndata &lt;- matrix(sample(2:20, 10, replace = TRUE), ncol = 10) |&gt;\n    as.data.frame()\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\n    \"math\",        # 数学\n    \"english\",     # 英语\n    \"biology\",     # 生物\n    \"music\",       # 音乐\n    \"R-coding\",    # R编程\n    \"data-viz\",    # 数据可视化\n    \"french\",      # 法语\n    \"physic\",      # 物理\n    \"statistic\",   # 统计\n    \"sport\"        # 体育\n)\n\n# 为了使用fmsb包绘制雷达图，需要在数据框前面添加最大值和最小值两行\ndata &lt;- rbind(rep(20, 10), rep(0, 10), data)\n\n# 检查数据格式是否正确\n# head(data)\n\n# 绘制默认的雷达图\nradarchart(data)\n\n\n\n\n\n基本雷达图\n\n\n\n\n\n\n14.4.2 定制\n\n\nShow/Hide Code\n# 使用 radarchart 绘制定制雷达图\nradarchart(\n    data,                # 输入数据\n    axistype = 1,        # 坐标轴类型\n\n    # 自定义多边形\n    pcol = rgb(0.2, 0.5, 0.5, 0.9),   # 多边形边框颜色\n    pfcol = rgb(0.2, 0.5, 0.5, 0.5),  # 多边形填充颜色\n    plwd = 4,                         # 多边形边框线宽\n\n    # 自定义网格\n    cglcol = \"grey\",                  # 网格线颜色\n    cglty = 1,                        # 网格线类型\n    axislabcol = \"grey\",              # 轴标签颜色\n    caxislabels = seq(0, 20, 5),      # 轴标签内容\n    cglwd = 0.8,                      # 网格线宽\n\n    # 自定义标签\n    vlcex = 0.8                       # 变量标签字体大小\n)\n\n\n\n\n\n定制雷达图：自定义多边形颜色、线宽、网格和标签",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "spider.html#多组",
    "href": "spider.html#多组",
    "title": "14  Spider",
    "section": "14.5 多组",
    "text": "14.5 多组\n\n14.5.1 基本\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(99)\n\n# 生成一个3行5列的数据框，表示3位同学在5个科目的分数（0~20之间不重复的整数）\ndata &lt;- matrix(sample(0:20, 15, replace = FALSE), ncol = 5) |&gt;\n    as.data.frame()\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\"math\", \"english\", \"biology\", \"music\", \"R-coding\")\n\n# 设置行名为三位同学\nrownames(data) &lt;- paste(\"mister\", letters[1:3], sep = \"-\")\n\n# fmsb包要求数据框前两行为最大值和最小值\ndata &lt;- rbind(rep(20, 5), rep(0, 5), data)\n\n# 绘制多组雷达图，展示三位同学的成绩分布\nradarchart(data)\n\n\n\n\n\n多组雷达图：展示三位同学在五个科目的表现\n\n\n\n\n\n\n14.5.2 定制\n\n\nShow/Hide Code\n# 定义多边形边框颜色向量\ncolors_border &lt;- c(\n    rgb(0.2, 0.5, 0.5, 0.9),  # 第一位同学的边框颜色\n    rgb(0.8, 0.2, 0.5, 0.9),  # 第二位同学的边框颜色\n    rgb(0.7, 0.5, 0.1, 0.9)   # 第三位同学的边框颜色\n)\n\n# 定义多边形填充颜色向量\ncolors_in &lt;- c(\n    rgb(0.2, 0.5, 0.5, 0.4),  # 第一位同学的填充颜色\n    rgb(0.8, 0.2, 0.5, 0.4),  # 第二位同学的填充颜色\n    rgb(0.7, 0.5, 0.1, 0.4)   # 第三位同学的填充颜色\n)\n\n# 绘制定制多组雷达图\nradarchart(\n    data,                # 输入数据\n    axistype = 1,        # 坐标轴类型\n\n    # 自定义多边形\n    pcol = colors_border,    # 多边形边框颜色\n    pfcol = colors_in,       # 多边形填充颜色\n    plwd = 4,                # 多边形边框线宽\n    plty = 1,                # 多边形线型\n\n    # 自定义网格\n    cglcol = \"grey\",         # 网格线颜色\n    cglty = 1,               # 网格线类型\n    axislabcol = \"grey\",     # 轴标签颜色\n    caxislabels = seq(0, 20, 5), # 轴标签内容\n    cglwd = 0.8,             # 网格线宽\n\n    # 自定义标签\n    vlcex = 0.8              # 变量标签字体大小\n)\n\n# 添加图例，标注每位同学对应的颜色\nlegend(\n    x = 0.7,                             # 图例x坐标\n    y = 1,                               # 图例y坐标\n    legend = rownames(data[-c(1, 2), ]), # 图例标签（去除最大最小值行）\n    bty = \"n\",                           # 无边框\n    pch = 20,                            # 图例点类型\n    col = colors_in,                     # 图例点颜色\n    text.col = \"grey\",                   # 图例文字颜色\n    cex = 1.2,                           # 图例字体大小\n    pt.cex = 3                           # 图例点大小\n)\n\n\n\n\n\n定制多组雷达图：不同颜色区分三位同学的成绩，并添加图例\n\n\n\n\n\n\n14.5.3 坐标轴\n如果没有输入坐标轴最大值和最小值, 则会自动计算.\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(99)\n\n# 生成一个3行5列的数据框，表示3位同学在5个科目的分数（0~20之间不重复的整数）\ndata &lt;- matrix(sample(0:20, 15, replace = FALSE), ncol = 5) |&gt;\n    as.data.frame()\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\"math\", \"english\", \"biology\", \"music\", \"R-coding\")\n\n# 设置行名为三位同学\nrownames(data) &lt;- paste(\"mister\", letters[1:3], sep = \"-\")\n\n# 生成配色方案\ncoul &lt;- brewer.pal(3, \"BuPu\")      # 选取3种颜色\ncolors_border &lt;- coul              # 多边形边框颜色\ncolors_in &lt;- alpha(coul, 0.3)      # 多边形填充颜色，带透明度\n\n# 不添加最大最小值行，radarchart会自动根据数据计算坐标轴范围\nradarchart(\n    data,                # 输入数据（不含最大最小值行）\n    axistype = 0,        # 坐标轴类型\n    maxmin = FALSE,      # 不手动指定最大最小值，自动计算\n\n    # 自定义多边形\n    pcol = colors_border,    # 多边形边框颜色\n    pfcol = colors_in,       # 多边形填充颜色\n    plwd = 4,                # 多边形边框线宽\n    plty = 1,                # 多边形线型\n\n    # 自定义网格\n    cglcol = \"grey\",         # 网格线颜色\n    cglty = 1,               # 网格线类型\n    axislabcol = \"black\",    # 轴标签颜色\n    cglwd = 0.8,             # 网格线宽\n\n    # 自定义标签\n    vlcex = 0.8              # 变量标签字体大小\n)\n\n# 添加图例，标注每位同学对应的颜色\nlegend(\n    x = 0.7,                             # 图例x坐标\n    y = 1,                               # 图例y坐标\n    legend = rownames(data),             # 图例标签\n    bty = \"n\",                           # 无边框\n    pch = 20,                            # 图例点类型\n    col = colors_in,                     # 图例点颜色\n    text.col = \"grey\",                   # 图例文字颜色\n    cex = 1.2,                           # 图例字体大小\n    pt.cex = 3                           # 图例点大小\n)\n\n\n\n\n\n自动计算坐标轴范围的雷达图：不手动输入最大最小值",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "spider.html#超多组",
    "href": "spider.html#超多组",
    "title": "14  Spider",
    "section": "14.6 超多组",
    "text": "14.6 超多组\n不建议放到一个图中, 但可以分面展示(不是ggplot 分面语法):\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(1)\n\n# 生成一个6行10列的数据框，表示6位同学在10个科目的分数（2~20之间可重复）\ndata &lt;- matrix(\n    sample(2:20, 60, replace = TRUE), # 随机生成60个2~20之间的整数\n    ncol = 10,                        # 每行10个科目\n    byrow = TRUE                      # 按行填充\n) |&gt; \n    as.data.frame()                   # 转换为数据框\n\n# 设置列名为各个科目\ncolnames(data) &lt;- c(\n    \"math\",        # 数学\n    \"english\",     # 英语\n    \"biology\",     # 生物\n    \"music\",       # 音乐\n    \"R-coding\",    # R编程\n    \"data-viz\",    # 数据可视化\n    \"french\",      # 法语\n    \"physic\",      # 物理\n    \"statistic\",   # 统计\n    \"sport\"        # 体育\n)\n\n# fmsb包要求数据框前两行为最大值和最小值\ndata &lt;- rbind(rep(20, 10), rep(0, 10), data)\n\n# 生成配色方案，6种颜色\ncolors_border &lt;- colormap(colormap = colormaps$viridis, nshades = 6, alpha = 1)\ncolors_in &lt;- colormap(colormap = colormaps$viridis, nshades = 6, alpha = 0.3)\n\n# 设置每个子图的标题\nmytitle &lt;- c(\"Max\", \"George\", \"Xue\", \"Tom\", \"Alice\", \"bob\")\n\n# 设置画布边距\npar(mar = rep(0.8, 4))\n# 将画布分为2行3列，准备绘制6个子图\npar(mfrow = c(2, 3))\n\n# 循环绘制每位同学的雷达图\nfor (i in 1:6) {\n    radarchart(\n        data[c(1, 2, i + 2), ],   # 选取最大值、最小值和第i位同学的数据\n        axistype = 1,             # 坐标轴类型\n\n        # 多边形样式\n        pcol = colors_border[i],  # 多边形边框颜色\n        pfcol = colors_in[i],     # 多边形填充颜色\n        plwd = 4,                 # 多边形边框线宽\n        plty = 1,                 # 多边形线型\n\n        # 网格样式\n        cglcol = \"grey\",          # 网格线颜色\n        cglty = 1,                # 网格线类型\n        axislabcol = \"grey\",      # 轴标签颜色\n        caxislabels = seq(0, 20, 5), # 轴标签内容\n        cglwd = 0.8,              # 网格线宽\n\n        # 标签样式\n        vlcex = 0.8,              # 变量标签字体大小\n\n        # 子图标题\n        title = mytitle[i]\n    )\n}\n\n\n\n\n\n超多组雷达图：6位同学各自成绩的雷达图分面展示\n\n\n\n\nShow/Hide Code\n# 恢复默认的画布设置\npar(mfrow = c(1, 1))",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "spider.html#ggradar",
    "href": "spider.html#ggradar",
    "title": "14  Spider",
    "section": "14.7 ggradar",
    "text": "14.7 ggradar\n首先准备数据:\n\n\nShow/Hide Code\n# 加载palmerpenguins数据集\ndata(\"penguins\", package = \"palmerpenguins\")\n\n# 数据整理：去除缺失值，按species分组，计算各特征均值，并标准化到[0,1]区间\npenguins_radar &lt;- penguins |&gt;\n    drop_na() |&gt;\n    group_by(species) |&gt;\n    summarise(\n        avg_bill_length = mean(bill_length_mm),   # 喙长均值\n        avg_bill_dept = mean(bill_depth_mm),      # 喙深均值\n        avg_flipper_length = mean(flipper_length_mm), # 翼长均值\n        avg_body_mass = mean(body_mass_g)         # 体重均值\n    ) |&gt;\n    ungroup() |&gt;\n    mutate(across(-species, rescale))           # 除species外所有列标准化到[0,1]\n\n\n\n\nShow/Hide Code\n# 使用ggradar包绘制企鹅三种类在各特征上的标准化均值雷达图\nplt &lt;- penguins_radar |&gt; ggradar()\nplt\n\n\n\n\n\n企鹅三种类在各特征上的标准化均值雷达图（ggradar）\n\n\n\n\n\n\nShow/Hide Code\n# 对ggradar绘图对象进行美化，调整图例位置、字体和背景\nplt &lt;- plt + \n  theme(\n    legend.position = c(0.85, 0.1),   # 图例位置\n    legend.text = element_text(size = 28), # 图例文字大小\n    legend.key = element_rect(fill = NA, color = NA), # 图例键背景\n    legend.background = element_blank() # 图例背景\n  )\nplt\n\n\n\n\n\n美化后的企鹅三种类标准化均值雷达图（ggradar）\n\n\n\n\n\n\nShow/Hide Code\nplt &lt;- plt + \n  labs(title = \"Radar plot of penguins species\") + \n  theme(\n      plot.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\"),\n      panel.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\"),\n      plot.title.position = \"plot\", # slightly different from default\n      plot.title = element_text(\n        family = \"lobstertwo\", \n        size = 62,\n        face = \"bold\", \n        color = \"#2a475e\"\n    )\n  )\nplt\n\n\n\n\n\n美化最终版后的企鹅三种类标准化均值雷达图（ggradar）",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "spider.html#pearl",
    "href": "spider.html#pearl",
    "title": "14  Spider",
    "section": "14.8 Pearl",
    "text": "14.8 Pearl\n\nHiking Locations in Washington 的优美环状条形图\n\n\n\n\nHiking Locations in Washington",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "wordcloud.html",
    "href": "wordcloud.html",
    "title": "15  Wordcloud",
    "section": "",
    "text": "15.1 PKG\n在 R 中，有两个包可以用来创建词云： wordcloud 和 wordcloud2 。\nShow/Hide Code\nlibrary(wordcloud)\nlibrary(wordcloud2)\n由于 wordcloud2 生成的词云无法被 quarto正确渲染，因此需要使用 htmltools 包来处理。\nShow/Hide Code\nlibrary(htmltools)\nlibrary(knitr) # 需要 knitr 来获取代码块标签\n\nembed_widget &lt;- function(widget, height = \"400px\", width = \"100%\") {\n  # 步骤 1: 生成一个基于当前代码块标签的、独一无二的文件名\n  # 这样可以防止多个小部件相互覆盖文件\n  chunk_label &lt;- opts_current$get('label')\n  filename &lt;- paste0(\"./wordcloud/wc-\", chunk_label, \".html\")\n  \n  # 步骤 2: 将小部件保存为一个独立的、自包含的HTML文件\n  library(htmlwidgets)\n  saveWidget(widget, filename, selfcontained = TRUE)\n  \n  # 步骤 3: 创建并返回一个指向该文件的 iframe HTML 标签\n  tags$iframe(\n    src = filename,\n    height = height,\n    width = width,\n    style = \"border:none;\"\n  )\n}",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wordcloud</span>"
    ]
  },
  {
    "objectID": "wordcloud.html#问题",
    "href": "wordcloud.html#问题",
    "title": "15  Wordcloud",
    "section": "15.2 问题",
    "text": "15.2 问题\n在社交媒体上常用. 然而, Building a wordcloud is a pitfall on its own, except if it is done for aesthetic reasons:\n\nArea is a poor metaphor of a numeric value, it is hardly perceive by the human eye\nLonger words appear bigger by construction",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wordcloud</span>"
    ]
  },
  {
    "objectID": "wordcloud.html#wordcloud2",
    "href": "wordcloud.html#wordcloud2",
    "title": "15  Wordcloud",
    "section": "15.3 wordcloud2",
    "text": "15.3 wordcloud2\nwordcloud2 包是 R 中最好的词云包, 提供丰富的功能和更美观的输出。\n\n\nShow/Hide Code\nhead(demoFreq) |&gt; knitr::kable(caption = \"示例数据,两列, 第一列是word, 第二列是频率\")\n\n\n\n示例数据,两列, 第一列是word, 第二列是频率\n\n\n\nword\nfreq\n\n\n\n\noil\noil\n85\n\n\nsaid\nsaid\n73\n\n\nprices\nprices\n48\n\n\nopec\nopec\n42\n\n\nmln\nmln\n31\n\n\nthe\nthe\n26\n\n\n\n\n\n\n\nShow/Hide Code\np &lt;- wordcloud2(data = demoFreq, size = 1.6) # 词云示例\nembed_widget(p)\n\n\n\n词云示例\n\n\n\n15.3.1 color\n\n\nShow/Hide Code\np &lt;- wordcloud2(demoFreq, size=1.6, color='random-dark')\nembed_widget(p)\n\n\n\n\n\n\n\nShow/Hide Code\np &lt;- wordcloud2(demoFreq, size=1.6, color=rep_len(c(\"green\",\"blue\"), nrow(demoFreq)))\nembed_widget(p)\n\n\n\n\n\n\n\nShow/Hide Code\np &lt;- wordcloud2(demoFreq, size=1.6, color='random-light', backgroundColor=\"black\")\nembed_widget(p)\n\n\n\n\n\n\n\n15.3.2 shape\nshape 参数来自定义词云的形状。可用的形状有：\n\ncircle\ncardioid\ndiamond\ntriangle-forward\ntriangle\npentagon\nstar\n\n\n\nShow/Hide Code\np &lt;- wordcloud2(demoFreq, size = 0.7, shape = 'star')\nembed_widget(p)\n\n\n\n\n\n或者使用图片作为蒙版:\n\n\nShow/Hide Code\n# 自己测试没有成功\nwordcloud2(\n  demoFreq,\n  figPath = \"~/Desktop/R-graph-gallery/img/other/peaceAndLove.jpg\",\n  size = 1.5,\n  color = \"skyblue\",\n  backgroundColor = \"black\"\n)\n\n\n\n\n\n图片蒙版\n\n\n\n\n15.3.3 方向\n使用三个参数旋转文字： minRotation , maxRotation 和 rotateRatio\n\n\nShow/Hide Code\np &lt;- wordcloud2(\n  demoFreq,\n  size = 2.3,\n  minRotation = -pi / 6, # 最小旋转角度\n  maxRotation = -pi / 6, # 最大旋转角度\n  rotateRatio = 1 # 旋转比例\n)\nembed_widget(p)\n\n\n\n\n\n\n\n15.3.4 中文\n\n\nShow/Hide Code\np &lt;- wordcloud2(\n  demoFreqC,\n  size = 2,\n  # fontFamily = \"Pingfang SC\",\n  color = \"random-light\",\n  backgroundColor = \"grey\"\n)\nembed_widget(p)\n\n\n\n\n\n\n\n15.3.5 字母\n函数 letterCloud 允许使用字母或单词作为词云的遮罩\n\n\nShow/Hide Code\n# 字母遮罩\nletterCloud(\n  demoFreq,\n  word = \"R\",\n  color = 'random-light',\n  backgroundColor = \"black\"\n)\n\n# 单词遮罩\nletterCloud(demoFreq, word = \"PEACE\", color = \"white\", backgroundColor = \"pink\")\n\n\n\nShow/Hide Code\nknitr::include_graphics(\"./image/wc-letter.png\")\nknitr::include_graphics(\"./image/wc-word.png\")\n\n\n\n\n\n\n\n左侧 字母遮罩\n\n\n\n\n\n\n\n右侧 单词遮罩\n\n\n\n\n\n\n字母和单词遮罩示例\n\n\n\n\n\n15.3.6 导出\n\n\nShow/Hide Code\n# 安装 webshot 包（如未安装）\nlibrary(webshot)\n# 安装 PhantomJS（仅需安装一次，用于网页截图）\nwebshot::install_phantomjs()\n\n# 创建词云图对象\nmy_graph &lt;- wordcloud2(demoFreq, size = 1.5)\n\n# 保存为 HTML 文件（selfcontained = FALSE 表示资源分离存储）\nlibrary(htmlwidgets)\nsaveWidget(my_graph, \"tmp.html\", selfcontained = FALSE)\n\n# 使用 webshot 将 HTML 文件导出为 PDF 文件\n# delay 参数确保词云渲染完成，vwidth/vheight 设置输出尺寸\nwebshot(\"tmp.html\", \"fig_1.pdf\", delay = 5, vwidth = 480, vheight = 480)",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wordcloud</span>"
    ]
  },
  {
    "objectID": "wordcloud.html#wordcloud",
    "href": "wordcloud.html#wordcloud",
    "title": "15  Wordcloud",
    "section": "15.4 wordcloud",
    "text": "15.4 wordcloud\nwordcloud 包提供了基本的词云功能，但在可定制性和美观性方面不如 wordcloud2 包。\n\n\nShow/Hide Code\n# 构建词语向量\na &lt;- c(\n    \"Cereal\",\n    \"WSSMV\",\n    \"SBCMV\",\n    \"Experimentation\",\n    \"Talk\",\n    \"Conference\",\n    \"Writing\",\n    \"Publication\",\n    \"Analysis\",\n    \"Bioinformatics\",\n    \"Science\",\n    \"Statistics\",\n    \"Data\",\n    \"Programming\",\n    \"Wheat\",\n    \"Virus\",\n    \"Genotyping\",\n    \"Work\",\n    \"Fun\",\n    \"Surfing\",\n    \"R\",\n    \"R\",\n    \"Data-Viz\",\n    \"Python\",\n    \"Linux\",\n    \"Programming\",\n    \"Graph Gallery\",\n    \"Biologie\",\n    \"Resistance\",\n    \"Computing\",\n    \"Data-Science\",\n    \"Reproductible\",\n    \"GitHub\",\n    \"Script\"\n)\n\n# 为每个词语随机分配一个频率（0~1之间，步长0.01）\nb &lt;- sample(seq(0, 1, 0.01), length(a), replace = TRUE)\n\n# 设置图形背景为黑色\npar(bg = \"black\")\n\nwordcloud(\n    words = a, # 词语向量\n    freq = b, # 频率向量\n    col = terrain.colors(length(a), alpha = 0.9), # 颜色方案\n    rot.per = 0.3 # 旋转比例\n)\n\n\n\n\n\n使用 wordcloud 包生成的基础词云示例\n\n\n\n\n\n15.4.1 文本分析\n文本分析",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wordcloud</span>"
    ]
  },
  {
    "objectID": "parallel.html",
    "href": "parallel.html",
    "title": "16  Parallel",
    "section": "",
    "text": "16.1 PKG\nShow/Hide Code\n# Libraries\nlibrary(tidyverse)\nlibrary(hrbrthemes) # 主题\nlibrary(patchwork) # 拼接图\nlibrary(GGally) # 平行坐标图\nlibrary(viridis) # 颜色\nlibrary(ggbump) # 平行坐标图",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Parallel</span>"
    ]
  },
  {
    "objectID": "parallel.html#是什么",
    "href": "parallel.html#是什么",
    "title": "16  Parallel",
    "section": "16.2 是什么?",
    "text": "16.2 是什么?\nìris 数据集为 150 朵花样本（每朵用颜色线表示）提供了四个特征（每个用垂直线表示）。样本分为三种物种。下方的图表高效地突显出，山鸢尾的花瓣较小，但其萼片倾向于更宽。\n平行坐标图相当于蜘蛛图，但使用笛卡尔坐标。比蜘蛛图更易于阅读，尤其是当变量/观测数量较多时。\n\n\nShow/Hide Code\n# 使用R自带的iris数据集\ndata &lt;- iris\n\n# 绘制平行坐标图\ndata |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量\n        groupColumn = 5,              # 第5列（Species）作为分组变量\n        order = \"anyClass\",           # 自动排序变量\n        showPoints = TRUE,            # 显示数据点\n        title = \"Parallel Coordinate Plot for the Iris Data\", # 图标题\n        alphaLines = 0.3              # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) + # 使用viridis色带\n    theme_ipsum() +                       # 应用hrbrthemes主题\n    theme(\n        plot.title = element_text(size = 10) # 设置标题字体大小\n    )\n\n\n\n\n\n\n\n\n\n变量 和 单位 可以不同:\n下图比较了四个使用不同单位的变量，例如价格（美元）或深度（百分比）。请注意使用缩放 (见下文) 以便进行比较。\n\n\nShow/Hide Code\n# 从diamonds数据集中随机抽取10个样本，绘制平行坐标图\ndiamonds |&gt;\n    sample_n(10) |&gt; # 随机抽取10行\n    ggparcoord(\n        columns = c(1, 5:7),      # 选择第1、5、6、7列作为变量\n        groupColumn = 2,          # 用第2列（cut）作为分组变量\n        #order = \"anyClass\",      # 可选：自动排序变量\n        showPoints = TRUE,        # 显示数据点\n        title = \"Diamonds features\", # 图标题\n        alphaLines = 0.3          # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) + # 使用viridis色带\n    theme_ipsum() +                       # 应用hrbrthemes主题\n    theme(\n        plot.title = element_text(size = 10) # 设置标题字体大小\n    )\n\n\n\n\n\n\n\n\n\n坐标轴顺序:\n\n\nShow/Hide Code\n# 原始顺序的平行坐标图\np1 &lt;- data |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量\n        groupColumn = 5,              # 第5列（Species）作为分组变量\n        order = c(1:4),               # 按原始顺序排列坐标轴\n        showPoints = TRUE,            # 显示数据点\n        title = \"Original\",           # 图标题\n        alphaLines = 0.3              # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) + # 使用viridis色带\n    theme_ipsum() +                       # 应用hrbrthemes主题\n    theme(\n        legend.position = \"default\",         # 图例位置为默认\n        plot.title = element_text(size = 10) # 设置标题字体大小\n    ) +\n    xlab(\"\")\n\n# 自动排序后的平行坐标图\np2 &lt;- data |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量\n        groupColumn = 5,              # 第5列（Species）作为分组变量\n        order = \"anyClass\",           # 自动排序坐标轴\n        showPoints = TRUE,            # 显示数据点\n        title = \"Re-ordered\",         # 图标题\n        alphaLines = 0.3              # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(\n        legend.position = \"none\",             # 不显示图例\n        plot.title = element_text(size = 10)\n    ) +\n    xlab(\"\")\n\n# 拼接两个不同坐标轴顺序的平行坐标图\np1 + p2\n\n\n\n\n\n比较不同坐标轴顺序对平行坐标图的影响\n\n\n\n\n关键点:\n\n和折线图一样，展示太多样本会导致杂乱无章、难以辨认的面条图。\n应该将变量在 X 轴上排序，尽量避免样本线交叉。\n尝试不同的缩放比例，找到最适合数据的",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Parallel</span>"
    ]
  },
  {
    "objectID": "parallel.html#ggally",
    "href": "parallel.html#ggally",
    "title": "16  Parallel",
    "section": "16.3 ggally",
    "text": "16.3 ggally\n\n16.3.1 基本\n\n\nShow/Hide Code\n# 使用ggparcoord函数绘制iris数据集的基础平行坐标图\niris |&gt;\n    ggparcoord(\n        columns = 1:4,      # 选择前4列作为变量（花萼长度、花萼宽度、花瓣长度、花瓣宽度）\n        groupColumn = 5     # 第5列（Species）作为分组变量，不同物种用不同颜色区分\n    )\n\n\n\n\n\n使用ggparcoord绘制iris数据集的基础平行坐标图\n\n\n\n\n\n\n16.3.2 定制\n\n\nShow/Hide Code\n# 使用ggparcoord绘制iris数据集的平行坐标图，并进行详细定制\niris |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量（花萼长度、花萼宽度、花瓣长度、花瓣宽度）\n        groupColumn = 5,              # 第5列（Species）作为分组变量，不同物种用不同颜色区分\n        order = \"anyClass\",           # 自动排序变量顺序，减少线条交叉\n        showPoints = TRUE,            # 显示每个观测点\n        title = \"Parallel Coordinate Plot for the Iris Data\", # 图标题\n        alphaLines = 0.3              # 线条透明度，便于观察重叠\n    ) +\n    scale_color_viridis(discrete = TRUE) + # 使用viridis色带，提升可读性\n    theme_ipsum() +                       # 应用hrbrthemes主题，美化图形\n    theme(\n        plot.title = element_text(size = 10) # 设置标题字体大小\n    )\n\n\n\n\n\n自定义配色与主题的平行坐标图示例\n\n\n\n\n\n\n16.3.3 缩放\nggally 的 scale 参数有四种可能的选项：\n\nglobalminmax → 不进行缩放\nuniminmax → 标准化到 Min = 0 和 Max = 1\nstd → 单变量标准化（减去均值并除以标准差）\ncenter → 标准化和中心化变量\n\n\n\nShow/Hide Code\n# 不进行缩放\np1 &lt;- data |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量\n        groupColumn = 5,              # 第5列（Species）作为分组变量\n        order = \"anyClass\",           # 自动排序变量\n        scale = \"globalminmax\",       # 全局最小最大值缩放（无缩放）\n        showPoints = TRUE,            # 显示数据点\n        title = \"No scaling\",         # 图标题\n        alphaLines = 0.3              # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) + # 使用viridis色带\n    theme_ipsum() +                       # 应用hrbrthemes主题\n    theme(\n        legend.position = \"none\",           # 不显示图例\n        plot.title = element_text(size = 10) # 设置标题字体大小\n    ) +\n    xlab(\"\")\n\n# 每个变量标准化到[0,1]区间\np2 &lt;- data |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量\n        groupColumn = 5,              # 第5列（Species）作为分组变量\n        order = \"anyClass\",           # 自动排序变量\n        scale = \"uniminmax\",          # 每个变量单独缩放到[0,1]\n        showPoints = TRUE,            # 显示数据点\n        title = \"Standardize to Min = 0 and Max = 1\", # 图标题\n        alphaLines = 0.3              # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(\n        legend.position = \"none\",\n        plot.title = element_text(size = 10)\n    ) +\n    xlab(\"\")\n\n# 每个变量减去均值再除以标准差（标准化）\np3 &lt;- data |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量\n        groupColumn = 5,              # 第5列（Species）作为分组变量\n        order = \"anyClass\",           # 自动排序变量\n        scale = \"std\",                # 标准化（减均值除标准差）\n        showPoints = TRUE,            # 显示数据点\n        title = \"Normalize univariately (substract mean & divide by sd)\", # 图标题\n        alphaLines = 0.3              # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(\n        legend.position = \"none\",\n        plot.title = element_text(size = 10)\n    ) +\n    xlab(\"\")\n\n# 每个变量中心化（减去均值）\np4 &lt;- data |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量\n        groupColumn = 5,              # 第5列（Species）作为分组变量\n        order = \"anyClass\",           # 自动排序变量\n        scale = \"center\",             # 中心化（减去均值）\n        showPoints = TRUE,            # 显示数据点\n        title = \"Standardize and center variables\", # 图标题\n        alphaLines = 0.3              # 线条透明度\n    ) +\n    scale_color_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(\n        legend.position = \"none\",\n        plot.title = element_text(size = 10)\n    ) +\n    xlab(\"\")\n\n# 拼接四种缩放方式的平行坐标图\np1 + p2 + p3 + p4 + plot_layout(ncol = 2)\n\n\n\n\n\n比较不同缩放方法对平行坐标图的影响\n\n\n\n\n\n\n16.3.4 高亮\n\n\nShow/Hide Code\ndata |&gt;\n    ggparcoord(\n        columns = 1:4,                # 选择前4列作为变量\n        groupColumn = 5,              # 第5列（Species）作为分组变量\n        order = \"anyClass\",           # 自动排序变量顺序\n        showPoints = TRUE,            # 显示数据点\n        title = \"Original\",           # 图标题\n        alphaLines = 0.3              # 线条透明度\n    ) +\n    scale_color_manual(values = c(\"#69b3a2\", \"grey\", \"grey\")) + # 手动设置颜色，突出显示第一个类别\n    theme_ipsum() +                       # 应用hrbrthemes主题\n    theme(\n        legend.position = \"default\",        # 图例位置为默认\n        plot.title = element_text(size = 10) # 设置标题字体大小\n    ) +\n    xlab(\"\")                             # 去除x轴标签\n\n\n\n\n\n突出显示某一类别的平行坐标图",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Parallel</span>"
    ]
  },
  {
    "objectID": "parallel.html#mass",
    "href": "parallel.html#mass",
    "title": "16  Parallel",
    "section": "16.4 mass",
    "text": "16.4 mass\n顺序至关重要呢! 需要改变输入数据的列顺序，以便在平行坐标图中正确显示变量。\n\n16.4.1 顺序\n\n\nShow/Hide Code\n# 加载所需包\nlibrary(MASS)         # 提供parcoord函数\nlibrary(RColorBrewer) # 提供调色板\n\n# 设置调色板，选用Set1配色方案的前3种颜色\npalette &lt;- brewer.pal(3, \"Set1\")\n# 根据iris数据集的Species列为每个样本分配颜色\nmy_colors &lt;- palette[as.numeric(iris$Species)]\n\n# 使用parcoord函数绘制平行坐标图\nparcoord(\n    iris[, c(1, 3, 4, 2)], # 选择变量顺序（花萼长度、花瓣长度、花瓣宽度、花萼宽度）\n    col = my_colors        # 按物种分配颜色\n)\n\n\n\n\n\n使用MASS包的parcoord函数绘制iris数据集的平行坐标图（自定义配色）\n\n\n\n\n\n\n16.4.2 高亮\n\n\nShow/Hide Code\n# 创建一个颜色向量，setosa类别为红色，其余为灰色\nisSetosa &lt;- ifelse(iris$Species == \"setosa\", \"red\", \"grey\")\n\n# 使用parcoord函数绘制平行坐标图\n# 选择变量顺序（花萼长度、花瓣长度、花瓣宽度、花萼宽度）\n# setosa类别用红色高亮，其余类别为灰色\nparcoord(\n    iris[, c(1, 3, 4, 2)], # 选择变量顺序\n    col = isSetosa         # 按类别分配颜色\n)\n\n\n\n\n\n突出显示setosa类别的平行坐标图（MASS::parcoord）",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Parallel</span>"
    ]
  },
  {
    "objectID": "parallel.html#ggbump",
    "href": "parallel.html#ggbump",
    "title": "16  Parallel",
    "section": "16.5 ggbump",
    "text": "16.5 ggbump\n\n\nShow/Hide Code\n# 创建数据\nyear &lt;- rep(2019:2021, 3) # 年份，每个门店3年\nproducts_sold &lt;- c(\n    500, 600, 700,   # Store A 各年份销量\n    550, 650, 600,   # Store B 各年份销量\n    600, 400, 500    # Store C 各年份销量\n)\nstore &lt;- c(\n    \"Store A\", \"Store A\", \"Store A\",\n    \"Store B\", \"Store B\", \"Store B\",\n    \"Store C\", \"Store C\", \"Store C\"\n)\n\n# 创建数据框\ndf &lt;- data.frame(\n    year = year,\n    products_sold = products_sold,\n    store = store\n)\n\n# 绘制bump图，展示不同门店产品销量随年份的变化\nggplot(df, aes(x = year, y = products_sold, color = store)) +\n    geom_bump(size = 2) # 使用geom_bump绘制平滑的连线\n\n\n\n\n\n使用ggbump绘制不同门店产品销量随年份变化的平行坐标（bump）图\n\n\n\n\n\n16.5.1 点\n\n\nShow/Hide Code\n# 使用ggplot绘制bump图，并在每个数据点处添加圆点\nggplot(df, aes(x = year, y = products_sold, color = store)) +\n    geom_bump(size = 2) +         # 绘制平滑的bump连线，展示销量变化趋势\n    geom_point(size = 6)          # 在每个年份的销量位置添加大圆点，突出显示具体数值\n\n\n\n\n\n在bump图中添加数据点，展示不同门店各年份销量的具体数值",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Parallel</span>"
    ]
  },
  {
    "objectID": "parallel.html#pearl",
    "href": "parallel.html#pearl",
    "title": "16  Parallel",
    "section": "16.6 Pearl",
    "text": "16.6 Pearl\n\n\n\nRadar Chart",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Parallel</span>"
    ]
  },
  {
    "objectID": "lollipop.html",
    "href": "lollipop.html",
    "title": "17  Lollipop",
    "section": "",
    "text": "17.1 PKG\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(hrbrthemes)\nlibrary(patchwork)\nshowtext::showtext.auto()",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lollipop</span>"
    ]
  },
  {
    "objectID": "lollipop.html#lollipop",
    "href": "lollipop.html#lollipop",
    "title": "17  Lollipop",
    "section": "17.2 lollipop",
    "text": "17.2 lollipop\nLollipop plot 本质上是bar plot 的变种，主要用于展示 分类变量 vs 数值变量 的关系。\n这里有一个例子，展示了 2017 年 20 个最大出口国出口的武器数量：\n\n\nShow/Hide Code\n# 读取数据：从指定的 csv 文件读取数据\ndata &lt;- read_csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/7_OneCatOneNum.csv\")\n\n# 绘制 Lollipop 图\ndata |&gt;\n    filter(!is.na(Value)) |&gt; # 过滤掉 Value 为 NA 的行\n    arrange(Value) |&gt; # 按 Value 升序排列\n    tail(20) |&gt; # 取出 Value 最大的 20 个国家\n    mutate(Country = factor(Country, Country)) |&gt; # 保持国家顺序\n    ggplot(aes(y = Country, x = Value)) + # 设置 x, y 轴\n    geom_segment(\n        # 绘制竖线（lollipop 的“棒”）\n        aes(x = 0, y = Country, xend = Value, yend = Country),\n        color = \"grey\"\n    ) +\n    geom_point(size = 3, color = \"#69b3a2\") + # 绘制点（lollipop 的“糖”）\n    theme_ipsum() + # 使用 hrbrthemes 包的主题\n    theme(\n        panel.grid.minor.y = element_blank(), # 去除次要网格线\n        panel.grid.major.y = element_blank(), # 去除主要网格线\n        legend.position = \"none\" # 不显示图例\n    ) +\n    labs(\n        y = \"\",\n        x = \"武器出口数量\",\n    )\n\n\n\n\n\n2017 年 20 个最大出口国的武器出口数量\n\n\n\n\n与条形图相比, 有多个高度相同的条形时，Lollipop plot 特别有用：可以避免出现 cluttered 图形和摩尔效应。\n\n\nShow/Hide Code\n# 构造一个包含 20 个分组和对应数值的数据框\ndon &lt;- data.frame(\n  group = LETTERS[1:20], # 分组名称为 A~T\n  val = 20 + rnorm(20)   # 每组的数值为 20 加上正态分布噪声\n)\n\n# 绘制条形图（Bar Plot）\np1 &lt;- don |&gt;\n    arrange(val) |&gt; # 按数值升序排列\n    mutate(group = factor(group, group)) |&gt; # 保持分组顺序\n    ggplot(aes(x = group, y = val)) + # 设置 x, y 轴\n      geom_bar(stat = \"identity\", fill = \"#69b3a2\") + # 绘制条形\n      coord_flip() + # 翻转坐标轴，使分组在 y 轴\n      theme_ipsum() + # 使用 hrbrthemes 包的主题\n      theme(\n        panel.grid.minor.y = element_blank(), # 去除次要网格线\n        panel.grid.major.y = element_blank(), # 去除主要网格线\n        legend.position = \"none\" # 不显示图例\n      ) +\n      xlab(\"\") + # 不显示 x 轴标签\n      ylab(\"Weapon quantity (SIPRI trend-indicator value)\") # 设置 y 轴标签\n\n# 绘制棒棒糖图（Lollipop Plot）\np2 &lt;- don |&gt;\n    arrange(val) |&gt; # 按数值升序排列\n    mutate(group = factor(group, group)) |&gt; # 保持分组顺序\n    ggplot(aes(x = group, y = val)) + # 设置 x, y 轴\n      geom_segment(aes(x = group, xend = group, y = 0, yend = val), color = \"grey\") + # 绘制竖线（棒棒糖的“棒”）\n      geom_point(size = 3, color = \"#69b3a2\") + # 绘制点（棒棒糖的“糖”）\n      coord_flip() + # 翻转坐标轴\n      theme_ipsum() + # 使用 hrbrthemes 包的主题\n      theme(\n        panel.grid.minor.y = element_blank(), # 去除次要网格线\n        panel.grid.major.y = element_blank(), # 去除主要网格线\n        legend.position = \"none\" # 不显示图例\n      ) +\n      xlab(\"\") + # 不显示 x 轴标签\n      ylab(\"Weapon quantity (SIPRI trend-indicator value)\") # 设置 y 轴标签\n\n# 并排显示条形图和棒棒糖图\np1 + p2\n\n\n\n\n\n条形图和棒棒糖图的比较\n\n\n\n\n两组比较非常优雅:\n\n\nShow/Hide Code\n# 构造数据：生成 26 个分组（A~Z），每组有两个数值 value1 和 value2\nvalue1 &lt;- abs(rnorm(26)) * 2 # 生成 26 个正态分布的随机数，取绝对值并放大\ndon &lt;- data.frame(\n  x = LETTERS[1:26], # 分组名称为 A~Z\n  value1 = value1,   # 第一组数值\n  value2 = value1 + 1 + rnorm(26, sd = 1) # 第二组数值，在 value1 基础上加 1 并加噪声\n) |&gt;\n  rowwise() |&gt;\n  mutate(mymean = mean(c(value1, value2))) |&gt; # 计算每组的均值\n  arrange(mymean) |&gt; # 按均值升序排列\n  mutate(x = factor(x, x)) # 保持分组顺序\n\n# 绘制两组比较的棒棒糖图\nggplot(don) +\n  # 绘制两组数值之间的线段（灰色，表示两组的差异）\n  geom_segment(aes(x = x, xend = x, y = value1, yend = value2), color = \"grey\") +\n  # 绘制第一组的点（绿色）\n  geom_point(aes(x = x, y = value1), color = rgb(0.2, 0.7, 0.1, 0.8), size = 3) +\n  # 绘制第二组的点（红色）\n  geom_point(aes(x = x, y = value2), color = rgb(0.7, 0.2, 0.1, 0.8), size = 3) +\n  coord_flip() + # 翻转坐标轴，使分组在 y 轴\n  theme_ipsum() + # 使用 hrbrthemes 包的主题\n  theme(\n    legend.position = \"none\", # 不显示图例\n    panel.border = element_blank() # 去除面板边框\n  ) +\n  xlab(\"\") + # 不显示 x 轴标签\n  ylab(\"Y 值\")  # 设置 y 轴标签\n\n\n\n\n\n两组比较的棒棒糖图\n\n\n\n\n当子组数量在 3 到~7 之间时，这种类型的棒棒糖图也很不错：\n\n\nShow/Hide Code\n# 构造数据：每个分组有 6 个子组，共 4 个分组（grp1~grp4），每个子组有一个数值 val\nvalue1 &lt;- abs(rnorm(6)) * 2 # 生成 6 个正态分布的随机数，取绝对值并放大\ndon &lt;- data.frame(\n  x = LETTERS[1:24], # 子组名称为 A~X\n  val = c(\n    value1, # grp1 的数值\n    value1 + 1 + rnorm(6, 14, 1), # grp2 的数值，在 value1 基础上加 1 和噪声\n    value1 + 1 + rnorm(6, sd = 1), # grp3 的数值，在 value1 基础上加 1 和噪声\n    value1 + 1 + rnorm(6, 12, 1) # grp4 的数值，在 value1 基础上加 1 和噪声\n  ),\n  grp = rep(c(\"grp1\", \"grp2\", \"grp3\", \"grp4\"), each = 6) # 分组标签\n) |&gt;\n  arrange(val) |&gt; # 按数值升序排列\n  mutate(x = factor(x, x)) # 保持子组顺序\n\n# 绘制分面棒棒糖图，每个分面对应一个分组\nggplot(don) +\n  geom_segment(aes(x = x, xend = x, y = 0, yend = val), color = \"grey\") + # 绘制竖线（棒棒糖的“棒”）\n  geom_point(aes(x = x, y = val, color = grp), size = 3) + # 绘制点（棒棒糖的“糖”），不同分组不同颜色\n  coord_flip() + # 翻转坐标轴，使子组在 y 轴\n  theme_ipsum() + # 使用 hrbrthemes 包的主题\n  theme(\n    legend.position = \"none\", # 不显示图例\n    panel.border = element_blank(), # 去除面板边框\n    panel.spacing = unit(0.1, \"lines\"), # 分面间距\n    strip.text.x = element_text(size = 8) # 分面标题字体大小\n  ) +\n  xlab(\"\") + # 不显示 x 轴标签\n  ylab(\"Value of Y\") + # 设置 y 轴标签\n  facet_wrap(~grp, ncol = 1, scale = \"free_y\") # 按分组分面显示，每列一个分组，y 轴自适应\n\n\n\n\n\n分面棒棒糖图\n\n\n\n\n注意:\n\n排序: 如果你的分类变量的级别没有明显的顺序，就按照它们的值对条形进行排序。\n如果必须保持未排序状态，最好使用条形图。棒棒糖图会更难阅读。\n想要反应每组有多个值？不要使用棒棒糖图。即使带有误差线，它也会隐藏信息，而其他类型的图形如箱线图或小提琴图则更合适。\n使用水平版本，标签更容易阅读",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lollipop</span>"
    ]
  },
  {
    "objectID": "lollipop.html#ggplot2",
    "href": "lollipop.html#ggplot2",
    "title": "17  Lollipop",
    "section": "17.3 ggplot2",
    "text": "17.3 ggplot2\ngeom_point() 表示棒棒糖的糖，使用 geom_segment() 表示棒棒糖的棒。\n\n17.3.1 基本\n两个数值变量:\n\n\nShow/Hide Code\ndata &lt;- data.frame(x = seq(1, 30), y = abs(rnorm(30)))\n\nggplot(data, aes(x = x, y = y)) +\n  geom_point() +\n  geom_segment(aes(x = x, y = 0, xend = x, yend = y)) # 起始点的坐标\n\n\n\n\n\n两个数值变量的棒棒糖图\n\n\n\n\n分类变量 vs 数值变量:\n\n\nShow/Hide Code\ndata &lt;- data.frame(\n  letter = LETTERS[1:26],\n  value = abs(rnorm(26))\n)\n\nggplot(data, aes(x = letter, y = value)) +\n  geom_point() +\n  geom_segment(aes(x = letter, y = 0, xend = letter, yend = value))\n\n\n\n\n\n分类变量 vs 数值变量的棒棒糖图\n\n\n\n\n\n\n17.3.2 定制\n\n\nShow/Hide Code\nggplot(data, aes(x = letter, y = value)) +\n  geom_segment(aes(x = letter, y = 0, xend = letter, yend = value)) +\n  geom_point(\n    size = 5,\n    color = \"red\", # 设置点边框的颜色\n    fill = alpha(\"orange\", 0.3), # 使用 alpha 函数设置填充颜色的透明度\n    alpha = 0.7,\n    shape = 21,\n    stroke = 2\n  )\n\n\n\n\n\n美化棒棒糖的“糖”\n\n\n\n\n\n\nShow/Hide Code\nggplot(data, aes(x = letter, y = value)) +\n  geom_segment(\n    aes(x = letter, y = 0, xend = letter, yend = value),\n    size = 1,\n    color = \"blue\",\n    linetype = \"dotdash\"\n  ) +\n  geom_point()\n\n\n\n\n\n美化棒棒糖的“棒”\n\n\n\n\n\n\nShow/Hide Code\nggplot(data, aes(x=letter, y=value)) +\n  geom_segment( aes(x=letter, xend=letter, y=0, yend=value), color=\"grey\") +\n  geom_point( color=\"orange\", size=4) +\n  theme_light() +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.x = element_blank()\n  ) +\n  xlab(\"\") +\n  ylab(\"Value of Y\")\n\n\n\n\n\n美化棒棒糖的“棒”和“糖” (主题)\n\n\n\n\n\n\n17.3.3 水平\n通过改变 x = 和 y = 的映射，可以创建水平棒棒糖图。\n\n\nShow/Hide Code\nggplot(data, aes(x = value, y = letter)) +\n  geom_segment(aes(x = 0, y = letter, xend = value, yend = letter), color = \"skyblue\") +\n  geom_point(color = \"blue\", size = 4, alpha = 0.6) +\n  theme_light()\n\n\n\n\n\n水平棒棒糖图\n\n\n\n\n\n\n17.3.4 基线\n只需要改变 geom_segment() 映射即可。\n\n\nShow/Hide Code\nggplot(data, aes(x = letter, y = value)) +\n  geom_segment(aes(x = letter, y = 1, xend = letter, yend = value), color = \"grey\") +\n  geom_point(color = \"orange\", size = 4) +\n  theme_light() +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.x = element_blank()\n  ) +\n  xlab(\"\") +\n  ylab(\"Value of Y\")\n\n\n\n\n\n\n\n\n\n\n\n17.3.5 排序\nfct_reorder() 可以用于对分类变量进行排序。\n\n\nShow/Hide Code\ndata &lt;- data.frame(\n  name = c(\n    \"north\",\n    \"south\",\n    \"south-east\",\n    \"north-west\",\n    \"south-west\",\n    \"north-east\",\n    \"west\",\n    \"east\"\n  ),\n  val = sample(seq(1, 10), 8)\n)\n\n\n# 使用 fct_reorder 对 name 进行升序排序\nggplot(data, aes(x = fct_reorder(name, val), y = val)) +\n  geom_segment(aes(xend = name, yend = 0)) +\n  geom_point(size = 4, color = \"orange\") +\n  coord_flip() +\n  theme_bw() +\n  xlab(\"\")\n\n\n\n\n\n\n\n\n\n\n\n17.3.6 哑铃\n\n\nShow/Hide Code\n# 生成数据：26 个分组（A~Z），每组有两个数值 value1 和 value2\nvalue1 &lt;- abs(rnorm(26)) * 2 # 生成 26 个正态分布的随机数，取绝对值并放大\ndata &lt;- data.frame(\n  x = LETTERS[1:26], # 分组名称为 A~Z\n  value1 = value1,   # 第一组数值\n  value2 = value1 + 1 + rnorm(26, sd = 1) # 第二组数值，在 value1 基础上加 1 并加噪声\n)\n\n# 使用每组均值对数据进行排序，便于图形展示\ndata &lt;- data |&gt;\n  rowwise() |&gt;\n  mutate(mymean = mean(c(value1, value2))) |&gt; # 计算每组的均值\n  arrange(mymean) |&gt; # 按均值升序排列\n  mutate(x = factor(x, x)) # 保持分组顺序\n\n# 绘制哑铃图\nggplot(data) +\n  # 绘制两组数值之间的线段（灰色，表示两组的差异）\n  geom_segment(\n    aes(x = x, xend = x, y = value1, yend = value2),\n    color = \"grey\"\n  ) +\n  # 绘制第一组的点（绿色）\n  geom_point(\n    aes(x = x, y = value1),\n    color = rgb(0.2, 0.7, 0.1, 0.5),\n    size = 3\n  ) +\n  # 绘制第二组的点（红色）\n  geom_point(\n    aes(x = x, y = value2),\n    color = rgb(0.7, 0.2, 0.1, 0.5),\n    size = 3\n  ) +\n  coord_flip() + # 翻转坐标轴，使分组在 y 轴\n  theme_ipsum() + # 使用 hrbrthemes 包的主题\n  theme(\n    legend.position = \"none\", # 不显示图例\n  ) +\n  xlab(\"\") + # 不显示 x 轴标签\n  ylab(\"Y 值\") # 设置 y 轴标签\n\n\n\n\n\n哑铃图（Dumbbell plot）展示两组数值的比较\n\n\n\n\n\n\n17.3.7 高亮\n\n\nShow/Hide Code\n# 创建数据\nset.seed(1000)\ndata &lt;- data.frame(\n  x = LETTERS[1:26],           # 分组名称为A~Z\n  y = abs(rnorm(26))           # 每组的数值为正态分布的绝对值\n)\n\n# 对数据按y值升序排序，并保持x的顺序\ndata &lt;- data |&gt;\n  arrange(y) |&gt;\n  mutate(x = factor(x, x))\n\n# 绘制棒棒糖图\np &lt;- ggplot(data, aes(x = x, y = y)) +\n  # 绘制“棒”，高亮A组和D组\n  geom_segment(\n    aes(x = x, xend = x, y = 0, yend = y),\n    color = ifelse(data$x %in% c(\"A\", \"D\"), \"orange\", \"grey\"), # A和D为橙色，其余为灰色\n    size = ifelse(data$x %in% c(\"A\", \"D\"), 1.3, 0.7)           # A和D加粗\n  ) +\n  # 绘制“糖”，高亮A组和D组\n  geom_point(\n    color = ifelse(data$x %in% c(\"A\", \"D\"), \"orange\", \"grey\"), # A和D为橙色，其余为灰色\n    size = ifelse(data$x %in% c(\"A\", \"D\"), 5, 2)               # A和D加大\n  ) +\n  theme_ipsum() +                # 使用hrbrthemes包的主题\n  coord_flip() +                 # 翻转坐标轴，分组在y轴\n  theme(\n    legend.position = \"none\"     # 不显示图例\n  ) +\n  xlab(\"\") +                     # 不显示x轴标签\n  ylab(\"Value of Y\") +           # 设置y轴标签\n  ggtitle(\"How did groups A and D perform?\") # 设置标题\n\n# 添加注释文本，突出A组和D组\np +\n  annotate(\n    \"text\",\n    x = grep(\"D\", data$x), # D组的位置\n    y = data$y[which(data$x == \"D\")] * 1.2, # D组y值的1.2倍\n    label = \"Group D is very impressive\",    # 注释内容\n    color = \"orange\",                        # 注释颜色\n    size = 4,                                # 字体大小\n    angle = 0,                               # 角度\n    fontface = \"bold\",                       # 加粗\n    hjust = 0                                # 左对齐\n  ) +\n  annotate(\n    \"text\",\n    x = grep(\"A\", data$x), # A组的位置\n    y = data$y[which(data$x == \"A\")] * 1.2, # A组y值的1.2倍\n    label = paste(\n      \"Group A is not too bad\\n (val=\",\n      data$y[which(data$x == \"A\")] |&gt; round(2),\n      \")\",\n      sep = \"\"\n    ),                                       # 注释内容，包含A组的数值\n    color = \"orange\",                        # 注释颜色\n    size = 4,                                # 字体大小\n    angle = 0,                               # 角度\n    fontface = \"bold\",                       # 加粗\n    hjust = 0                                # 左对齐\n  )\n\n\n\n\n\n高亮显示A组和D组的棒棒糖图\n\n\n\n\n\n\n17.3.8 条件颜色\n\n\nShow/Hide Code\n# 生成数据：x为0到2π的100个等间隔点，y为sin(x)加上正态噪声\nx &lt;- seq(0, 2*pi, length.out=100)\ndata &lt;- data.frame(\n  x = x, \n  y = sin(x) + rnorm(100, sd = 0.2)\n)\n\n# 添加一列mycolor，根据y值正负分类\ndata &lt;- data |&gt;\n  mutate(mycolor = ifelse(y &gt; 0, \"type1\", \"type2\"))\n\n# 绘制棒棒糖图\nggplot(data, aes(x = x, y = y)) +\n  # 绘制“棒”，根据mycolor着色\n  geom_segment(\n    aes(x = x, xend = x, y = 0, yend = y, color = mycolor),\n    size = 1.3,\n    alpha = 0.9\n  ) +\n  theme_light() + # 使用浅色主题\n  theme(\n    legend.position = \"none\",      # 不显示图例\n    panel.border = element_blank() # 去除面板边框\n  ) +\n  xlab(\"\") +                      # 不显示x轴标签\n  ylab(\"Value of Y\")              # 设置y轴标签\n\n\n\n\n\n条件着色的棒棒糖图，根据y值正负显示不同颜色",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lollipop</span>"
    ]
  },
  {
    "objectID": "lollipop.html#pearl",
    "href": "lollipop.html#pearl",
    "title": "17  Lollipop",
    "section": "17.4 Pearl",
    "text": "17.4 Pearl\n\n\n\n任天堂 64 上的 Mario Kart 64 赛车游戏的世界纪录\n\n\n\n\n\n扩展哑铃图，展示额外的分组均值和标准差\n\n\n\n\n\n办公室评分\n\n\n\n\n\n带间隙列的哑铃图\n\n\n\n\n\n定制注释的哑铃图",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lollipop</span>"
    ]
  },
  {
    "objectID": "cir-bar.html",
    "href": "cir-bar.html",
    "title": "18  Cir-bar",
    "section": "",
    "text": "18.1 PKG\nShow/Hide Code\nlibrary(tidyverse) # 数据处理和可视化\nlibrary(hrbrthemes) # 主题和字体\n# library(kableExtra) # 表格美化\nlibrary(viridis) # 色彩映射",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Cir-bar</span>"
    ]
  },
  {
    "objectID": "cir-bar.html#基础",
    "href": "cir-bar.html#基础",
    "title": "18  Cir-bar",
    "section": "18.2 基础",
    "text": "18.2 基础\n\n18.2.1 定义\n极坐标条形图：各国武器销售情况, 这里没有显示 Y 轴刻度，因为每个条形上都标注了确切数值。\n\n\nShow/Hide Code\n# 从github加载数据集\ndata &lt;- read_csv(\n    \"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/7_OneCatOneNum.csv\"\n)\n\n# 对数据进行排序和预处理\ntmp &lt;- data |&gt;\n    filter(!is.na(Value)) |&gt; # 过滤掉Value为NA的行\n    arrange(desc(Value)) |&gt;  # 按Value降序排列\n    mutate(Country = factor(Country, Country)) # 将Country设置为因子，顺序与数据一致\n\n# 设置空白条的数量，用于美化图形\nempty_bar = 10\n\n# 添加空白行到数据末尾\nto_add = matrix(NA, empty_bar, ncol(tmp))\ncolnames(to_add) = colnames(tmp)\ntmp = rbind(tmp, to_add)\ntmp$id = seq(1, nrow(tmp)) # 为每一行添加唯一id\n\n# 获取每个标签的名称和y轴位置\nlabel_tmp = tmp\nnumber_of_bar = nrow(label_tmp)\n# 计算每个标签的角度，使标签位于条形中心\nangle = 90 - 360 * (label_tmp$id - 0.5) / number_of_bar\nlabel_tmp$hjust &lt;- ifelse(angle &lt; -90, 1, 0) # 角度小于-90时右对齐，否则左对齐\nlabel_tmp$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle) # 角度小于-90时加180度，保证文字正向\nlabel_tmp$Country &lt;- gsub(\"United States\", \"US\", label_tmp$Country) # 替换国家名\nlabel_tmp$Country &lt;- paste(\n    label_tmp$Country,\n    \" (\",\n    label_tmp$Value,\n    \")\",\n    sep = \"\"\n) # 拼接国家名和数值\n\n# 绘制极坐标条形图\nggplot(tmp, aes(x = as.factor(id), y = Value)) + # id作为x轴，必须为因子，否则首尾有空隙\n    geom_bar(stat = \"identity\", fill = alpha(\"#69b3a2\", 0.8)) + # 绘制条形\n    ylim(-7000, 13000) + # 设置y轴范围\n    theme_minimal() + # 极简主题\n    theme(\n        axis.text = element_blank(), # 去除坐标轴文字\n        axis.title = element_blank(), # 去除坐标轴标题\n        panel.grid = element_blank(), # 去除网格线\n        plot.margin = unit(rep(-1, 4), \"cm\") # 设置负边距，减少空白\n    ) +\n    coord_polar(start = 0) + # 转换为极坐标\n    geom_text(\n        data = label_tmp,\n        aes(x = id, y = Value + 200, label = Country),\n        color = \"black\",\n        fontface = \"bold\",\n        alpha = 0.6,\n        size = 2.5,\n        angle = label_tmp$angle, # 设置标签角度\n        hjust = label_tmp$hjust, # 设置对齐方式\n        inherit.aes = FALSE\n    ) + # 添加国家标签\n    geom_text(\n        aes(x = 24, y = 8000, label = \"Who sells more weapons?\"),\n        color = \"black\",\n        inherit.aes = FALSE\n    ) # 添加中心标题\n\n\n\n\n\n极坐标条形图：各国武器销售情况\n\n\n\n\n\n\n18.2.2 适用\n圆形条形图确实很吸引眼球，但使得阅读每根条形之间的差异更加困难。\n因此，圆形条形图只有在展示大量条形且能明显呈现出某种模式时才有意义。\n圆形条形图在加入分组变量后更加有趣。\n\n\nShow/Hide Code\n# 构造虚拟数据集\ndata = data.frame(\n    individual = paste(\"Mister \", seq(1, 60), sep = \"\"), # 生成60个个体名称\n    group = c(rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)), # 分组变量\n    value = sample(seq(10, 100), 60, replace = TRUE) # 随机生成数值\n)\ndata = data |&gt; arrange(group, value) # 按分组和数值排序\n\n# 设置每组末尾添加的空白条数量，用于分隔分组\nempty_bar = 3\nto_add = data.frame(matrix(NA, empty_bar * nlevels(factor(data$group)), ncol(data))) # 构造空白行\ncolnames(to_add) = colnames(data)\nto_add$group = rep(levels(factor(data$group)), each = empty_bar) # 每组添加空白条\ndata = rbind(data, to_add) # 合并数据和空白条\ndata = data |&gt; arrange(group) # 再次按分组排序\ndata$id = seq(1, nrow(data)) # 为每一行添加唯一id\n\n# 获取每个标签的名称和y轴位置\nlabel_data = data\nnumber_of_bar = nrow(label_data)\n# 计算每个标签的角度，使标签位于条形中心\nangle = 90 - 360 * (label_data$id - 0.5) / number_of_bar\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0) # 角度小于-90时右对齐，否则左对齐\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle) # 角度小于-90时加180度，保证文字正向\n\n# 构造分组基线数据，用于分组底部的线和分组标签\nbase_data = data |&gt;\n    group_by(group) |&gt;\n    summarize(start = min(id), end = max(id) - empty_bar) |&gt;\n    rowwise() |&gt;\n    mutate(title = mean(c(start, end)))\n\n# 构造网格线数据，用于绘制圆环上的刻度线\ngrid_data = base_data\ngrid_data$end = grid_data$end[c(nrow(grid_data), 1:nrow(grid_data) - 1)] + 1\ngrid_data$start = grid_data$start - 1\ngrid_data = grid_data[-1, ]\n\n# 绘制极坐标分组条形图\np = ggplot(data, aes(x = as.factor(id), y = value, fill = group)) + # id作为x轴，必须为因子\n    geom_bar(\n        aes(x = as.factor(id), y = value, fill = group),\n        stat = \"identity\",\n        alpha = 0.5\n    ) +\n    # 添加圆环刻度线\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 80, xend = start, yend = 80),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 60, xend = start, yend = 60),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 40, xend = start, yend = 40),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 20, xend = start, yend = 20),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    # 添加刻度值文本\n    annotate(\n        \"text\",\n        x = rep(max(data$id), 4),\n        y = c(20, 40, 60, 80),\n        label = c(\"20\", \"40\", \"60\", \"80\"),\n        color = \"grey\",\n        size = 3,\n        angle = 0,\n        fontface = \"bold\",\n        hjust = 1\n    ) +\n    geom_bar(\n        aes(x = as.factor(id), y = value, fill = group),\n        stat = \"identity\",\n        alpha = 0.5\n    ) +\n    ylim(-100, 120) + # 设置y轴范围\n    theme_minimal() + # 极简主题\n    theme(\n        legend.position = \"none\", # 不显示图例\n        axis.text = element_blank(), # 去除坐标轴文字\n        axis.title = element_blank(), # 去除坐标轴标题\n        panel.grid = element_blank(), # 去除网格线\n        plot.margin = unit(rep(-1, 4), \"cm\") # 设置负边距，减少空白\n    ) +\n    coord_polar() + # 转换为极坐标\n    # 添加个体标签\n    geom_text(\n        data = label_data,\n        aes(x = id, y = value + 10, label = individual, hjust = hjust),\n        color = \"black\",\n        fontface = \"bold\",\n        alpha = 0.6,\n        size = 2.5,\n        angle = label_data$angle,\n        inherit.aes = FALSE\n    ) +\n    # 添加分组底部基线\n    geom_segment(\n        data = base_data,\n        aes(x = start, y = -5, xend = end, yend = -5),\n        colour = \"black\",\n        alpha = 0.8,\n        size = 0.6,\n        inherit.aes = FALSE\n    ) +\n    # 添加分组标签\n    geom_text(\n        data = base_data,\n        aes(x = title, y = -18, label = group),\n        hjust = c(1, 1, 0, 0),\n        colour = \"black\",\n        alpha = 0.8,\n        size = 4,\n        fontface = \"bold\",\n        inherit.aes = FALSE\n    )\np\n\n\n\n\n\n分组极坐标条形图：分组比较示例\n\n\n\n\n\n\n18.2.3 变体\n堆叠圆形条形图\n\n\nShow/Hide Code\n# 构造数据集，包含3个观测变量\ndata = data.frame(\n    individual = paste(\"Mister \", seq(1, 60), sep = \"\"), # 个体名称\n    group = c(rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)), # 分组变量\n    value1 = sample(seq(10, 100), 60, replace = TRUE), # 观测1\n    value2 = sample(seq(10, 100), 60, replace = TRUE), # 观测2\n    value3 = sample(seq(10, 100), 60, replace = TRUE)  # 观测3\n)\n\n# 转换为长格式，便于堆叠绘图\ndata = data |&gt;\n    tidyr::gather(key = \"observation\", value = \"value\", -c(1, 2))\n\n# 设置每组末尾添加的空白条数量，用于分隔分组\nempty_bar = 2\nnObsType = nlevels(as.factor(data$observation))\nto_add = data.frame(matrix(\n    NA,\n    empty_bar * nlevels(as.factor(data$group)) * nObsType,\n    ncol(data)\n))\ncolnames(to_add) = colnames(data)\nto_add$group = rep(levels(as.factor(data$group)), each = empty_bar * nObsType)\ndata = rbind(data, to_add)\ndata = data |&gt;\n    arrange(group, individual)\ndata$id = rep(seq(1, nrow(data) / nObsType), each = nObsType) # 为每个个体分配唯一id\n\n# 计算每个标签的名称和y轴位置（总和）\nlabel_data = data |&gt;\n    group_by(id, individual) |&gt;\n    summarize(tot = sum(value, na.rm = TRUE))\nnumber_of_bar = nrow(label_data)\n# 计算每个标签的角度，使标签位于条形中心\nangle = 90 - 360 * (label_data$id - 0.5) / number_of_bar\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0) # 角度小于-90时右对齐，否则左对齐\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle) # 角度小于-90时加180度，保证文字正向\n\n# 构造分组基线数据，用于分组底部的线和分组标签\nbase_data = data |&gt;\n    group_by(group) |&gt;\n    summarize(start = min(id), end = max(id) - empty_bar) |&gt;\n    rowwise() |&gt;\n    mutate(title = mean(c(start, end)))\n\n# 构造网格线数据，用于绘制圆环上的刻度线\ngrid_data = base_data\ngrid_data$end = grid_data$end[c(nrow(grid_data), 1:nrow(grid_data) - 1)] + 1\ngrid_data$start = grid_data$start - 1\ngrid_data = grid_data[-1, ]\n\n# 绘制堆叠极坐标条形图\np = ggplot(data) +\n    # 添加堆叠条形\n    geom_bar(\n        aes(x = as.factor(id), y = value, fill = observation),\n        stat = \"identity\",\n        alpha = 0.5\n    ) +\n    scale_fill_viridis(discrete = TRUE) +\n    # 添加圆环刻度线\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 0, xend = start, yend = 0),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 50, xend = start, yend = 50),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 100, xend = start, yend = 100),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 150, xend = start, yend = 150),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    geom_segment(\n        data = grid_data,\n        aes(x = end, y = 200, xend = start, yend = 200),\n        colour = \"grey\",\n        alpha = 1,\n        size = 0.3,\n        inherit.aes = FALSE\n    ) +\n    # 添加刻度值文本\n    annotate(\n        \"text\",\n        x = rep(max(data$id, na.rm = TRUE), 5),\n        y = c(0, 50, 100, 150, 200),\n        label = c(\"0\", \"50\", \"100\", \"150\", \"200\"),\n        color = \"grey\",\n        size = 2,\n        angle = 0,\n        fontface = \"bold\",\n        hjust = 1\n    ) +\n    ylim(-150, max(label_data$tot, na.rm = TRUE)) + # 设置y轴范围\n    theme_minimal() +\n    theme(\n        legend.position = \"none\", # 不显示图例\n        axis.text = element_blank(), # 去除坐标轴文字\n        axis.title = element_blank(), # 去除坐标轴标题\n        panel.grid = element_blank(), # 去除网格线\n        plot.margin = unit(rep(-1, 4), \"cm\") # 设置负边距，减少空白\n    ) +\n    coord_polar() + # 转换为极坐标\n    # 添加个体标签\n    geom_text(\n        data = label_data,\n        aes(x = id, y = tot + 10, label = individual, hjust = hjust),\n        color = \"black\",\n        fontface = \"bold\",\n        alpha = 0.6,\n        size = 1,\n        angle = label_data$angle,\n        inherit.aes = FALSE\n    ) +\n    # 添加分组底部基线\n    geom_segment(\n        data = base_data,\n        aes(x = start, y = -5, xend = end, yend = -5),\n        colour = \"black\",\n        alpha = 0.8,\n        size = 0.6,\n        inherit.aes = FALSE\n    ) +\n    # 添加分组标签\n    geom_text(\n        data = base_data,\n        aes(x = title, y = -18, label = group),\n        hjust = c(1, 1, 0, 0),\n        colour = \"black\",\n        alpha = 0.8,\n        size = 4,\n        fontface = \"bold\",\n        inherit.aes = FALSE\n    )\np\n\n\n\n\n\n堆叠圆形条形图：多变量分组比较示例\n\n\n\n\n\n\n18.2.4 注意\n\n\nShow/Hide Code\n# 创建数据集\ndata = data.frame(\n    individual = paste(\"Mister \", seq(1, 30), sep = \"\"), # 生成30个个体名称\n    group = c(rep('A', 10), rep('C', 14), rep('D', 6)), # 分组变量\n    value = sample(seq(10, 100), 30, replace = TRUE) # 随机生成数值\n)\ndata = data |&gt; arrange(group, value) # 按分组和数值排序\n\n# 设置每组末尾添加的空白条数量，用于分隔分组\nempty_bar = 1\nto_add = data.frame(matrix(NA, empty_bar * nlevels(factor(data$group)), ncol(data))) # 构造空白行\ncolnames(to_add) = colnames(data)\nto_add$group = rep(levels(factor(data$group)), each = empty_bar) # 每组添加空白条\ndata = rbind(data, to_add) # 合并数据和空白条\ndata = data |&gt; arrange(group) # 再次按分组排序\ndata$id = seq(1, nrow(data)) # 为每一行添加唯一id\n\n# 获取每个标签的名称和y轴位置\nlabel_data = data\nnumber_of_bar = nrow(label_data)\n# 计算每个标签的角度，使标签位于条形中心\nangle = 90 - 360 * (label_data$id - 0.5) / number_of_bar # 角度减去0.5保证标签居中\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0) # 角度小于-90时右对齐，否则左对齐\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle) # 角度小于-90时加180度，保证文字正向\n\n# 绘制极坐标条形图\np = ggplot(data, aes(x = as.factor(id), y = value, fill = group)) + # id作为x轴，必须为因子\n    geom_bar(\n        aes(x = as.factor(id), y = value, fill = group),\n        stat = \"identity\",\n        alpha = 0.5\n    ) +\n    ylim(-10, 120) + # 设置y轴范围\n    theme_minimal() + # 极简主题\n    theme(\n        legend.position = \"none\", # 不显示图例\n        axis.text = element_blank(), # 去除坐标轴文字\n        axis.title = element_blank(), # 去除坐标轴标题\n        panel.grid = element_blank(), # 去除网格线\n        plot.margin = unit(rep(-1, 4), \"cm\") # 设置负边距，减少空白\n    ) +\n    coord_polar() + # 转换为极坐标\n    # 添加个体标签\n    geom_text(\n        data = label_data,\n        aes(x = id, y = value + 10, label = individual, hjust = hjust),\n        color = \"black\",\n        fontface = \"bold\",\n        alpha = 0.6,\n        size = 2.5,\n        angle = label_data$angle,\n        inherit.aes = FALSE\n    )\n\np\n\n\n\n\n\n内圆比例较小时的极坐标条形图, 严重倾斜\n\n\n\n\n\n内圆的比例必须很大（&gt;1/2）否则条形图会严重倾斜, 如上图\n适合 40 个以上条形\n圆周上显示Y轴\n排序: 自有顺序或数值排序\n为了显示每个组的样本数, 不要使用条形图. 会丢失信息",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Cir-bar</span>"
    ]
  },
  {
    "objectID": "cir-bar.html#cir-bar",
    "href": "cir-bar.html#cir-bar",
    "title": "18  Cir-bar",
    "section": "18.3 Cir-bar",
    "text": "18.3 Cir-bar\n\n18.3.1 基本\n\n\nShow/Hide Code\n# Libraries\n#| fig-cap: \"基础极坐标条形图示例\"\n\n# 构造数据集\ndata &lt;- data.frame(\n    id = seq(1, 60), # 生成1到60的id\n    individual = paste(\"Mister \", seq(1, 60), sep = \"\"), # 个体名称\n    value = sample(seq(10, 100), 60, replace = TRUE) # 随机生成数值\n)\n\n# 绘制极坐标条形图\np &lt;- ggplot(data, aes(x = as.factor(id), y = value)) + # id需转为因子，保证首尾无空隙\n    geom_bar(stat = \"identity\", fill = alpha(\"blue\", 0.3)) + # 添加条形，设置透明蓝色\n    ylim(-100, 120) + # y轴范围，负值控制内圆比例，正值用于条形高度\n    theme_minimal() + # 极简主题\n    theme(\n        axis.text = element_blank(), # 去除坐标轴文字\n        axis.title = element_blank(), # 去除坐标轴标题\n        panel.grid = element_blank(), # 去除网格线\n        plot.margin = unit(rep(-2, 4), \"cm\") # 设置负边距，减少空白\n    ) +\n    coord_polar(start = 0) # 转换为极坐标\np\n\n\n\n\n\n\n\n\n\n\n\n18.3.2 label\n\n\nShow/Hide Code\n# 构造数据集\ndata &lt;- data.frame(\n    id = seq(1, 60), # 生成1到60的id\n    individual = paste(\"Mister \", seq(1, 60), sep = \"\"), # 个体名称\n    value = sample(seq(10, 100), 60, replace = TRUE) # 随机生成数值\n)\n\n# ----- 下面部分为标签准备数据框 ---- #\n# 获取每个标签的名称和y轴位置\nlabel_data &lt;- data\n\n# 计算每个标签的角度，使标签位于条形中心\nnumber_of_bar &lt;- nrow(label_data)\nangle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar # 减去0.5保证标签居中\n\n# 计算标签的对齐方式：右对齐或左对齐\n# 如果在图的左侧，当前角度小于-90，标签右对齐\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0)\n\n# 翻转角度，使标签可读\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle)\n# ----- -------------------------------------- ---- #\n\n# 开始绘图\np &lt;- ggplot(data, aes(x = as.factor(id), y = value)) + # id需转为因子，保证首尾无空隙\n\n    # 添加条形，设置透明蓝色\n    geom_bar(stat = \"identity\", fill = alpha(\"skyblue\", 0.7)) +\n\n    # 设置y轴范围，负值控制内圆比例，正值用于条形高度\n    ylim(-100, 120) +\n\n    # 自定义主题：去除坐标轴标题和网格线\n    theme_minimal() +\n    theme(\n        axis.text = element_blank(), # 去除坐标轴文字\n        axis.title = element_blank(), # 去除坐标轴标题\n        panel.grid = element_blank(), # 去除网格线\n        plot.margin = unit(rep(-1, 4), \"cm\") # 调整边距，避免标签被截断\n    ) +\n\n    # 转换为极坐标\n    coord_polar(start = 0) +\n\n    # 添加标签，使用上面准备的label_data数据框\n    geom_text(\n        data = label_data,\n        aes(x = id, y = value + 10, label = individual, hjust = hjust),\n        color = \"black\",\n        fontface = \"bold\",\n        alpha = 0.6,\n        size = 2.5,\n        angle = label_data$angle,\n        inherit.aes = FALSE\n    )\n\np\n\n\n\n\n\n带标签的极坐标条形图示例\n\n\n\n\n\n\n18.3.3 gap\n末尾空白:\n\n\nShow/Hide Code\n#| fig-cap: \"带间隔的极坐标条形图示例\"\n\n# 构造数据集\ndata &lt;- data.frame(\n  individual=paste( \"Mister \", seq(1,60), sep=\"\"),\n  group=c( rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6)) ,\n  value=sample( seq(10,100), 60, replace=T)\n)\n\n# 设置空白条数量，用于在条形之间制造间隔\nempty_bar &lt;- 10\n\n# 在原始数据集末尾添加空白行（NA），用于制造条形间隔\nto_add &lt;- matrix(NA, empty_bar, ncol(data)) # 构造空白行矩阵\ncolnames(to_add) &lt;- colnames(data)          # 设置列名与原数据一致\ndata &lt;- rbind(data, to_add)                 # 合并原数据和空白行\ndata$id &lt;- seq(1, nrow(data))               # 为每一行分配唯一id\n\n# 获取每个标签的名称和y轴位置\nlabel_data &lt;- data\nnumber_of_bar &lt;- nrow(label_data)           # 总条形数（含空白）\n# 计算每个标签的角度，使标签位于条形中心\nangle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar # -0.5保证标签居中\n# 计算标签的对齐方式：右对齐或左对齐\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0)\n# 翻转角度，使标签可读\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle)\n\n# 绘制极坐标条形图\np &lt;- ggplot(data, aes(x = as.factor(id), y = value)) + # id需转为因子，保证首尾无空隙\n    geom_bar(stat = \"identity\", fill = alpha(\"green\", 0.3)) + # 添加条形，设置透明绿色\n    ylim(-100, 120) +                                         # y轴范围，负值控制内圆比例\n    theme_minimal() +                                         # 极简主题\n    theme(\n        axis.text = element_blank(),                          # 去除坐标轴文字\n        axis.title = element_blank(),                         # 去除坐标轴标题\n        panel.grid = element_blank(),                         # 去除网格线\n        plot.margin = unit(rep(-1, 4), \"cm\")                  # 设置负边距，减少空白\n    ) +\n    coord_polar(start = 0) +                                  # 转换为极坐标\n    # 添加标签，使用上面准备的label_data数据框\n    geom_text(\n        data = label_data,\n        aes(x = id, y = value + 10, label = individual, hjust = hjust),\n        color = \"black\",\n        fontface = \"bold\",\n        alpha = 0.6,\n        size = 2.5,\n        angle = label_data$angle,\n        inherit.aes = FALSE\n    )\n\np\n\n\n\n\n\n\n\n\n\n组间空白\n\n\nShow/Hide Code\n# 构造数据集\ndata &lt;- data.frame(\n    individual = paste(\"Mister \", seq(1, 60), sep = \"\"), # 个体名称\n    group = as.factor(c(rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6))), # 分组变量（必须为因子）\n    value = sample(seq(10, 100), 60, replace = TRUE) # 随机生成数值\n)\n\n# 设置每组末尾添加的空白条数量，用于分隔分组\nempty_bar &lt;- 4\nto_add &lt;- data.frame(matrix(NA, empty_bar * nlevels(data$group), ncol(data))) # 构造空白行\ncolnames(to_add) &lt;- colnames(data) # 设置空白行的列名与原数据一致\nto_add$group &lt;- rep(levels(data$group), each = empty_bar) # 每组添加空白条\ndata &lt;- rbind(data, to_add) # 合并数据和空白条\ndata &lt;- data |&gt; arrange(group) # 按分组排序（新管道写法）\ndata$id &lt;- seq(1, nrow(data)) # 为每一行添加唯一id\n\n# 获取每个标签的名称和y轴位置\nlabel_data &lt;- data\nnumber_of_bar &lt;- nrow(label_data) # 总条形数（含空白）\n# 计算每个标签的角度，使标签位于条形中心\nangle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar # -0.5保证标签居中\n# 计算标签的对齐方式：右对齐或左对齐\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0)\n# 翻转角度，使标签可读\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle)\n\n# 绘制极坐标条形图\np &lt;- ggplot(data, aes(x = as.factor(id), y = value, fill = group)) + # id需转为因子，保证首尾无空隙\n    geom_bar(stat = \"identity\", alpha = 0.5) + # 添加条形，设置透明度\n    ylim(-100, 120) + # y轴范围，负值控制内圆比例\n    theme_minimal() + # 极简主题\n    theme(\n        legend.position = \"none\", # 不显示图例\n        axis.text = element_blank(), # 去除坐标轴文字\n        axis.title = element_blank(), # 去除坐标轴标题\n        panel.grid = element_blank(), # 去除网格线\n        plot.margin = unit(rep(-1, 4), \"cm\") # 设置负边距，减少空白\n    ) +\n    coord_polar() + # 转换为极坐标\n    # 添加标签，使用上面准备的label_data数据框\n    geom_text(\n        data = label_data,\n        aes(x = id, y = value + 10, label = individual, hjust = hjust),\n        color = \"black\",\n        fontface = \"bold\",\n        alpha = 0.6,\n        size = 2.5,\n        angle = label_data$angle,\n        inherit.aes = FALSE\n    )\n\np\n\n\n\n\n\n带组间空白的极坐标条形图\n\n\n\n\n\n\n18.3.4 排序\n\n\nShow/Hide Code\n# 创建数据后用 data = data |&gt; arrange(group, value) 排序\n\n# 构造数据集\ndata &lt;- data.frame(\n  individual = paste(\"Mister \", seq(1, 60), sep = \"\"), # 个体名称\n  group = as.factor(c(rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6))), # 分组变量（必须为因子）\n  value = sample(seq(10, 100), 60, replace = TRUE) # 随机生成数值\n)\n\ndata = data |&gt; arrange(group, value) # &lt;-- 就是这里, 组内排序\n\n# 设置每组末尾添加的空白条数量，用于分隔分组\nempty_bar &lt;- 4\nto_add &lt;- data.frame(matrix(NA, empty_bar * nlevels(data$group), ncol(data))) # 构造空白行\ncolnames(to_add) &lt;- colnames(data) # 设置空白行的列名与原数据一致\nto_add$group &lt;- rep(levels(data$group), each = empty_bar) # 每组添加空白条\ndata &lt;- rbind(data, to_add) # 合并数据和空白条\ndata &lt;- data |&gt; arrange(group) # 按分组排序（新管道写法）\ndata$id &lt;- seq(1, nrow(data)) # 为每一行添加唯一id\n\n# 获取每个标签的名称和y轴位置\nlabel_data &lt;- data\nnumber_of_bar &lt;- nrow(label_data) # 总条形数（含空白）\n# 计算每个标签的角度，使标签位于条形中心\nangle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar # -0.5保证标签居中\n# 计算标签的对齐方式：右对齐或左对齐\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0)\n# 翻转角度，使标签可读\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle)\n\n# 绘制极坐标条形图\np &lt;- ggplot(data, aes(x = as.factor(id), y = value, fill = group)) + # id需转为因子，保证首尾无空隙\n    geom_bar(stat = \"identity\", alpha = 0.5) + # 添加条形，设置透明度\n    ylim(-100, 120) + # y轴范围，负值控制内圆比例\n    theme_minimal() + # 极简主题\n    theme(\n        legend.position = \"none\", # 不显示图例\n        axis.text = element_blank(), # 去除坐标轴文字\n        axis.title = element_blank(), # 去除坐标轴标题\n        panel.grid = element_blank(), # 去除网格线\n        plot.margin = unit(rep(-1, 4), \"cm\") # 设置负边距，减少空白\n    ) +\n    coord_polar() + # 转换为极坐标\n    # 添加标签，使用上面准备的label_data数据框\n    geom_text(\n        data = label_data,\n        aes(x = id, y = value + 10, label = individual, hjust = hjust),\n        color = \"black\",\n        fontface = \"bold\",\n        alpha = 0.6,\n        size = 2.5,\n        angle = label_data$angle,\n        inherit.aes = FALSE\n    )\n\np\n\n\n\n\n\n带组间空白的极坐标条形图(排序)\n\n\n\n\n\n\n18.3.5 定制\n加入了刻度线和分组标记:\n\n\nShow/Hide Code\n# 构造数据集\ndata &lt;- data.frame(\n  individual = paste(\"Mister \", seq(1, 60), sep = \"\"), # 个体名称\n  group = as.factor(c(rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6))), # 分组变量（必须为因子）\n  value = sample(seq(10, 100), 60, replace = TRUE) # 随机生成数值\n)\n\n\n# 设置每组末尾添加的空白条数量，用于分隔分组\nempty_bar &lt;- 3\nto_add &lt;- data.frame(matrix(NA, empty_bar * nlevels(data$group), ncol(data))) # 构造空白行\n\n\ncolnames(to_add) &lt;- colnames(data) # 设置空白行的列名与原数据一致\nto_add$group &lt;- rep(levels(data$group), each = empty_bar) # 每组添加空白条, each 不循环添加\ndata &lt;- rbind(data, to_add) # 合并数据和空白条\ndata &lt;- data |&gt; arrange(group) # 按分组排序\ndata$id &lt;- seq(1, nrow(data)) # 为每一行添加唯一id\n\n# 获取每个标签的名称和y轴位置\nlabel_data &lt;- data\nnumber_of_bar &lt;- nrow(label_data) # 总条形数（含空白）\n# 计算每个标签的角度，使标签位于条形中心\nangle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar # -0.5保证标签居中\n# 计算标签的对齐方式：右对齐或左对齐\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0)\n# 翻转角度，使标签可读\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle)\n\n# 构造分组基线数据，用于分组底部的线和分组标签\nbase_data &lt;- data |&gt;\n  group_by(group) |&gt;\n  summarize(start = min(id), end = max(id) - empty_bar) |&gt;\n  rowwise() |&gt;\n  mutate(title = mean(c(start, end)))\n\n# 构造网格线数据，用于绘制圆环上的刻度线\ngrid_data &lt;- base_data\ngrid_data$end &lt;- grid_data$end[c(nrow(grid_data), 1:nrow(grid_data) - 1)] + 1\ngrid_data$start &lt;- grid_data$start - 1\ngrid_data &lt;- grid_data[-1, ]\n\n# 绘制极坐标条形图\nggplot(data, aes(x = as.factor(id), y = value, fill = group)) + # id需转为因子，保证首尾无空隙\n\n  # 添加条形，设置透明度\n  geom_bar(\n    aes(x = as.factor(id), y = value, fill = group),\n    stat = \"identity\",\n    alpha = 0.5\n  ) + \n\n  # 添加圆环的刻度线（y=80/60/40/20）\n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 80, xend = start, yend = 80),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) +\n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 60, xend = start, yend = 60),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) + \n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 40, xend = start, yend = 40),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) +\n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 20, xend = start, yend = 20),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) +\n\n  # 添加刻度值文本\n  annotate(\n    \"text\",\n    x = rep(max(data$id), 4),\n    y = c(20, 40, 60, 80),\n    label = c(\"20\", \"40\", \"60\", \"80\"),\n    color = \"grey\",\n    size = 3,\n    angle = 0,\n    fontface = \"bold\",\n    hjust = 1\n  ) + \n\n  # 再次添加条形，保证条形在刻度线上方\n  geom_bar(\n    aes(x = as.factor(id), y = value, fill = group),\n    stat = \"identity\",\n    alpha = 0.5\n  ) +\n\n  ylim(-100, 120) + # y轴范围，负值控制内圆比例\n  theme_minimal() + # 极简主题\n  theme(\n    legend.position = \"none\", # 不显示图例\n    axis.text = element_blank(), # 去除坐标轴文字\n    axis.title = element_blank(), # 去除坐标轴标题\n    panel.grid = element_blank(), # 去除网格线\n    plot.margin = unit(rep(-1, 4), \"cm\") # 设置负边距，减少空白\n  ) + \n  coord_polar() +  # 转换为极坐标\n\n  # 添加标签，使用上面准备的label_data数据框\n  geom_text(\n    data = label_data,\n    aes(x = id, y = value + 10, label = individual, hjust = hjust),\n    color = \"black\",\n    fontface = \"bold\",\n    alpha = 0.6,\n    size = 2.5,\n    angle = label_data$angle,\n    inherit.aes = FALSE\n  ) + \n\n  # 添加分组底部基线\n  geom_segment(\n    data = base_data,\n    aes(x = start, y = -5, xend = end, yend = -5),\n    colour = \"black\",\n    alpha = 0.8,\n    linewidth = 0.6,\n    inherit.aes = FALSE\n  ) + \n  # 添加分组标签\n  geom_text(\n    data = base_data,\n    aes(x = title, y = -18, label = group),\n    hjust = c(1, 1, 0, 0),\n    colour = \"black\",\n    alpha = 0.8,\n    size = 4,\n    fontface = \"bold\",\n    inherit.aes = FALSE\n  )\n\n\n\n\n\n带组间空白的极坐标条形图",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Cir-bar</span>"
    ]
  },
  {
    "objectID": "cir-bar.html#pearl",
    "href": "cir-bar.html#pearl",
    "title": "18  Cir-bar",
    "section": "18.4 Pearl",
    "text": "18.4 Pearl\n\n\n\nHiking Locations in Washington\n\n\n\n\n\n环形棒棒糖图",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Cir-bar</span>"
    ]
  },
  {
    "objectID": "table.html",
    "href": "table.html",
    "title": "19  Table",
    "section": "",
    "text": "19.1 PKG\nShow/Hide Code\nlibrary(tidyverse) # 数据处理和可视化\nlibrary(gt) # 表格\nlibrary(gtsummary) # 表格\nlibrary(gtExtras) # gt 扩展\nlibrary(htmltools) # HTML 工具\n# install.packages('cardx') \nlibrary(survival) # 生存分析\nlibrary(knitr) # 表格\nlibrary(kableExtra) # kable 拓展\nlibrary(DT) # 交互式表格\nlibrary(reactable) # 交互式表格\nlibrary(formattable) # 交互式表格\nlibrary(flextable) # Word/PPT 表格\nlibrary(rhandsontable) # 交互式编辑表格\nlibrary(modelsummary) # 模型摘要表格\nlibrary(huxtable) # LaTeX 表格\n因为有的交互式表格，Quarto 无法正确加载，所有包装了函数，也放在了 wordcloud文件夹内:\nShow/Hide Code\n# 因为有的交互式表格，无法正确加载，所有包装了函数，也放在了 wordcloud文件夹内\n# 用法是embed_widget()包装一下，记得区块要写label\n\nembed_widget &lt;- function(widget, height = \"400px\", width = \"100%\") {\n  # 步骤 1: 生成一个基于当前代码块标签的、独一无二的文件名\n  # 这样可以防止多个小部件相互覆盖文件\n  chunk_label &lt;- opts_current$get('label')\n  filename &lt;- paste0(\"./wordcloud/wc-\", chunk_label, \".html\")\n  \n  # 步骤 2: 将小部件保存为一个独立的、自包含的HTML文件\n  library(htmlwidgets)\n  saveWidget(widget, filename, selfcontained = TRUE)\n  \n  # 步骤 3: 创建并返回一个指向该文件的 iframe HTML 标签\n  tags$iframe(\n    src = filename,\n    height = height,\n    width = width,\n    style = \"border:none;\"\n  )\n}\nR 的表格包有很多, 主要分为以下几类:",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Table</span>"
    ]
  },
  {
    "objectID": "table.html#pkg",
    "href": "table.html#pkg",
    "title": "19  Table",
    "section": "",
    "text": "Table Package",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Table</span>"
    ]
  },
  {
    "objectID": "table.html#gt-family",
    "href": "table.html#gt-family",
    "title": "19  Table",
    "section": "19.2 gt family",
    "text": "19.2 gt family\n包括 gt、gtsummary 和 gtExtras.\n\n19.2.1 gt\ngt (官方文档) 是兼容 tidyverse 的表格包:\n\n19.2.1.1 基本\n\n\nShow/Hide Code\n# 创建一个简单的数据框\ndata = data.frame(\n  Country = c(\"USA\", \"China\", \"India\", \"Brazil\"), # 国家名称\n  Capitals = c(\"Washington D.C.\", \"Beijing\", \"New Delhi\", \"Brasília\"), # 首都\n  Population = c(331, 1441, 1393, 212), # 人口（百万）\n  GDP = c(21.43, 14.34, 2.87, 1.49) # GDP（万亿美元）\n)\n\ngt(data)\n\n\n\n\n\n\n\n\nCountry\nCapitals\nPopulation\nGDP\n\n\n\n\nUSA\nWashington D.C.\n331\n21.43\n\n\nChina\nBeijing\n1441\n14.34\n\n\nIndia\nNew Delhi\n1393\n2.87\n\n\nBrazil\nBrasília\n212\n1.49\n\n\n\n\n\n使用 gt 包创建表格\n\n\n\n\n19.2.1.2 标题\n使用tab_header()函数可以添加标题和副标题(兼容markdown / html语法):\n\n\nShow/Hide Code\ndata |&gt;\n  gt() |&gt;\n  tab_header(\n    title = html(\"&lt;span style='color:red;'&gt;A red title&lt;/span&gt;\"), # 使用 html 语法\n    subtitle = md(\"Pretty *cool subtitle* too, `isn't it?`\") # 使用 markdown 语法\n  )\n\n\n\n\n\n\n\n\nA red title\n\n\nPretty cool subtitle too, isn't it?\n\n\nCountry\nCapitals\nPopulation\nGDP\n\n\n\n\nUSA\nWashington D.C.\n331\n21.43\n\n\nChina\nBeijing\n1441\n14.34\n\n\nIndia\nNew Delhi\n1393\n2.87\n\n\nBrazil\nBrasília\n212\n1.49\n\n\n\n\n\n使用 gt 包创建表格并添加标题和副标题(markdown 语法)\n\n\n甚至还可以用图像作为标题:\n\n\nShow/Hide Code\ndata |&gt;\n  gt() |&gt;\n  tab_header(\n    title = md(\"**A table with an image as title**\"),\n    subtitle = html(\n      \"&lt;div style='text-align:center;'&gt;&lt;img src='./image/Rlogo.png' height='60'&gt;&lt;/div&gt;\"\n    )\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA table with an image as title\n\n\n\n\n\n\n\nCountry\nCapitals\nPopulation\nGDP\n\n\n\n\nUSA\nWashington D.C.\n331\n21.43\n\n\nChina\nBeijing\n1441\n14.34\n\n\nIndia\nNew Delhi\n1393\n2.87\n\n\nBrazil\nBrasília\n212\n1.49\n\n\n\n\n\n使用 gt 包创建表格并添加图像作为标题\n\n\n\n\n19.2.1.3 跨列标题\ntab_spanner() 函数可以创建跨列的标题(合并单元格):\n\n\nShow/Hide Code\ndata |&gt;\n  gt() |&gt;\n   tab_spanner(\n    label = \"Number\",\n    columns = c(GDP, Population)) |&gt;\n  tab_spanner(\n    label = \"Label\",\n    columns = c(Country, Capitals)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLabel\n\n\nNumber\n\n\n\nCountry\nCapitals\nGDP\nPopulation\n\n\n\n\nUSA\nWashington D.C.\n21.43\n331\n\n\nChina\nBeijing\n14.34\n1441\n\n\nIndia\nNew Delhi\n2.87\n1393\n\n\nBrazil\nBrasília\n1.49\n212\n\n\n\n\n\n使用 gt 包创建表格并添加跨列标题\n\n\n\n\n19.2.1.4 脚注\ntab_footnote() 函数的 footnote 和 locations 参数添加引用:\n\n\nShow/Hide Code\n# 创建一个包含行星信息的数据框\ndata = data.frame(\n    Planet = c(\"Earth\", \"Mars\", \"Jupiter\", \"Venus\"), # 行星名称\n    Moons = c(1, 2, 79, 0), # 卫星数量\n    Distance_from_Sun = c(149.6, 227.9, 778.3, 108.2), # 距离太阳距离（百万公里）\n    Diameter = c(12742, 6779, 139822, 12104) # 直径（公里）\n)\n\ndata |&gt;\n  gt() |&gt;\n  tab_footnote(\n    footnote = md(\"Measured in **millions** of Km\"),\n    locations = cells_column_labels(columns = Distance_from_Sun)\n  )\n\n\n\n\n\n\n\n\nPlanet\nMoons\nDistance_from_Sun1\nDiameter\n\n\n\n\nEarth\n1\n149.6\n12742\n\n\nMars\n2\n227.9\n6779\n\n\nJupiter\n79\n778.3\n139822\n\n\nVenus\n0\n108.2\n12104\n\n\n\n1 Measured in millions of Km\n\n\n\n\n\n\n使用 gt 包为表格添加脚注\n\n\n还可以添加多个角注:\n\n\nShow/Hide Code\n# 使用 gt 包创建表格，并为不同的列和表格整体添加多个脚注\ndata |&gt;\n    gt() |&gt;\n    tab_footnote(\n        footnote = md(\"Measured in **millions** of Km\"), # 为 Distance_from_Sun 列添加脚注\n        locations = cells_column_labels(columns = Distance_from_Sun)\n    ) |&gt;\n    tab_footnote(\n        footnote = md(\"Measured in **Km**\"), # 为 Diameter 列添加脚注\n        locations = cells_column_labels(columns = Diameter)\n    ) |&gt;\n    tab_footnote(\n        footnote = md(\"The original data are from *Some Organization*\") # 为整个表格添加脚注\n    ) |&gt;\n    opt_footnote_marks(marks = \"LETTERS\") # 设置脚注标记为大写字母\n\n\n\n\n\n\n\n\nPlanet\nMoons\nDistance_from_SunA\nDiameterB\n\n\n\n\nEarth\n1\n149.6\n12742\n\n\nMars\n2\n227.9\n6779\n\n\nJupiter\n79\n778.3\n139822\n\n\nVenus\n0\n108.2\n12104\n\n\n\nThe original data are from Some Organization\n\n\nA Measured in millions of Km\n\n\nB Measured in Km\n\n\n\n\n\n\n使用 gt 包为表格添加多个脚注\n\n\n\n\n\n19.2.2 gtsummary\ngtsummary 是 gt 的一个扩展包, 主要用于创建统计摘要表格.\n它连接了数据分析与表格创建之间的桥梁，允许用户直接从分析输出中无缝生成摘要表格, 特别适合医学和社会科学领域的研究报告。\n\n19.2.2.1 回归模型摘要\ntbl_regression() 函数可以创建回归模型的摘要表格:\n\n\nShow/Hide Code\n# 示例数据\ndata(\"Titanic\")\ndf = as.data.frame(Titanic)\n\n# 建立logistics回归模型\nmodel = glm(Survived ~ Age + Class + Sex + Freq, family = binomial, data = df)\n\n# 使用 gtsummary 包创建表格\nmodel |&gt;\n  tbl_regression()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nlog(OR)\n95% CI\np-value\n\n\n\n\nAge\n\n\n\n\n\n\n\n\n    Child\n—\n—\n\n\n\n\n    Adult\n0.62\n-1.0, 2.4\n0.5\n\n\nClass\n\n\n\n\n\n\n\n\n    1st\n—\n—\n\n\n\n\n    2nd\n-0.03\n-2.0, 2.0\n&gt;0.9\n\n\n    3rd\n0.25\n-1.8, 2.4\n0.8\n\n\n    Crew\n0.27\n-1.8, 2.4\n0.8\n\n\nSex\n\n\n\n\n\n\n\n\n    Male\n—\n—\n\n\n\n\n    Female\n-0.37\n-1.9, 1.1\n0.6\n\n\nFreq\n-0.01\n-0.02, 0.00\n0.3\n\n\n\nAbbreviations: CI = Confidence Interval, OR = Odds Ratio\n\n\n\n\n\n\n使用 tbl_regression() 创建回归模型摘要表格\n\n\n增加更多统计量:\n\n\nShow/Hide Code\nmodel |&gt;\n  tbl_regression(intercept = TRUE, conf.level = 0.9) |&gt; # 增加截距和置信区间\n  add_glance_source_note() |&gt; # 添加模型摘要信息\n  add_global_p() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nlog(OR)\n90% CI\np-value\n\n\n\n\n(Intercept)\n0.10\n-1.4, 1.6\n&gt;0.9\n\n\nAge\n\n\n\n\n0.5\n\n\n    Child\n—\n—\n\n\n\n\n    Adult\n0.62\n-0.78, 2.1\n\n\n\n\nClass\n\n\n\n\n&gt;0.9\n\n\n    1st\n—\n—\n\n\n\n\n    2nd\n-0.03\n-1.7, 1.7\n\n\n\n\n    3rd\n0.25\n-1.5, 2.0\n\n\n\n\n    Crew\n0.27\n-1.5, 2.0\n\n\n\n\nSex\n\n\n\n\n0.6\n\n\n    Male\n—\n—\n\n\n\n\n    Female\n-0.37\n-1.7, 0.89\n\n\n\n\nFreq\n-0.01\n-0.02, 0.00\n0.2\n\n\n\nAbbreviations: CI = Confidence Interval, OR = Odds Ratio\n\n\nNull deviance = 44.4; Null df = 31; Log-likelihood = -21.3; AIC = 56.5; BIC = 66.8; Deviance = 42.5; Residual df = 25; No. Obs. = 32\n\n\n\n\n\n\n使用 tbl_regression() 创建回归模型摘要表格并增加统计量\n\n\n\n\n19.2.2.2 多模型合并\n\n\nShow/Hide Code\ndata(trial)\n\nmodel_reglog &lt;- glm(response ~ trt + grade, data = trial, family = binomial) |&gt;\n  tbl_regression()\n\nmodel_cox  &lt;- coxph(Surv(ttdeath, death) ~ trt + grade, data = trial) |&gt;\n  tbl_regression()\n\ntbl_merge(\n  list(model_reglog, model_cox),\n  tab_spanner = c(\"**Tumor Response**\", \"**Time to Death**\")\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\n\nTumor Response\n\n\nTime to Death\n\n\n\nlog(OR)\n95% CI\np-value\nlog(HR)\n95% CI\np-value\n\n\n\n\nChemotherapy Treatment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Drug A\n—\n—\n\n\n—\n—\n\n\n\n\n    Drug B\n0.19\n-0.41, 0.81\n0.5\n0.22\n-0.15, 0.59\n0.2\n\n\nGrade\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    I\n—\n—\n\n\n—\n—\n\n\n\n\n    II\n-0.06\n-0.82, 0.68\n0.9\n0.25\n-0.22, 0.72\n0.3\n\n\n    III\n0.08\n-0.66, 0.82\n0.8\n0.52\n0.07, 0.98\n0.024\n\n\n\nAbbreviations: CI = Confidence Interval, HR = Hazard Ratio, OR = Odds Ratio\n\n\n\n\n\n\n使用 tbl_merge() 合并多个模型的回归结果表格\n\n\n\n\n\n19.2.3 gtExtras\ngtExtras 增强并扩展了 gt 包的功能。可以创建更复杂和美观的表格。\n\n19.2.3.1 汇总原始数据\n结合 grouped by, 制作 “每个单元格有很多数据” 的表格\n\n\nShow/Hide Code\ndata(iris)\n\n# 创建一个包含鸢尾花数据的数据框\nagg_iris = iris |&gt;\n  group_by(Species) |&gt;\n  summarize(\n    Sepal.L = list(Sepal.Length),\n    Sepal.W = list(Sepal.Width),\n    Petal.L = list(Petal.Length),\n    Petal.W = list(Petal.Width)\n  )\n\n# 使用 gtExtras 包创建表格\nagg_iris |&gt;\n  gt()\n\n\n\n\n\n\n\n\nSpecies\nSepal.L\nSepal.W\nPetal.L\nPetal.W\n\n\n\n\nsetosa\n5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.8, 4.8, 4.3, 5.8, 5.7, 5.4, 5.1, 5.7, 5.1, 5.4, 5.1, 4.6, 5.1, 4.8, 5.0, 5.0, 5.2, 5.2, 4.7, 4.8, 5.4, 5.2, 5.5, 4.9, 5.0, 5.5, 4.9, 4.4, 5.1, 5.0, 4.5, 4.4, 5.0, 5.1, 4.8, 5.1, 4.6, 5.3, 5.0\n3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.4, 3.0, 3.0, 4.0, 4.4, 3.9, 3.5, 3.8, 3.8, 3.4, 3.7, 3.6, 3.3, 3.4, 3.0, 3.4, 3.5, 3.4, 3.2, 3.1, 3.4, 4.1, 4.2, 3.1, 3.2, 3.5, 3.6, 3.0, 3.4, 3.5, 2.3, 3.2, 3.5, 3.8, 3.0, 3.8, 3.2, 3.7, 3.3\n1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.6, 1.4, 1.1, 1.2, 1.5, 1.3, 1.4, 1.7, 1.5, 1.7, 1.5, 1.0, 1.7, 1.9, 1.6, 1.6, 1.5, 1.4, 1.6, 1.6, 1.5, 1.5, 1.4, 1.5, 1.2, 1.3, 1.4, 1.3, 1.5, 1.3, 1.3, 1.3, 1.6, 1.9, 1.4, 1.6, 1.4, 1.5, 1.4\n0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.2, 0.1, 0.1, 0.2, 0.4, 0.4, 0.3, 0.3, 0.3, 0.2, 0.4, 0.2, 0.5, 0.2, 0.2, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.2, 0.2, 0.3, 0.3, 0.2, 0.6, 0.4, 0.3, 0.2, 0.2, 0.2, 0.2\n\n\nversicolor\n7.0, 6.4, 6.9, 5.5, 6.5, 5.7, 6.3, 4.9, 6.6, 5.2, 5.0, 5.9, 6.0, 6.1, 5.6, 6.7, 5.6, 5.8, 6.2, 5.6, 5.9, 6.1, 6.3, 6.1, 6.4, 6.6, 6.8, 6.7, 6.0, 5.7, 5.5, 5.5, 5.8, 6.0, 5.4, 6.0, 6.7, 6.3, 5.6, 5.5, 5.5, 6.1, 5.8, 5.0, 5.6, 5.7, 5.7, 6.2, 5.1, 5.7\n3.2, 3.2, 3.1, 2.3, 2.8, 2.8, 3.3, 2.4, 2.9, 2.7, 2.0, 3.0, 2.2, 2.9, 2.9, 3.1, 3.0, 2.7, 2.2, 2.5, 3.2, 2.8, 2.5, 2.8, 2.9, 3.0, 2.8, 3.0, 2.9, 2.6, 2.4, 2.4, 2.7, 2.7, 3.0, 3.4, 3.1, 2.3, 3.0, 2.5, 2.6, 3.0, 2.6, 2.3, 2.7, 3.0, 2.9, 2.9, 2.5, 2.8\n4.7, 4.5, 4.9, 4.0, 4.6, 4.5, 4.7, 3.3, 4.6, 3.9, 3.5, 4.2, 4.0, 4.7, 3.6, 4.4, 4.5, 4.1, 4.5, 3.9, 4.8, 4.0, 4.9, 4.7, 4.3, 4.4, 4.8, 5.0, 4.5, 3.5, 3.8, 3.7, 3.9, 5.1, 4.5, 4.5, 4.7, 4.4, 4.1, 4.0, 4.4, 4.6, 4.0, 3.3, 4.2, 4.2, 4.2, 4.3, 3.0, 4.1\n1.4, 1.5, 1.5, 1.3, 1.5, 1.3, 1.6, 1.0, 1.3, 1.4, 1.0, 1.5, 1.0, 1.4, 1.3, 1.4, 1.5, 1.0, 1.5, 1.1, 1.8, 1.3, 1.5, 1.2, 1.3, 1.4, 1.4, 1.7, 1.5, 1.0, 1.1, 1.0, 1.2, 1.6, 1.5, 1.6, 1.5, 1.3, 1.3, 1.3, 1.2, 1.4, 1.2, 1.0, 1.3, 1.2, 1.3, 1.3, 1.1, 1.3\n\n\nvirginica\n6.3, 5.8, 7.1, 6.3, 6.5, 7.6, 4.9, 7.3, 6.7, 7.2, 6.5, 6.4, 6.8, 5.7, 5.8, 6.4, 6.5, 7.7, 7.7, 6.0, 6.9, 5.6, 7.7, 6.3, 6.7, 7.2, 6.2, 6.1, 6.4, 7.2, 7.4, 7.9, 6.4, 6.3, 6.1, 7.7, 6.3, 6.4, 6.0, 6.9, 6.7, 6.9, 5.8, 6.8, 6.7, 6.7, 6.3, 6.5, 6.2, 5.9\n3.3, 2.7, 3.0, 2.9, 3.0, 3.0, 2.5, 2.9, 2.5, 3.6, 3.2, 2.7, 3.0, 2.5, 2.8, 3.2, 3.0, 3.8, 2.6, 2.2, 3.2, 2.8, 2.8, 2.7, 3.3, 3.2, 2.8, 3.0, 2.8, 3.0, 2.8, 3.8, 2.8, 2.8, 2.6, 3.0, 3.4, 3.1, 3.0, 3.1, 3.1, 3.1, 2.7, 3.2, 3.3, 3.0, 2.5, 3.0, 3.4, 3.0\n6.0, 5.1, 5.9, 5.6, 5.8, 6.6, 4.5, 6.3, 5.8, 6.1, 5.1, 5.3, 5.5, 5.0, 5.1, 5.3, 5.5, 6.7, 6.9, 5.0, 5.7, 4.9, 6.7, 4.9, 5.7, 6.0, 4.8, 4.9, 5.6, 5.8, 6.1, 6.4, 5.6, 5.1, 5.6, 6.1, 5.6, 5.5, 4.8, 5.4, 5.6, 5.1, 5.1, 5.9, 5.7, 5.2, 5.0, 5.2, 5.4, 5.1\n2.5, 1.9, 2.1, 1.8, 2.2, 2.1, 1.7, 1.8, 1.8, 2.5, 2.0, 1.9, 2.1, 2.0, 2.4, 2.3, 1.8, 2.2, 2.3, 1.5, 2.3, 2.0, 2.0, 1.8, 2.1, 1.8, 1.8, 1.8, 2.1, 1.6, 1.9, 2.0, 2.2, 1.5, 1.4, 2.3, 2.4, 1.8, 1.8, 2.1, 2.4, 2.3, 1.9, 2.3, 2.5, 2.3, 1.9, 2.0, 2.3, 1.8\n\n\n\n\n\n结合 grouped by, 制作“每个单元格有很多数据”的表格\n\n\n\n\n19.2.3.2 折线图\ngt_plt_sparkline() 在表格单元格中创建折线图。\n使用刚才的 agg_iris 汇总数据框:\n\n\nShow/Hide Code\nagg_iris |&gt;\n  gt() |&gt;\n  gt_plt_sparkline(Sepal.L) |&gt; # 在 Sepal.L 列中添加折线图\n  gt_plt_sparkline(Sepal.W) |&gt; # 在 Sepal.W 列中添加折线图\n  gt_plt_sparkline(Petal.L) |&gt; # 在 Petal.L 列中添加折线图\n  gt_plt_sparkline(Petal.W)    # 在 Petal.W 列中添加折线图\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nSepal.L\nSepal.W\nPetal.L\nPetal.W\n\n\n\n\nsetosa\n\n\n\n   5.0\n\n\n\n\n   3.3\n\n\n\n\n   1.4\n\n\n\n\n   0.20\n\n\n\nversicolor\n\n\n\n   5.7\n\n\n\n\n   2.8\n\n\n\n\n   4.1\n\n\n\n\n   1.3\n\n\n\nvirginica\n\n\n\n   5.9\n\n\n\n\n   3.0\n\n\n\n\n   5.1\n\n\n\n\n   1.8\n\n\n\n\n\n\n使用 gt_plt_sparkline() 创建折线图\n\n\n\n\n19.2.3.3 分布图\ngt_plt_dist() 在表格单元中创建分布图。图表类型取决于 type 参数:\n还是使用 agg_iris 汇总数据框:\n\n\nShow/Hide Code\nagg_iris |&gt;\n  gt() |&gt;\n  gt_plt_dist(\n    Sepal.L,\n    type = \"density\" # 密度图\n  ) |&gt;\n  gt_plt_dist(\n    Sepal.W,\n    type = \"boxplot\" # 箱线图\n  ) |&gt;\n  gt_plt_dist(\n    Petal.L,\n    type = \"histogram\" # 直方图\n  ) |&gt;\n  gt_plt_dist(\n    Petal.W,\n    type = \"rug_strip\" # 裸条图\n  ) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecies\nSepal.L\nSepal.W\nPetal.L\nPetal.W\n\n\n\n\nsetosa\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n   \n\n\n\nversicolor\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n   \n\n\n\nvirginica\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n   \n\n\n\n\n\n\n使用 gt_plt_dist() 创建分布图\n\n\n\n\n19.2.3.4 条形图\ngt_plt_bar_pct() 不需要汇总数据。这个图表实际上是一个得分条形图, 最大值是 100%\n\n\nShow/Hide Code\np &lt;- head(iris) |&gt;\n  gt() |&gt;\n  gt_plt_bar_pct(\n    Sepal.Length,\n    labels = TRUE, # 显示百分比标签\n    # scaled = FALSE # “我提供的是原始数值，它们还没有被处理成百分比，你需要自己动手去计算和缩放。”\n    # scaled = TRUE # “你不需要做任何计算了。我提供给你的数值已经是最终百分比了，请直接使用。”\n\n  ) |&gt;\n  gt_plt_bar_pct(\n    Sepal.Width,\n    labels=FALSE,\n    fill = \"forestgreen\"\n  )\np\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n\n\n94.4%\n\n\n\n\n\n\n\n1.4\n0.2\nsetosa\n\n\n\n\n90.7%\n\n\n\n\n\n\n\n1.4\n0.2\nsetosa\n\n\n\n\n87%\n\n\n\n\n\n\n\n1.3\n0.2\nsetosa\n\n\n\n\n85.2%\n\n\n\n\n\n\n\n1.5\n0.2\nsetosa\n\n\n\n\n92.6%\n\n\n\n\n\n\n\n1.4\n0.2\nsetosa\n\n\n\n\n100%\n\n\n\n\n\n\n\n1.7\n0.4\nsetosa\n\n\n\n\n\n使用 gt_plt_bar_pct() 创建得分条形图\n\n\n\n\n19.2.3.5 摘要图表\ngt_plt_summary() 制作摘要图表,甚至还能交互查看,非常方便和美观\n注意需要先指定列类型\n\n\nShow/Hide Code\niris |&gt;\n  gt_plt_summary()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\niris\n\n\n150 rows x 5 cols\n\n\n\nColumn\nPlot Overview\nMissing\nMean\nMedian\nSD\n\n\n\n\n\n\n\nSepal.Length\n\n\n\n      4.3 auto7.9 auto\n\n0.0%\n5.8\n5.8\n0.8\n\n\n\n\n\nSepal.Width\n\n\n\n      2.0 auto4.4 auto\n\n0.0%\n3.1\n3.0\n0.4\n\n\n\n\n\nPetal.Length\n\n\n\n      1.0 auto6.9 auto\n\n0.0%\n3.8\n4.3\n1.8\n\n\n\n\n\nPetal.Width\n\n\n\n      100 mauto2 auto\n\n0.0%\n1.2\n1.3\n0.8\n\n\n\n\n\n\n\n\nSpecies\n\nsetosa, versicolor and virginica\n\n\n\n\n\n      3 categories\n\n0.0%\n—\n—\n—\n\n\n\n\n\n使用 gt_plt_summary() 制作摘要图表\n\n\n\n\n19.2.3.6 主题\nExcel 主题:\n\n\nShow/Hide Code\nhead(mtcars) |&gt;\n  gt() |&gt;\n  gt_theme_excel()\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\ngt_theme_excel() Excel 主题\n\n\n538(FiveThirtyEight) 主题:\n\n\nShow/Hide Code\nhead(mtcars) |&gt;\n  gt() |&gt;\n  gt_theme_538()\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\ngt_theme_538() 538(FiveThirtyEight) 主题\n\n\nESPN 主题:\n\n\nShow/Hide Code\nhead(mtcars) |&gt;\n  gt() |&gt;\n  gt_theme_espn()\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\ngt_theme_espn() ESPN 主题\n\n\nNY Times 主题:\n\n\nShow/Hide Code\nhead(mtcars) |&gt;\n  gt() |&gt;\n  gt_theme_nytimes()\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\ngt_theme_nytimes() NY Times 主题\n\n\n点阵 (dot matrix) 主题:\n\n\nShow/Hide Code\nhead(mtcars) |&gt;\n  gt() |&gt;\n  gt_theme_dot_matrix()\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\ngt_theme_dot_matrix() 点阵 (dot matrix) 主题\n\n\n黑暗主题:\n\n\nShow/Hide Code\nhead(mtcars) |&gt;\n  gt() |&gt;\n  gt_theme_dark()\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\ngt_theme_dark() 黑暗主题\n\n\nPFF 主题:\n\n\nShow/Hide Code\nhead(mtcars) |&gt;\n  gt() |&gt;\n  gt_theme_pff()\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\n\n\n卫报 Guardian 主题:\n\n\nShow/Hide Code\nhead(mtcars) |&gt;\n  gt() |&gt;\n  gt_theme_guardian()\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n\ngt_theme_guardian() 卫报 Guardian 主题",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Table</span>"
    ]
  },
  {
    "objectID": "table.html#kable-family",
    "href": "table.html#kable-family",
    "title": "19  Table",
    "section": "19.3 kable family",
    "text": "19.3 kable family\nkable() 和 kableExtra() 用于 Quarto / R Markdown 文档\n\n19.3.1 kable()\n# `kable()` 用法演示\nkable(\n  x, # 数据框或矩阵\n  format = c(\"pandoc\", \"latex\", \"HTML\"), # 输出格式\n  digits = getOption(\"digits\"), # 小数点位数\n  row.names = FALSE, # 是否显示行名\n  col.names = TRUE, # 是否显示列名\n  align = c(\"auto\", \"left\", \"center\", \"right\"), # 对齐方式\n  caption = NULL, # 表格标题\n)\n\n\nShow/Hide Code\n# 创建一个简单的数据框\ndf = data.frame(\n  Temp = c(1, 2, 3, 4),\n  Rain = c(12, 42, 17, 9),\n  Hum = c(21, 24, 71, 90)\n)\ndf |&gt;\n  kable() # 创建一个简单的表格\n\n\n\n\n\nTemp\nRain\nHum\n\n\n\n\n1\n12\n21\n\n\n2\n42\n24\n\n\n3\n17\n71\n\n\n4\n9\n90\n\n\n\n使用 kable() 创建表格\n\n\n\n\n19.3.2 kableExtra()\n\n19.3.2.1 基本\nkableExtra 依赖于 kable 包，并允许使用 |&gt; （管道）符号。主要功能名为 kbl() ，与 kable() 类似。\n\n\nShow/Hide Code\ndf |&gt;\n  kbl() |&gt;\n  kable_styling()\n\n\n\n\n\n\nTemp\n\n\nRain\n\n\nHum\n\n\n\n\n\n\n1\n\n\n12\n\n\n21\n\n\n\n\n2\n\n\n42\n\n\n24\n\n\n\n\n3\n\n\n17\n\n\n71\n\n\n\n\n4\n\n\n9\n\n\n90\n\n\n\n\n使用 kableExtra::kbl() 创建表格\n\n\n\n\n19.3.2.2 颜色\n更改行或列的颜色：\n\n\nShow/Hide Code\ndf |&gt;\n  kbl(align = \"c\") |&gt; # 居中对齐所有列\n  kable_styling(full_width = FALSE) |&gt; # 表格宽度不自动拉伸\n  column_spec(2, color = \"red\") |&gt; # 第二列字体颜色设为红色\n  column_spec(1, background = \"green\") |&gt; # 第一列背景色设为绿色\n  row_spec(3, color = \"blue\") |&gt; # 第三行字体颜色设为蓝色\n  row_spec(4, background = \"yellow\") # 第四行背景色设为黄色\n\n\n\n\n\n\nTemp\n\n\nRain\n\n\nHum\n\n\n\n\n\n\n1\n\n\n12\n\n\n21\n\n\n\n\n2\n\n\n42\n\n\n24\n\n\n\n\n3\n\n\n17\n\n\n71\n\n\n\n\n4\n\n\n9\n\n\n90\n\n\n\n\n使用 kableExtra 更改行列颜色和样式\n\n\ncolor 和 background 参数也可以接受颜色向量：\n\n\nShow/Hide Code\ndf |&gt;\n  kbl(align = \"c\") |&gt; # 所有列居中对齐\n  kable_styling(full_width = FALSE) |&gt; # 表格宽度不自动拉伸\n  # 为第三列设置不同的背景色，每一行对应一个颜色\n  column_spec(3, background = c(\"blue\", \"red\", \"black\", \"blue\"))\n\n\n\n\n\n\nTemp\n\n\nRain\n\n\nHum\n\n\n\n\n\n\n1\n\n\n12\n\n\n21\n\n\n\n\n2\n\n\n42\n\n\n24\n\n\n\n\n3\n\n\n17\n\n\n71\n\n\n\n\n4\n\n\n9\n\n\n90\n\n\n\n\n使用 kableExtra 为列设置颜色向量（每行不同颜色）\n\n\n渐变颜色：\n\n\nShow/Hide Code\n# 生成渐变色函数，从 darkred 到 magenta\ncolfunc &lt;- colorRampPalette(c(\"darkred\", \"magenta\"))\nn_color &lt;- nrow(df) # 获取数据框的行数\ncolors &lt;- colfunc(n_color) # 生成与数据行数相同的颜色向量\n\n# 按照 Rain 列降序排列数据框\ndf &lt;- df |&gt; arrange(desc(Rain))\n\ndf |&gt;\n  kbl(align = \"c\") |&gt; # 所有列居中对齐\n  kable_styling(full_width = FALSE) |&gt; # 表格宽度不自动拉伸\n  column_spec(3, background = colors) |&gt; # 第三列设置为渐变背景色\n  column_spec(2, color = colors) # 第二列字体颜色设置为渐变色\n\n\n\n\n\n\nTemp\n\n\nRain\n\n\nHum\n\n\n\n\n\n\n2\n\n\n42\n\n\n24\n\n\n\n\n3\n\n\n17\n\n\n71\n\n\n\n\n1\n\n\n12\n\n\n21\n\n\n\n\n4\n\n\n9\n\n\n90\n\n\n\n\n使用 kableExtra 为列设置渐变色和字体颜色（每行不同颜色）\n\n\n\n\n19.3.2.3 图片\n\n\nShow/Hide Code\n# 创建一个包含姓名、领域和图片列的数据框\ndf = data.frame(\n  name = c(\"E. Charpentier\", \"R. Penrose\", \"L. Glück\", \"M. Houghton\"), # 姓名\n  field = c(\"Chemistry\", \"Physics\", \"Litterature\", \"Medicine\"),        # 领域\n  image = \"\"                                                           # 图片列（占位）\n)\n\n# 生成图片路径向量，每行对应一张图片\npath_images = rep(\"./image/pikachu.png\", nrow(df))\n\n# 使用 kableExtra 创建表格并插入图片\ndf |&gt;\n  kbl(booktabs = TRUE, align = \"c\") |&gt;                # 创建表格，booktabs 风格，所有列居中\n  kable_styling() |&gt;                                  # 应用默认表格美化样式\n  kable_paper(full_width = TRUE) |&gt;                   # 使用 paper 风格，表格宽度自适应\n  column_spec(\n    3,                                                # 第三列（image 列）\n    image = spec_image(path_images, 200, 200)         # 插入图片，宽高均为 200 像素\n  )\n\n\n\n\n\n\nname\n\n\nfield\n\n\nimage\n\n\n\n\n\n\nE. Charpentier\n\n\nChemistry\n\n\n\n\n\n\n\n\n\n\n\nR. Penrose\n\n\nPhysics\n\n\n\n\n\n\n\n\n\n\n\nL. Glück\n\n\nLitterature\n\n\n\n\n\n\n\n\n\n\n\nM. Houghton\n\n\nMedicine\n\n\n\n\n\n\n\n\n\n\n\n使用 kableExtra 在表格中插入图片\n\n\n\n\n19.3.2.4 链接\n添加图片及连接：\n\n\nShow/Hide Code\n# 生成图片路径向量，每行对应一张图片\npath_images = rep(\"./image/pikachu.png\", nrow(df))\n\n# 定义每个人名对应的维基百科链接\nurls = c(\n  \"https://en.wikipedia.org/wiki/Emmanuelle_Charpentier\",\n  \"https://en.wikipedia.org/wiki/Roger_Penrose\",\n  \"https://en.wikipedia.org/wiki/Louise_Glück\",\n  \"https://en.wikipedia.org/wiki/Michael_Houghton\"\n)\n\ndf |&gt;\n  kbl(booktabs = TRUE, align = \"c\") |&gt; # 创建表格，使用booktabs风格，所有列居中\n  kable_styling() |&gt; # 应用默认的表格美化样式\n  kable_material(c(\"striped\", \"hover\", \"condensed\", \"responsive\")) |&gt; # 应用Material风格，带斑马纹、悬停、紧凑和响应式\n  column_spec(1, link = urls, bold = TRUE) |&gt; # 第一列（姓名）添加超链接并加粗\n  column_spec(3, image = spec_image(path_images, 200, 200)) # 第三列插入图片，宽高均为200像素\n\n\n\n\n\n\nname\n\n\nfield\n\n\nimage\n\n\n\n\n\n\n E. Charpentier \n\n\nChemistry\n\n\n\n\n\n\n\n\n\n\n\n R. Penrose \n\n\nPhysics\n\n\n\n\n\n\n\n\n\n\n\n L. Glück \n\n\nLitterature\n\n\n\n\n\n\n\n\n\n\n\n M. Houghton \n\n\nMedicine\n\n\n\n\n\n\n\n\n\n\n\n使用 kableExtra 添加图片和超链接",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Table</span>"
    ]
  },
  {
    "objectID": "table.html#interactive",
    "href": "table.html#interactive",
    "title": "19  Table",
    "section": "19.4 Interactive",
    "text": "19.4 Interactive\nDT、reactable 或 formattable 制作交互式表格\n\n19.4.1 DT\nDT（官方文档），即DataTables，基于 Javascript，DT 以其高效处理大型数据集的能力和丰富的功能（如搜索、排序和分页）而突出。\n\n19.4.1.1 基本\n主要是 DT::datatable() 函数:\n\n\nShow/Hide Code\ndata(mtcars)\n\ntable = datatable(mtcars)\ntable\n\n\n\n\n使用 DT 包创建交互式表格：基本用法\n\n\nShow/Hide Code\n# 保存为 HTML 文件\n# library(htmlwidgets) # 加载 htmlwidgets 包\n# saveWidget(table, file=\"../HtmlWidget/dt-table-basic.html\") # 保存为 HTML 文件\n\n\n\n\n19.4.1.2 CSS 类\n\n\nShow/Hide Code\ntable = datatable(\n  mtcars, \n  class = 'cell-border stripe hover compact'\n)\ntable\n\n\n\n\n使用 DT 包创建交互式表格：添加 CSS 类\n\n\n\n\n19.4.1.3 标题\n\n\nShow/Hide Code\n# 使用 datatable() 创建交互式表格，并添加标题\ntable &lt;- datatable(\n  mtcars, # 数据集，内置的汽车数据\n  caption = tags$caption(\n    style = 'caption-side: bottom; text-align: center;', # 设置标题样式：底部居中\n    'Table 1: ', # 标题前缀\n    em('The mtcars dataset is a dataset about cars properties') # 斜体副标题\n  )\n)\ntable # 显示表格\n\n\n\n\n使用 DT 包创建交互式表格：添加标题\n\n\n\n\n19.4.1.4 筛选\n\n\nShow/Hide Code\ntable &lt;- datatable(mtcars,\n  filter = \"top\", # 在表格顶部添加筛选器\n)\ntable\n\n\n\n\n使用 DT 包创建交互式表格：添加筛选器\n\n\n\n\n19.4.1.5 Callback\ncallback 参数将 JavaScript 函数用在表格中：\n\n\nShow/Hide Code\ntable &lt;- datatable(mtcars, callback = JS('table.page(\"next\").draw(false);'))\ntable\n\n\n\n\n使用 DT 包创建交互式表格：添加 JavaScript 回调\n\n\n\n\n19.4.1.6 编辑\n\n\nShow/Hide Code\ntable &lt;- datatable(\n  mtcars,\n  editable = list(\n    target = \"row\",\n    disable = list(columns = c(1, 3, 5))\n  )\n)\ntable # 显示可编辑的表格\n\n\n\n\n使用 DT 包创建可编辑的交互式表格\n\n\n\n\n19.4.1.7 定制\n\n\nShow/Hide Code\n# 创建一个包含 HTML 内容的数据集\ndata = matrix(\n  c(\n    '&lt;b&gt;Bold&lt;/b&gt;', # 第一行第一列，粗体 HTML 标签\n    '&lt;em&gt;Emphasize&lt;/em&gt;', # 第二行第一列，斜体 HTML 标签\n    '&lt;a href=\"https://r-graph-gallery.com/package/dt.html\"&gt;Click here&lt;/a&gt;', # 第一行第二列，带链接的 HTML 标签\n    '&lt;a href=\"#\" onclick=\"alert(\\'This message is displayed thanks to DT table!\\');\"&gt;Click there&lt;/a&gt;' # 第二行第二列，点击弹窗的 HTML 标签\n  ),\n  2 # 指定矩阵有两列\n)\n\n# 修改列名，使用 HTML 语法自定义样式\ncolnames(data) = c(\n  '&lt;span style=\"color:red\"&gt;Red column&lt;/span&gt;', # 第一列名为红色字体\n  '&lt;em&gt;Italic column&lt;/em&gt;' # 第二列名为斜体\n)\n\n# 创建 DT 交互式表格\ntable &lt;- datatable(\n  data,\n  escape = FALSE # 允许单元格内容作为 HTML 解释（否则会转义为纯文本）\n)\n\ntable # 显示表格\n\n\n\n\n使用 DT 包创建带有 HTML 内容和自定义列名的交互式表格\n\n\n\n\n\n19.4.2 reactable\n无限单元格自定义\n它简化了在单元格中嵌入图片的过程，通过其高级单元格着色功能，可以创建类似热图的表格。\n此外，它还提供了独特的功能来集成条形图或气泡，进一步增强了表格的视觉吸引力和信息价值。\n也非常适合设计具有可扩展行的表格，使其成为以用户友好方式汇总和展示复杂数据集的理想选择。\n\n19.4.2.1 基本\n\n\nShow/Hide Code\ndf = data.frame(\n  date = as.POSIXct(\n    c(\"2019-01-02 3:22:15\", \"2019-03-15 09:15:55\", \"2019-09-22 14:20:00\"),\n    tz = \"America/New_York\"\n  ),\n  currency = c(1000, 2000, 3000),\n  temperature = c(10, 20, 30),\n  percentage = c(0.12, 0.23, 0.34)\n)\n\ntab &lt;- (reactable(df))\n\nembed_widget(tab, height = \"300px\")\n\n\n\n使用 reactable() 创建交互式表格：基本用法\n\n\n\n\n19.4.2.2 日期\n使用 colFormat() 函数来格式化日期\nformat 参数来自定义日期格式，有三种日期格式： datetime、date和 time。\n\n\nShow/Hide Code\n# 创建一个包含不同时间格式的数据框\ndatetimes &lt;- as.POSIXct(\n  c(\"2019-01-02 3:22:15\", \"2019-03-15 09:15:55\", \"2019-09-22 14:20:00\"),\n  tz = \"America/New_York\"\n)\ndata &lt;- data.frame(\n  datetime = datetimes,         # 日期时间列\n  date = datetimes,             # 仅日期列\n  time = datetimes,             # 仅时间列（12小时制）\n  time_24h = datetimes,         # 仅时间列（24小时制）\n  datetime_pt_BR = datetimes    # 用于本地化显示的日期时间列\n)\n\n# 使用 reactable 创建交互式表格，并对不同列应用不同的日期/时间格式\ntab &lt;- reactable(\n  data,\n  columns = list(\n    datetime = colDef(format = colFormat(datetime = TRUE)), # 显示完整日期时间\n    date = colDef(format = colFormat(date = TRUE)),         # 仅显示日期\n    time = colDef(format = colFormat(time = TRUE)),         # 仅显示时间（12小时制）\n    time_24h = colDef(format = colFormat(time = TRUE, hour12 = FALSE)), # 仅显示时间（24小时制）\n    datetime_pt_BR = colDef(\n      format = colFormat(datetime = TRUE, locales = \"zh-CN\") # 按中国北京时间显示日期时间\n    )\n  )\n)\n\nembed_widget(tab, height = \"300px\")\n\n\n\n使用 reactable::colFormat() 格式化日期、时间和本地化显示\n\n\n\n\n19.4.2.3 货币\n\n\nShow/Hide Code\n# 创建一个包含多种货币的数据框\ndata = data.frame(\n  USD = c(12.12, 2141.213, 0.42, 1.55, 34414),         # 美元\n  EUR = c(10.68, 1884.27, 0.37, 1.36, 30284.32),       # 欧元\n  INR = c(861.07, 152122.48, 29.84, 110, 2444942.63),  # 印度卢比\n  JPY = c(1280, 226144, 44.36, 164, 3634634.61),       # 日元\n  MAD = c(115.78, 20453.94, 4.01, 15, 328739.73)       # 摩洛哥迪拉姆\n)\n\n# 使用 reactable 创建交互式表格，并对每一列应用不同的货币格式和本地化设置\ntab = reactable(\n  data,\n  columns = list(\n    USD = colDef(\n      # 美元，千分位分隔符，英文美国本地化\n      format = colFormat(currency = \"USD\", separators = TRUE, locales = \"en-US\")\n    ),\n    EUR = colDef(\n      # 欧元，千分位分隔符，德语德国本地化\n      format = colFormat(currency = \"EUR\", separators = TRUE, locales = \"de-DE\")\n    ),\n    INR = colDef(\n      # 印度卢比，千分位分隔符，印地语印度本地化\n      format = colFormat(currency = \"INR\", separators = TRUE, locales = \"hi-IN\")\n    ),\n    JPY = colDef(\n      # 日元，千分位分隔符，日语日本本地化\n      format = colFormat(currency = \"JPY\", separators = TRUE, locales = \"ja-JP\")\n    ),\n    MAD = colDef(\n      # 摩洛哥迪拉姆，千分位分隔符，阿拉伯语摩洛哥本地化\n      format = colFormat(currency = \"MAD\", separators = TRUE, locales = \"ar-MA\")\n    )\n  )\n)\n\nembed_widget(tab, height = \"300px\")\n\n\n\n使用 reactable::colFormat() 格式化多种货币并本地化显示\n\n\n\n\n19.4.2.4 数字\n\n\nShow/Hide Code\n# 创建一个包含温度和百分比的数据框\ndf &lt;- data.frame(\n  temperature = c(10, 20, 30),   # 温度列，单位为摄氏度\n  percentage = c(0.12, 0.23, 0.34) # 百分比列，原始值为小数\n)\n\n# 使用 reactable 创建交互式表格，并对不同列进行格式化\ntab &lt;- reactable(\n  df,\n  columns = list(\n    # 对 temperature 列添加后缀“°C”\n    temperature = colDef(format = colFormat(suffix = \" °C\")),\n    # 对 percentage 列格式化为百分比，并添加前缀“Percent: ”\n    percentage = colDef(\n      format = colFormat(percent = TRUE, prefix = \"Percent: \")\n    )\n  )\n)\n\nembed_widget(tab, height = \"200px\")\n\n\n\n使用 reactable::colFormat() 格式化数字列\n\n\n\n\n19.4.2.5 图片表格\n\n\nShow/Hide Code\nlibrary(tidyverse) # 数据处理与可视化\nlibrary(reactablefmtr) # reactable 扩展包，用于数据条、色阶等\nlibrary(reactable) # 交互式表格\nlibrary(htmltools) # HTML 工具包\nlibrary(webshot2) # 网页截图\n\n# 读取数据\ndf &lt;- read_csv(\n  \"\nrank,player,years,australian_open,french_open,us_open,wimbledon,titles,region\n1,Margaret Court,1960–1973,11,5,5,3,24,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/AU.svg\n2,Serena Williams,1999–2017,7,3,6,7,23,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/US.svg\n3,Steffi Graf,1987–1999,4,6,5,7,22,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/DE.svg\n4,Helen Wills Moody,1923–1938,0,4,7,8,19,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/US.svg\n5,Chris Evert,1974–1986,2,7,6,3,18,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/US.svg\n5,Martina Navratilova,1978–1990,3,2,4,9,18,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/US.svg\n6,Billie Jean King,1966–1975,1,1,4,6,12,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/US.svg\n7,Maureen Connolly,1951–1954,1,2,3,3,9,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/US.svg\n7,Monica Seles,1990–1996,4,3,2,0,9,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/US.svg\n8,Molla Bjurstedt Mallory,1915–1922,0,0,8,0,8,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/FR.svg\n8,Suzanne Lenglen,1919–1926,0,2,0,6,8,https://raw.githubusercontent.com/catamphetamine/country-flag-icons/master/flags/1x1/US.svg\n\"\n)\n\n\n# 自定义色阶调色板，用于色阶填充\npal_scale &lt;- c(\"#F4FFFD\", \"#E9DAEC\", \"#A270E5\", \"#43009A\")\n\n# 主体表格，注意字体需本地安装\ntable &lt;- reactable(\n  df |&gt;\n    dplyr::select( # 还起到一个排序的作用\n      rank,\n      player,\n      region,\n      australian_open,\n      french_open,\n      us_open,\n      wimbledon,\n      titles\n    ),\n  theme = reactableTheme(\n    borderColor = \"#DADADA\" # 边框颜色\n  ),\n  defaultPageSize = 11, # 默认每页显示11行\n  defaultColDef = colDef(\n    vAlign = \"center\", # 垂直居中\n    align = \"center\", # 水平居中\n    headerVAlign = \"center\", # 表头垂直居中\n    style = color_scales(df, span = 4:7, colors = pal_scale), # 4~7列使用色阶填充\n    width = 90 # 列宽\n  ),\n  columnGroups = list(\n    colGroup(\n      name = \"\", # 分组名为空\n      columns = c(\"player\", \"region\", \"titles\"), # 分组列\n      align = \"left\" # 左对齐\n    ),\n    colGroup(\n      name = \"Event\", # 分组名\n      columns = c(\"australian_open\", \"us_open\", \"french_open\", \"wimbledon\"), # 大满贯赛事列\n    )\n  ),\n  columns = list(\n    rank = colDef(show = FALSE), # 隐藏rank列\n    player = colDef(\n      name = \"Player (First Title - Last Title)\", # 列名\n      align = \"left\", # 左对齐\n      width = 250, # 列宽\n      # 自定义单元格内容：显示球员头像+姓名+年份\n      cell = function(value) {\n        image &lt;- img(\n          src = paste0(\n            \"https://raw.githubusercontent.com/tashapiro/tanya-data-viz/main/tennis/images/\",\n            str_replace_all(tolower(value), \" \", \"_\"),\n            \".png\"\n          ),\n          style = \"height: 33px;\",\n          alt = value\n        )\n        tagList(\n          div(\n            style = \"display: inline-block;vertical-align:middle;width:50px\",\n            image\n          ),\n          div(\n            style = \"display: inline-block;vertical-align:middle;\",\n            div(style = \"vertical-align:middle;\", value),\n            div(\n              style = \"vertical-align:middle;font-size:8pt;color:#8C8C8C;\",\n              paste0(\"(\", df[df$player == value, ]$years),\n              \")\"\n            )\n          )\n        )\n      }\n    ),\n    region = colDef(\n      name = \"Region\", # 列名\n      align = \"left\", # 左对齐\n      # 自定义单元格内容：显示国旗图片，部分球员加星号\n      cell = function(value, index) {\n        image &lt;- img(\n          src = value,\n          style = \"width:60px;height:20px;\",\n          alt = value\n        )\n        player &lt;- df$player[index]\n        if (player %in% c(\"Monica Seles\", \"Molla Bjurstedt Mallory\")) {\n          tagList(div(\n            style = \"display:inline-block;vertical-align:middle;width:80px\",\n            image,\n            \"*\"\n          ))\n        } else {\n          tagList(div(\n            style = \"display:inline-block;vertical-align:middle;width:50px\",\n            image\n          ))\n        }\n      },\n      width = 120 # 列宽\n    ),\n    australian_open = colDef(name = \"AU Open\"), # 澳网\n    french_open = colDef(name = \"FR Open\"), # 法网\n    us_open = colDef(name = \"US Open\"), # 美网\n    wimbledon = colDef(name = \"Wmbl\"), # 温网\n    titles = colDef(\n      name = \"Total Titles\", # 列名\n      width = 180, # 列宽\n      class = \"border-left\", # 左边加边框\n      align = \"left\", # 左对齐\n      # 使用数据条可视化总冠军数\n      cell = data_bars(\n        df,\n        fill_color = \"#7814ff\", # 数据条颜色\n        text_position = \"outside-end\", # 数字显示在条形外部\n        bar_height = 10, # 条形高度\n        text_size = 12, # 数字字体大小\n        min_value = 5, # 最小值\n        max_value = 32, # 最大值\n        background = \"transparent\" # 背景透明\n      )\n    )\n  )\n)\n\n# 添加标题、子标题、脚注和数据来源\n# 字体需本地安装（如 Font Awesome 图标字体）\ntable_final &lt;- table |&gt;\n  htmlwidgets::prependContent(\n    tagList(\n      # 网球logo\n      tags$img(\n        src = \"https://pngimg.com/uploads/tennis/tennis_PNG10416.png\",\n        style = \"width:50px;height:34px;display:inline-block;vertical-align:middle;\"\n      ),\n      # 主标题\n      tags$div(\n        \"Grand Slam Legends\",\n        style = \"font-size:32px;font-weight:bold;font-family:sans-serif;margin-bottom:0;display:inline-block;vertical-align:middle;\"\n      ),\n      # 副标题\n      tags$h3(\n        \"Top Women's Tennis Players by Singles Championship Titles\",\n        style = \"font-family:sans-serif;margin-bottom:0;margin-top:0;font-weight:400;color:#8C8C8C;padding-left:10px;\"\n      )\n    )\n  ) |&gt;\n  htmlwidgets::appendContent(\n    # 脚注\n    tags$div(\n      \"* Player represented more than one country during career. Most recent country shown.\",\n      style = \"font-family:Roboto;color:black;font-size:9pt;border-bottom-style:solid;border-top-style:solid;width:910px;padding-bottom:8px;padding-top:8px;border-color:#DADADA;\"\n    ),\n    # 数据来源\n    tags$div(\n      tags$div(\n        \"Data: Wikipedia as of November 2022 | Graphic: \",\n        style = \"display:inline-block;vertical-align:middle;\"\n      ),\n      tags$div(\n        \"twitter\",\n        style = \"font-family:'Font Awesome 6 Brands';display:inline-block;vertical-align:middle;\"\n      ),\n      tags$div(\n        \"tanya_shapiro\",\n        style = \"display:inline-block;vertical-align:middle;\"\n      ),\n      tags$div(\n        \"github\",\n        style = \"font-family:'Font Awesome 6 Brands';display:inline-block;vertical-align:middle;\"\n      ),\n      tags$div(\n        \"tashapiro\",\n        style = \"display:inline-block;vertical-align:middle;\"\n      ),\n      style = \"font-family:sans-serif;color:#8C8C8C;font-size:10pt;width:910px;padding-top:8px;display:inline-block;vertical-align:middle;\"\n    )\n  )\n\nembed_widget(table_final)\n\n\n\n使用 reactable 和 reactablefmtr 制作带图片和数据条的网球冠军表格\n\n\n\n\n\n19.4.3 formattable\nformattable 是另一个创建交互式表格的 R 包。\n\n19.4.3.1 基础\nformattable 提供了几种典型的可格式化对象，如 percent、comma、currency、accounting 和 scientific 。\n这些对象本质上是在预定义格式规则和参数下的数值向量\n\n# 百分比\npercent(c(0.1, 0.02, 0.03, 0.12))\n#&gt; [1] 10.00% 2.00%  3.00%  12.00%\n\n# 百分比可运算\npercent(c(0.1, 0.02, 0.03, 0.12)) + 0.05\n#&gt; [1] 15.00% 7.00%  8.00%  17.00%\n\n# 货币\nbalance &lt;- accounting(c(1000, 500, 200, -150, 0, 1200))\nbalance\n#&gt; [1] 1,000.00 500.00   200.00   (150.00) 0.00     1,200.00\n\n# 货币可运算\nbalance + 1000\n#&gt; [1] 2,000.00 1,500.00 1,200.00 850.00   1,000.00 2,200.00\n\n# 布尔\nformattable(c(TRUE, TRUE, FALSE, FALSE, TRUE), \"yes\", \"no\")\n#&gt; [1] yes yes no  no  yes\n\n# 格式化后的表格\ndata.frame(\n  id = c(1, 2, 3, 4, 5),\n  name = c(\"A1\", \"A2\", \"B1\", \"B2\", \"C1\"),\n  balance = accounting(c(52500, 36150, 25000, 18300, 7600), format = \"d\"),\n  growth = percent(c(0.3, 0.3, 0.1, 0.15, 0.15), format = \"d\"),\n  ready = formattable(c(TRUE, TRUE, FALSE, FALSE, TRUE), \"yes\", \"no\")\n)\n\n\n\nidnamebalancegrowthready\n\n1A1525000.3TRUE\n\n2A2361500.3TRUE\n\n3B1250000.1FALSE\n\n4B2183000.15FALSE\n\n5C176000.15TRUE\n\n使用 formattable 包创建格式化对象\n\n\n\n\n19.4.3.2 表格\n\n\nShow/Hide Code\ndf &lt;- data.frame(\n  id = 1:10,\n  name = c(\n    \"Bob\",\n    \"Ashley\",\n    \"James\",\n    \"David\",\n    \"Jenny\",\n    \"Hans\",\n    \"Leo\",\n    \"John\",\n    \"Emily\",\n    \"Lee\"\n  ),\n  age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),\n  grade = c(\"C\", \"A\", \"A\", \"C\", \"B\", \"B\", \"B\", \"A\", \"C\", \"C\"),\n  test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),\n  test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),\n  final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),\n  registered = c(\n    TRUE,\n    FALSE,\n    TRUE,\n    FALSE,\n    TRUE,\n    TRUE,\n    TRUE,\n    FALSE,\n    FALSE,\n    FALSE\n  ),\n  stringsAsFactors = FALSE # 避免自动转化为因子\n)\n\ndf |&gt; formattable(caption = \"用于 `formattable` 的格式化前的数据\")\n\n\n\n\n用于 formattable 的格式化前的数据\n\n\n\n\nid\n\n\nname\n\n\nage\n\n\ngrade\n\n\ntest1_score\n\n\ntest2_score\n\n\nfinal_score\n\n\nregistered\n\n\n\n\n\n\n1\n\n\nBob\n\n\n28\n\n\nC\n\n\n8.9\n\n\n9.1\n\n\n9.00\n\n\nTRUE\n\n\n\n\n2\n\n\nAshley\n\n\n27\n\n\nA\n\n\n9.5\n\n\n9.1\n\n\n9.30\n\n\nFALSE\n\n\n\n\n3\n\n\nJames\n\n\n30\n\n\nA\n\n\n9.6\n\n\n9.2\n\n\n9.40\n\n\nTRUE\n\n\n\n\n4\n\n\nDavid\n\n\n28\n\n\nC\n\n\n8.9\n\n\n9.1\n\n\n9.00\n\n\nFALSE\n\n\n\n\n5\n\n\nJenny\n\n\n29\n\n\nB\n\n\n9.1\n\n\n8.9\n\n\n9.00\n\n\nTRUE\n\n\n\n\n6\n\n\nHans\n\n\n29\n\n\nB\n\n\n9.3\n\n\n8.5\n\n\n8.90\n\n\nTRUE\n\n\n\n\n7\n\n\nLeo\n\n\n27\n\n\nB\n\n\n9.3\n\n\n9.2\n\n\n9.25\n\n\nTRUE\n\n\n\n\n8\n\n\nJohn\n\n\n27\n\n\nA\n\n\n9.9\n\n\n9.3\n\n\n9.60\n\n\nFALSE\n\n\n\n\n9\n\n\nEmily\n\n\n31\n\n\nC\n\n\n8.5\n\n\n9.1\n\n\n8.80\n\n\nFALSE\n\n\n\n\n10\n\n\nLee\n\n\n30\n\n\nC\n\n\n8.6\n\n\n8.8\n\n\n8.70\n\n\nFALSE\n\n\n\n\n用于 formattable 的原始数据\n\n\n终于要来了！ 用 formattable() 创建一个漂亮的表格\n\n\nShow/Hide Code\nlibrary(formattable) \n\nformattable(\n  df,\n  list(\n    # age 列：使用 color_tile() 为单元格添加从白色到橙色的渐变色背景\n    age = color_tile(\"white\", \"orange\"),\n\n    # grade 列：A 等级为绿色加粗，其余不变\n    grade = formatter(\n      \"span\",\n      style = x ~\n        ifelse(x == \"A\", formattable::style(color = \"green\", font.weight = \"bold\"), NA)\n    ),\n\n    # test1_score 和 test2_score 列：normalize_bar() 添加粉色条形图，宽度最小为 0.2\n    area(col = c(test1_score, test2_score)) ~ normalize_bar(\"pink\", 0.2),\n\n    # final_score 列：前 3 名为绿色，其余为灰色，并显示分数和排名\n    final_score = formatter(\n      \"span\",\n      style = x ~ formattable::style(color = ifelse(rank(-x) &lt;= 3, \"green\", \"gray\")),\n      x ~ sprintf(\"%.2f (rank: %02d)\", x, rank(-x))\n    ),\n\n    # registered 列：TRUE 为绿色“ok”图标和 Yes，FALSE 为红色“remove”图标和 No\n    registered = formatter(\n      \"span\",\n      style = x ~ formattable::style(color = ifelse(x, \"green\", \"red\")),\n      x ~ icontext(ifelse(x, \"ok\", \"remove\"), ifelse(x, \"Yes\", \"No\"))\n    )\n  )\n)\n\n\n\n\n\n\nid\n\n\nname\n\n\nage\n\n\ngrade\n\n\ntest1_score\n\n\ntest2_score\n\n\nfinal_score\n\n\nregistered\n\n\n\n\n\n\n1\n\n\nBob\n\n\n28\n\n\nC\n\n\n8.9\n\n\n9.1\n\n\n9.00 (rank: 06)\n\n\n  Yes \n\n\n\n\n2\n\n\nAshley\n\n\n27\n\n\nA\n\n\n9.5\n\n\n9.1\n\n\n9.30 (rank: 03)\n\n\n  No \n\n\n\n\n3\n\n\nJames\n\n\n30\n\n\nA\n\n\n9.6\n\n\n9.2\n\n\n9.40 (rank: 02)\n\n\n  Yes \n\n\n\n\n4\n\n\nDavid\n\n\n28\n\n\nC\n\n\n8.9\n\n\n9.1\n\n\n9.00 (rank: 06)\n\n\n  No \n\n\n\n\n5\n\n\nJenny\n\n\n29\n\n\nB\n\n\n9.1\n\n\n8.9\n\n\n9.00 (rank: 06)\n\n\n  Yes \n\n\n\n\n6\n\n\nHans\n\n\n29\n\n\nB\n\n\n9.3\n\n\n8.5\n\n\n8.90 (rank: 08)\n\n\n  Yes \n\n\n\n\n7\n\n\nLeo\n\n\n27\n\n\nB\n\n\n9.3\n\n\n9.2\n\n\n9.25 (rank: 04)\n\n\n  Yes \n\n\n\n\n8\n\n\nJohn\n\n\n27\n\n\nA\n\n\n9.9\n\n\n9.3\n\n\n9.60 (rank: 01)\n\n\n  No \n\n\n\n\n9\n\n\nEmily\n\n\n31\n\n\nC\n\n\n8.5\n\n\n9.1\n\n\n8.80 (rank: 09)\n\n\n  No \n\n\n\n\n10\n\n\nLee\n\n\n30\n\n\nC\n\n\n8.6\n\n\n8.8\n\n\n8.70 (rank: 10)\n\n\n  No \n\n\n\n\n使用 formattable 包创建带有条件格式和图标的交互式表格",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Table</span>"
    ]
  },
  {
    "objectID": "table.html#other",
    "href": "table.html#other",
    "title": "19  Table",
    "section": "19.5 Other",
    "text": "19.5 Other\n\n19.5.1 flextable\nflextable （官方文档） 是创建非常精致静态表格的另一个可靠选项。它支持多种格式选项，包括合并单元格、旋转文本和条件格式化。\n它的独特之处在于与多种 R Markdown 格式的兼容性，包括 Word、PowerPoint 和 HTML。\n# 这段代码不会被执行\n\nflextable(iris) |&gt; \n  theme_vanilla() |&gt; \n  save_as_docx(path = \"mytable.docx\") # 导出为word文档\n\n\nShow/Hide Code\nlibrary(flextable)\n\n# 设置 flextable 的默认参数\nset_flextable_defaults(\n  font.family = \"Arial\",   # 设置字体为 Arial\n  font.size = 10,          # 设置字体大小为 10\n  border.color = \"gray\",   # 设置边框颜色为灰色\n  big.mark = \"\"            # 千分位分隔符为空\n)\n\n# 创建 flextable 表格对象\nft &lt;- flextable(head(mtcars)) |&gt;\n  flextable::bold(part = \"header\")    # 表头加粗\n\nft\n\n\nmpgcyldisphpdratwtqsecvsamgearcarb21.061601103.902.62016.46014421.061601103.902.87517.02014422.84108933.852.32018.61114121.462581103.083.21519.44103118.783601753.153.44017.02003218.162251052.763.46020.221031\n使用 flextable 包创建精致的静态表格，并自定义字体、字号、边框颜色等样式\n\n\n\n\nShow/Hide Code\nft |&gt;\n  highlight(\n    i = ~ mpg &lt; 22,                # 选择 mpg 小于 22 的行\n    j = \"disp\",                    # 仅对 disp 列进行高亮\n    color = \"#ffe842\"              # 设置高亮颜色为黄色\n  ) |&gt;\n  bg(\n    j = c(\"hp\", \"drat\", \"wt\"),     # 对 hp、drat、wt 三列设置背景色\n    bg = scales::col_quantile(     # 使用分位数调色板自动分配背景色\n      palette = c(\"wheat\", \"red\"), # 渐变色从 wheat 到 red\n      domain = NULL                # 自动根据数据范围计算分位数\n    )\n  ) |&gt;\n  add_footer_lines(\n    \"The 'mtcars' dataset\"         # 在表格底部添加脚注说明\n  )\n\n\nmpgcyldisphpdratwtqsecvsamgearcarb21.061601103.902.62016.46014421.061601103.902.87517.02014422.84108933.852.32018.61114121.462581103.083.21519.44103118.783601753.153.44017.02003218.162251052.763.46020.221031The 'mtcars' dataset\n使用 flextable 包创建精致的静态表格，并自定义高亮、背景色和添加脚注\n\n\n\n\nShow/Hide Code\nggplot2::diamonds[, c(\"cut\", \"carat\", \"price\", \"clarity\", \"table\")] |&gt;\n  summarizor(by = c(\"cut\")) |&gt; # summarizor: 按 cut 分组汇总数据\n  flextable::as_flextable(spread_first_col = TRUE) # as_flextable: 转为 flextable 表格，spread_first_col=TRUE 将第一列展开为分组标签\n\n\nFair(N=1610)Good(N=4906)Very Good(N=12082)Premium(N=13791)Ideal(N=21551)caratMean (SD)1.0 (0.5)0.8 (0.5)0.8 (0.5)0.9 (0.5)0.7 (0.4)Median (IQR)1.0 (0.5)0.8 (0.5)0.7 (0.6)0.9 (0.8)0.5 (0.7)Range0.2 - 5.00.2 - 3.00.2 - 4.00.2 - 4.00.2 - 3.5priceMean (SD)4358.8 (3560.4)3928.9 (3681.6)3981.8 (3935.9)4584.3 (4349.2)3457.5 (3808.4)Median (IQR)3282.0 (3155.2)3050.5 (3883.0)2648.0 (4460.8)3185.0 (5250.0)1810.0 (3800.5)Range337.0 - 18574.0327.0 - 18788.0336.0 - 18818.0326.0 - 18823.0326.0 - 18806.0clarityI1210 (13.0%)96 (2.0%)84 (0.7%)205 (1.5%)146 (0.7%)SI2466 (28.9%)1081 (22.0%)2100 (17.4%)2949 (21.4%)2598 (12.1%)SI1408 (25.3%)1560 (31.8%)3240 (26.8%)3575 (25.9%)4282 (19.9%)VS2261 (16.2%)978 (19.9%)2591 (21.4%)3357 (24.3%)5071 (23.5%)VS1170 (10.6%)648 (13.2%)1775 (14.7%)1989 (14.4%)3589 (16.7%)VVS269 (4.3%)286 (5.8%)1235 (10.2%)870 (6.3%)2606 (12.1%)VVS117 (1.1%)186 (3.8%)789 (6.5%)616 (4.5%)2047 (9.5%)IF9 (0.6%)71 (1.4%)268 (2.2%)230 (1.7%)1212 (5.6%)tableMean (SD)59.1 (3.9)58.7 (2.9)58.0 (2.1)58.7 (1.5)56.0 (1.2)Median (IQR)58.0 (5.0)58.0 (5.0)58.0 (3.0)59.0 (2.0)56.0 (2.0)Range49.0 - 95.051.0 - 66.044.0 - 66.051.0 - 62.043.0 - 63.0\n使用 flextable 包对 diamonds 数据集按 cut 分组汇总并美观展示\n\n\n\n\n19.5.2 rhandsontable\nRhandsontable 提供了一个交互式表格界面，允许在 Shiny 应用或 R Markdown 文档中直接编辑表格。它通过下拉菜单、复选框和日历辅助工具等特性，区别于其他工具，强调交互性和用户输入。\n它最适合需要在网页界面中交互式编辑和操作数据的场景，例如 Shiny 应用程序。\n\n\nShow/Hide Code\n# 由于Quarto渲染问题，所以不执行这段代码\ndf = data.frame(\n  int = 1:10, # 整数列\n  numeric = rnorm(10), # 正态分布的数值列\n  logical = TRUE, # 逻辑值列，全部为 TRUE\n  character = LETTERS[1:10], # 字符型列，A~J\n  fact = factor(letters[1:10]), # 因子型列，a~j\n  date = seq(from = Sys.Date(), by = \"days\", length.out = 10), # 日期列，从今天起连续10天\n  stringsAsFactors = FALSE # 不自动转为因子\n)\n\n# 添加 sparkline 迷你图数据列，每行生成一个包含10个正态分布随机数的 JSON\ndf$chart = sapply(1:10, function(x) jsonlite::toJSON(list(values = rnorm(10))))\n\n# 创建 rhandsontable 交互式表格\np &lt;- rhandsontable(df, rowHeaders = NULL) |&gt; # rowHeaders = NULL 不显示行名\n  hot_col(\n    \"chart\", # 指定 chart 列\n    renderer = htmlwidgets::JS(\"renderSparkline\") # 使用 JS 渲染 sparkline 迷你图\n  )\n\nembed_widget(p, height = \"300px\")\n\n\n\n使用 rhandsontable 包创建可交互编辑的表格，并在 ‘chart’ 列中嵌入 sparkline 迷你图\n\n\n\n\n19.5.3 modelsummary\n\n19.5.3.1 介绍\n官方文档: modelsummary\n主要有两个系列函数：\nModel Summary 模型摘要\n\nmodelsummary : 并列模型回归表。\nmodelplot : 系数图。\n\nData Summary 数据摘要\n\ndatasummary : 创建（多级）交叉表和数据摘要的强大工具。\ndatasummary_crosstab : 交叉表。\ndatasummary_balance : 基线表，包含子组统计和均值差异（又名 “table 1” ）。\ndatasummary_correlation : 相关性表格。\ndatasummary_skim : 数据集的快速概览（“skim”）。\ndatasummary_df : 将数据框转换为带有标题、注释等的漂亮表格。\n\n\n\n19.5.3.2 特点\n简单：\n\n\nShow/Hide Code\nlibrary(modelsummary)\n\nmod &lt;- lm(Sepal.Width ~ Sepal.Length, iris) # 建模\n\nmodelsummary(mod, output = \"markdown\") # 输出为 markdown 格式，还可以输出docx / tex 格式\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                 \n                (1)\n              \n        \n        \n        \n                \n                  (Intercept)\n                  3.419\n                \n                \n                  \n                  (0.254)\n                \n                \n                  Sepal.Length\n                  -0.062\n                \n                \n                  \n                  (0.043)\n                \n                \n                  Num.Obs.\n                  150\n                \n                \n                  R2\n                  0.014\n                \n                \n                  R2 Adj.\n                  0.007\n                \n                \n                  AIC\n                  179.5\n                \n                \n                  BIC\n                  188.5\n                \n                \n                  Log.Lik.\n                  -86.732\n                \n                \n                  RMSE\n                  0.43\n                \n        \n      \n    \n\n\n\nShow/Hide Code\n# modelsummary(mod, output = \"table.docx\")\n# modelsummary(mod, output = \"table.tex\")\n\n\n灵活：\n\n信息：该软件包提供了许多直观且强大的工具，用于自定义摘要表中报告的信息。\n外观：无线定制\n支持的模型：得益于 broom 和 parameters ， modelsummary 默认支持数百种统计模型。\n输出格式： HTML、LaTeX、文本 / Markdown、Word、Powerpoint、RTF、JPG 或 PNG 格式\n\n危险\n甚至可以把松鼠插到整个表格：\n\n\n\n表格中有一只松鼠\n\n\n可靠\n很少会崩溃\n\n\n\n19.5.4 huxtable\n用于 LaTeX 输出\n官方文档：huxtable\n\n19.5.4.1 基本\n\n\nShow/Hide Code\nlibrary(huxtable)\n\ndf &lt;- data.frame(\n  Employee = c(\"John Smith\", \"Jane Doe\", \"David Hugh-Jones\"),\n  Salary = c(50000, 50000, 40000),\n  add_colnames = TRUE\n)\n\nht &lt;- hux(df)\n\n# 将第一行（表头）加粗\nbold(ht)[1, ] &lt;- TRUE\n\n# 设置第一行底部边框宽度为 0.4\nbottom_border(ht)[1, ] &lt;- 0.4\n\n# 设置第二列（Salary）右对齐\nalign(ht)[, 2] &lt;- \"right\"\n\n# 设置所有单元格右侧内边距为 10\nright_padding(ht) &lt;- 10\n\n# 设置所有单元格左侧内边距为 10\nleft_padding(ht) &lt;- 10\n\n# 设置表格宽度为 0.35（相对于页面宽度）\nwidth(ht) &lt;- 0.35\n\n# 设置所有单元格数字格式为保留 2 位小数\nnumber_format(ht) &lt;- 2\n\n# 查看表格\nht\n\n\n\n\nEmployeeSalaryadd_colnames\n\nJohn Smith50000.00TRUE\n\nJane Doe50000.00TRUE\n\nDavid Hugh-Jones40000.00TRUE\n\n使用 huxtable 包创建 LaTeX 表格并自定义样式\n\n\n\n\n19.5.4.2 管道\n\n\nShow/Hide Code\nht &lt;- hux(\n  Employee = c(\"John Smith\", \"Jane Doe\", \"David Hugh-Jones\"), # 员工姓名\n  Salary = c(50000, 50000, 40000) # 薪资\n)\n\nht |&gt;\n  set_bold(1, everywhere) |&gt; # 第一行（表头）加粗，everywhere 表示所有列\n  set_bottom_border(1, everywhere) |&gt; # 第一行底部加边框\n  set_align(everywhere, 2, \"right\") |&gt; # 第二列（薪资）右对齐\n  set_lr_padding(10) |&gt; # 左右内边距均为10\n  set_width(0.35) |&gt; # 表格宽度为页面的0.35\n  set_number_format(2) # 数字保留2位小数\n\n\n\n\nEmployeeSalary\n\nJohn Smith50000.00\n\nJane Doe50000.00\n\nDavid Hugh-Jones40000.00\n\n使用 huxtable 包管道风格创建 LaTeX 表格并自定义样式\n\n\n\n\n19.5.4.3 格式化\n\n\nShow/Hide Code\nmtcars[1:5] |&gt;\n  as_huxtable(add_rownames = \"Model\") |&gt; # 将数据框转换为 huxtable，并添加行名列“Model”\n  set_bold(1, everywhere, TRUE) |&gt;       # 第一行（表头）所有列加粗\n  set_all_borders(1) |&gt;                  # 所有单元格加边框，宽度为1\n  map_text_color(everywhere, \"mpg\", by_colorspace(\"navy\", \"red\", \"yellow\")) |&gt; # mpg 列根据数值映射文本颜色（深蓝-红-黄渐变）\n  map_background_color(\n    everywhere,\n    \"hp\",\n    by_quantiles(0.8, c(\"white\", \"yellow\")) # hp 列按分位数映射背景色（白-黄）\n  ) |&gt;\n  map_italic(everywhere, \"Model\", by_regex(\"Merc.*\" = TRUE)) |&gt; # Model 列名以 Merc 开头的行斜体\n  head(12) # 取前12行\n\n\n\n\nModelmpgcyldisphpdrat\n\nMazda RX421  61601103.9\n\nMazda RX4 Wag21  61601103.9\n\nDatsun 71022.84108933.85\n\nHornet 4 Drive21.462581103.08\n\nHornet Sportabout18.783601753.15\n\nValiant18.162251052.76\n\nDuster 36014.383602453.21\n\nMerc 240D24.44147623.69\n\nMerc 23022.84141953.92\n\nMerc 28019.261681233.92\n\nMerc 280C17.861681233.92\n\n使用 huxtable 包格式化 LaTeX 表格：文本颜色、背景色、斜体和边框\n\n\n\n\n19.5.4.4 多回归表\n\n\nShow/Hide Code\ndata(diamonds, package = \"ggplot2\")\n\nlm1 &lt;- lm(log(price) ~ carat, diamonds) # 线性回归模型1：以 carat 预测 log(price)\nlm2 &lt;- lm(log(price) ~ depth, diamonds) # 线性回归模型2：以 depth 预测 log(price)\nlm3 &lt;- lm(log(price) ~ carat + depth, diamonds) # 线性回归模型3：以 carat 和 depth 预测 log(price)\n\n# huxreg() 用于并排展示多个回归模型结果\n# 参数说明：\n#   lm1, lm2, lm3：要比较的多个回归模型对象\n#   statistics：自定义底部统计量，N 表示样本量（nobs），R2 表示决定系数（r.squared）\nhuxreg(\n  lm1,\n  lm2,\n  lm3,\n  statistics = c(\"N\" = \"nobs\", \"R2\" = \"r.squared\")\n)\n\n\n\n\n(1)(2)(3)\n\n(Intercept)6.215 ***7.749 ***7.313 ***\n\n(0.003)   (0.188)   (0.074)   \n\ncarat1.970 ***        1.971 ***\n\n(0.004)           (0.004)   \n\ndepth        0.001    -0.018 ***\n\n        (0.003)   (0.001)   \n\nN53940        53940        53940        \n\nR20.847    0.000    0.847    \n\n *** p &lt; 0.001;  ** p &lt; 0.01;  * p &lt; 0.05.\n\n使用 huxtable 包的 huxreg() 创建多模型回归结果表格，并详细注释各参数\n\n\n\n\n19.5.4.5 快速文档\n# 这段代码不会被执行\n\nquick_pdf(mtcars)\nquick_docx(mtcars)\nquick_html(mtcars)\nquick_xlsx(mtcars)",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Table</span>"
    ]
  },
  {
    "objectID": "table.html#pearl",
    "href": "table.html#pearl",
    "title": "19  Table",
    "section": "19.6 Pearl",
    "text": "19.6 Pearl\nTidyverse in Numbers 美观的带有图片的交互式表格。",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Table</span>"
    ]
  },
  {
    "objectID": "part-of-a-whole.html",
    "href": "part-of-a-whole.html",
    "title": "Part of a Whole",
    "section": "",
    "text": "此部分介绍了几种常用的表示部分与整体关系的图表类型。\n\n\n\nPart of a Whole\n\n\n\n20  Group bar 简单实用的分组条形图\n21  Treemap 直观的矩形树图\n22  Pie 经典的饼图, 没什么用, 不推荐使用\n23  Donut 甜甜圈图, 饼图的变种, 同样不推荐使用\n24  Dendrogram 树状图, 用于展示层级关系\n25  Circular 圆堆图, 用于展示层级关系\n26  Waffle 华夫图, 用于展示比例关系",
    "crumbs": [
      "Part of a Whole"
    ]
  },
  {
    "objectID": "group-bar.html",
    "href": "group-bar.html",
    "title": "20  Group bar",
    "section": "",
    "text": "20.1 PKG\n关于堆叠的讲解，见 data-to-viz\nShow/Hide Code\nlibrary(RColorBrewer) # 加载RColorBrewer包用于调色板\nlibrary(tidyverse)\nlibrary(likert) # 加载likert包用于处理分组条形图\nlibrary(viridis) # 加载viridis包用于调色板\nlibrary(hrbrthemes) # 加载hrbrthemes包用于美化图形",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Group bar</span>"
    ]
  },
  {
    "objectID": "group-bar.html#ggplot2",
    "href": "group-bar.html#ggplot2",
    "title": "20  Group bar",
    "section": "20.2 ggplot2",
    "text": "20.2 ggplot2\n\n20.2.1 dodge\n分组条形图（并列 dodge）：\n\n\nShow/Hide Code\n# 构建数据集\n# specie：物种名称，共4种，每种3个观测\nspecie &lt;- c(\n  rep(\"sorgho\", 3),\n  rep(\"poacee\", 3),\n  rep(\"banana\", 3),\n  rep(\"triticum\", 3)\n)\n# condition：实验条件，共3种（normal、stress、Nitrogen），每种物种下各有3个条件\ncondition &lt;- rep(c(\"normal\", \"stress\", \"Nitrogen\"), 4)\n# value：生成12个服从正态分布的随机数，取绝对值作为观测值\nvalue &lt;- abs(rnorm(12, 0, 15))\n# 将数据整合为数据框\ndata &lt;- data.frame(specie, condition, value)\n\n# 绘制分组条形图\nggplot(data, aes(fill = condition, y = value, x = specie)) +\n  geom_bar(position = \"dodge\", stat = \"identity\") + # position=\"dodge\"并列\n  scale_fill_brewer(palette = \"Set2\") + # 颜色\n  theme_minimal() + # 使用简洁主题\n  theme(legend.position = \"bottom\") # 图例位置在底部\n\n\n\n\n\n分组条形图（并列）：展示不同物种在不同条件下的数值分布\n\n\n\n\n\n\n20.2.2 stack\n分组条形图（堆叠 stack）：\n\n\nShow/Hide Code\nggplot(data, aes(fill = condition, y = value, x = specie)) +\n  geom_bar(position = \"stack\", stat = \"identity\") + # position=\"stack\"堆叠\n  scale_fill_brewer(palette = \"Set2\") + # 颜色\n  theme_minimal() + # 使用简洁主题\n  theme(legend.position = \"bottom\") # 图例位置在底部\n\n\n\n\n\n分组条形图(堆叠)：展示不同物种在不同条件下的数值分布\n\n\n\n\n\n\n20.2.3 fill\n分组条形图（百分比堆叠 fill）：\n\n\nShow/Hide Code\nggplot(data, aes(fill=condition, y=value, x=specie)) + \n  geom_bar(position=\"fill\", stat=\"identity\") + # position=\"fill\"百分比堆叠\n  scale_fill_brewer(palette = \"Set2\") + # 颜色\n  theme_minimal() + # 使用简洁主题\n  theme(legend.position = \"bottom\") # 图例位置在底部\n\n\n\n\n\n分组条形图（百分比堆叠）：展示不同物种在不同条件下的数值分布\n\n\n\n\n\n\n20.2.4 定制\n\n\nShow/Hide Code\n# 使用ggplot2绘制分组条形图（堆叠形式）\nggplot(data, aes(fill = condition, y = value, x = specie)) +\n    geom_bar(position = \"stack\", stat = \"identity\") +     # 堆叠条形图\n    scale_fill_viridis(discrete = TRUE) +   # 使用viridis调色板，提升色盲友好性\n    ggtitle(\"Studying 4 species..\") +      # 添加主标题\n    theme_ipsum() +        # 使用hrbrthemes包的ipsum主题美化图形\n    xlab(\"\")               # 去除x轴标签\n\n\n\n\n\n使用viridis调色板和hrbrthemes美化的分组条形图（堆叠）\n\n\n\n\n\n\n20.2.5 分面\n\n\nShow/Hide Code\n# 使用ggplot2绘制分组条形图（分面显示每个物种）\nggplot(data, aes(fill = condition, y = value, x = condition)) + \n    geom_bar(position = \"dodge\", stat = \"identity\") + # position=\"dodge\"并列条形\n    scale_fill_viridis(discrete = TRUE, option = \"E\") + # 使用viridis调色板，提升色盲友好性\n    ggtitle(\"Studying 4 species..\") + # 添加主标题\n    facet_wrap(~specie) + # 按物种分面显示，每个物种一个子图\n    theme_ipsum() + # 使用hrbrthemes包的ipsum主题美化图形\n    theme(legend.position = \"none\") + # 不显示图例\n    xlab(\"\") # 去除x轴标签\n\n\n\n\n\n分组条形图（分面）：展示不同物种在不同条件下的数值分布\n\n\n\n\n\n\n20.2.6 负值\n\n\nShow/Hide Code\n# 构建数据集\ndata &lt;- tribble(\n  ~x, ~groupA, ~groupB, ~groupC, ~groupD,\n  \"Jan\",   12,     19,     -9,      2,\n  \"Feb\",   16,     21,    -13,      8,\n  \"Mar\",   23,     21,    -24,      9,\n  \"Apr\",   38,     34,     25,     23,\n  \"May\",   42,     46,     34,     26,\n  \"Jun\",   34,     42,     32,     26,\n  \"Jul\",    2,     34,     21,     27,\n  \"Aug\",   21,     32,    -16,     18,\n  \"Sept\",  18,     31,    -18,     12,\n  \"Oct\",   12,     21,    -14,     10,\n  \"Nov\",   12,     18,    -14,     10,\n  \"Dec\",    2,      8,      4,     10\n)\n# 长数据\ndata_long &lt;- data |&gt;\n  pivot_longer(\n    -x,\n    names_to = \"group\",\n    values_to = \"value\"\n  ) |&gt;\n  mutate(\n    x = factor(\n      x,\n      levels = c(\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sept\",\n        \"Oct\"\n      )\n    )\n  )\n\n# 绘制分组条形图（堆叠形式）\nggplot(data_long, aes(fill = group, y = value, x = x)) +\n  geom_bar(position = \"stack\", stat = \"identity\")\n\n\n\n\n\n分组条形图（负值）：展示不同组别在不同条件下的数值分布",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Group bar</span>"
    ]
  },
  {
    "objectID": "group-bar.html#base-r",
    "href": "group-bar.html#base-r",
    "title": "20  Group bar",
    "section": "20.3 Base R",
    "text": "20.3 Base R\n\n\nShow/Hide Code\n# 设置随机种子，保证每次生成的数据一致\nset.seed(112)\n# 生成一个3行5列的矩阵，元素为1到30之间的随机整数\ndata &lt;- matrix(sample(1:30, 15), nrow = 3)\ncolnames(data) &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\")\nrownames(data) &lt;- c(\"var1\", \"var2\", \"var3\")\n\n# 绘制分组条形图\nbarplot(\n    data, \n    col = colors()[c(23, 89, 12)], # 设置每个变量的颜色\n    border = \"white\",              # 条形边框为白色\n    font.axis = 2,                 # 坐标轴字体加粗\n    beside = TRUE,                 # 分组显示条形\n    legend = rownames(data),       # 添加图例，显示变量名\n    xlab = \"group\",                # x轴标签\n    font.lab = 2                   # 坐标轴标签加粗\n)\n\n\n\n\n\n分组条形图：展示三个变量在五个分组下的数值分布\n\n\n\n\n\n\nShow/Hide Code\n# 绘制堆叠分组条形图\nbarplot(\n    data, \n    col = colors()[c(23, 89, 12)], # 设置每个变量的颜色\n    border = \"white\",              # 条形边框为白色\n    space = 0.04,                  # 分组之间的间隔\n    font.axis = 2,                 # 坐标轴字体加粗\n    xlab = \"group\"                 # x轴标签\n)\n\n\n\n\n\n分组条形图（堆叠形式）：展示三个变量在五个分组下的数值分布\n\n\n\n\n\n\nShow/Hide Code\n# 加载RColorBrewer包用于调色板\nlibrary(RColorBrewer)\n\n# 创建3种Pastel2配色方案的颜色\ncoul &lt;- brewer.pal(3, \"Pastel2\") \n\n# 将原始数据转换为百分比形式\n# 对每一列（每个分组）进行处理，使每个变量的数值占该分组总和的百分比\ndata_percentage &lt;- apply(\n    data, \n    2,  # 按列处理\n    function(x) { x * 100 / sum(x, na.rm = TRUE) }\n)\n\n# 绘制百分比堆叠条形图\nbarplot(\n    data_percentage,         # 百分比数据\n    col = coul,              # 设置颜色\n    border = \"white\",        # 条形边框为白色\n    xlab = \"group\"           # x轴标签\n)\n\n\n\n\n\n分组条形图（百分比堆叠形式）：展示三个变量在五个分组下的百分比分布\n\n\n\n\nLikert 量表分组条形图:\n\n\nShow/Hide Code\n# 加载likert包，用于处理Likert量表数据\nlibrary(likert)\n\n# 使用likert包自带的数据集pisaitems\ndata(pisaitems)\n\n# 从pisaitems数据集中筛选变量名以\"ST24Q\"开头的题目，作为Likert量表条目\nitems28 &lt;- pisaitems[, substr(names(pisaitems), 1, 5) == \"ST24Q\"]\n\n# 构建Likert对象，对Likert量表数据进行汇总和处理\np &lt;- likert(items28)\n\nplot(p)\n\n\n\n\n\nLikert量表分组条形图：展示学生对ST24Q相关问题的态度分布",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Group bar</span>"
    ]
  },
  {
    "objectID": "group-bar.html#circular",
    "href": "group-bar.html#circular",
    "title": "20  Group bar",
    "section": "20.4 Circular",
    "text": "20.4 Circular\n极坐标形式的分组堆叠条形图\n\n\nShow/Hide Code\nlibrary(tidyverse) # 数据处理和可视化\nlibrary(viridis) # 色盲友好的调色板\n\n# 构建数据集\ndata &lt;- data.frame(\n  individual = paste(\"Mister \", seq(1, 60), sep = \"\"), # 60个个体\n  group = factor(c(rep('A', 10), rep('B', 30), rep('C', 14), rep('D', 6))), # 分为4组\n  value1 = sample(seq(10, 100), 60, replace = T), # 观测1\n  value2 = sample(seq(10, 100), 60, replace = T), # 观测2\n  value3 = sample(seq(10, 100), 60, replace = T) # 观测3\n)\n\n# 转换为长数据格式，便于ggplot绘图\ndata &lt;- data |&gt;\n  pivot_longer(\n    cols = value1:value3,\n    names_to = \"observation\",\n    values_to = \"value\"\n  )\n\n# 设置每组后面添加的空白条数，使分组更明显\nempty_bar &lt;- 2\nnObsType &lt;- nlevels(as.factor(data$observation)) # 观测类型数\nto_add &lt;- data.frame(matrix(\n  NA,\n  empty_bar * nlevels(data$group) * nObsType,\n  ncol(data)\n))\ncolnames(to_add) &lt;- colnames(data)\nto_add$group &lt;- rep(levels(data$group), each = empty_bar * nObsType)\ndata &lt;- rbind(data, to_add)\ndata &lt;- data |&gt; arrange(group, individual)\ndata$id &lt;- rep(seq(1, nrow(data) / nObsType), each = nObsType) # 为每个个体分配唯一id,作为X轴\n\n# 计算每个标签的总值和角度，用于后续标签显示\nlabel_data &lt;- data |&gt; group_by(id, individual) |&gt; summarize(tot = sum(value))\nnumber_of_bar &lt;- nrow(label_data)\nangle &lt;- 90 - 360 * (label_data$id - 0.5) / number_of_bar # 计算标签角度\nlabel_data$hjust &lt;- ifelse(angle &lt; -90, 1, 0) # 标签对齐方式\nlabel_data$angle &lt;- ifelse(angle &lt; -90, angle + 180, angle) # 角度调整\n\n# 计算每组的起止位置，用于分组底线和分组标签\nbase_data &lt;- data |&gt;\n  group_by(group) |&gt;\n  summarize(start = min(id), end = max(id) - empty_bar) |&gt;\n  rowwise() |&gt;\n  mutate(title = mean(c(start, end)))\n\n# 计算分组之间的网格线位置\ngrid_data &lt;- base_data\ngrid_data$end &lt;- grid_data$end[c(nrow(grid_data), 1:nrow(grid_data) - 1)] + 1\ngrid_data$start &lt;- grid_data$start - 1\ngrid_data &lt;- grid_data[-1, ]\n\n# 绘制极坐标分组条形图\nggplot(data) +\n  # 堆叠条形\n  geom_bar(\n    aes(x = as.factor(id), y = value, fill = observation),\n    stat = \"identity\",\n    alpha = 0.5\n  ) +\n  scale_fill_viridis(discrete = TRUE) + # 使用viridis调色板\n\n  # 添加网格线（0/50/100/150/200）\n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 0, xend = start, yend = 0),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) +\n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 50, xend = start, yend = 50),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) +\n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 100, xend = start, yend = 100),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) +\n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 150, xend = start, yend = 150),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) +\n  geom_segment(\n    data = grid_data,\n    aes(x = end, y = 200, xend = start, yend = 200),\n    colour = \"grey\",\n    alpha = 1,\n    linewidth = 0.3,\n    inherit.aes = FALSE\n  ) +\n\n  # 添加网格线数值标签\n  ggplot2::annotate(\n    \"text\",\n    x = rep(max(data$id), 5),\n    y = c(0, 50, 100, 150, 200),\n    label = c(\"0\", \"50\", \"100\", \"150\", \"200\"),\n    color = \"grey\",\n    size = 6,\n    angle = 0,\n    fontface = \"bold\",\n    hjust = 1\n  ) +\n\n  ylim(-150, max(label_data$tot, na.rm = T)) + # y轴范围\n  theme_minimal() +\n  theme(\n    legend.position = \"none\", # 不显示图例\n    axis.text = element_blank(), # 不显示坐标轴文本\n    axis.title = element_blank(), # 不显示坐标轴标题\n    panel.grid = element_blank(), # 不显示面板网格\n    plot.margin = unit(rep(-1, 4), \"cm\") # 缩小图形边距\n  ) +\n  coord_polar() + # 极坐标变换\n\n  # 添加每个个体的标签\n  geom_text(\n    data = label_data,\n    aes(x = id, y = tot + 10, label = individual, hjust = hjust),\n    color = \"black\",\n    fontface = \"bold\",\n    alpha = 0.6,\n    size = 5,\n    angle = label_data$angle,\n    inherit.aes = FALSE\n  ) +\n\n  # 添加分组底线\n  geom_segment(\n    data = base_data,\n    aes(x = start, y = -5, xend = end, yend = -5),\n    colour = \"black\",\n    alpha = 0.8,\n    size = 0.6,\n    inherit.aes = FALSE\n  ) +\n  # 添加分组标签\n  geom_text(\n    data = base_data,\n    aes(x = title, y = -18, label = group),\n    hjust = c(1, 1, 0, 0),\n    colour = \"black\",\n    alpha = 0.8,\n    size = 4,\n    fontface = \"bold\",\n    inherit.aes = FALSE\n  )\n\n\n\n\n\n分组条形图（极坐标形式）",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Group bar</span>"
    ]
  },
  {
    "objectID": "treemap.html",
    "href": "treemap.html",
    "title": "21  Treemap",
    "section": "",
    "text": "21.1 PKG\n树图以嵌套矩形的集合形式展示层次结构数据。每个组由一个矩形表示，其面积与其值成正比。\nShow/Hide Code\nlibrary(treemap) \nlibrary(d3treeR) # 可选，用于交互式树图\n# remotes::install_github(\"timelyportfolio/d3treeR\")",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Treemap</span>"
    ]
  },
  {
    "objectID": "treemap.html#treemap",
    "href": "treemap.html#treemap",
    "title": "21  Treemap",
    "section": "21.2 Treemap",
    "text": "21.2 Treemap\n\n21.2.1 基本\n\n\nShow/Hide Code\n# 构建示例数据\ngroup &lt;- c(\"group-1\", \"group-2\", \"group-3\")\nvalue &lt;- c(13, 5, 22)\ndata &lt;- data.frame(group, value)\n\n# 绘制基本的Treemap\ntreemap(data, index = \"group\", vSize = \"value\", type = \"index\")\n\n\n\n\n\n基本的Treemap\n\n\n\n\n\n\n21.2.2 subgroup\n\n\nShow/Hide Code\n# 构建带有subgroup的示例数据\ngroup &lt;- c(rep(\"group-1\", 4), rep(\"group-2\", 2), rep(\"group-3\", 3))\nsubgroup &lt;- paste(\"subgroup\", c(1, 2, 3, 4, 1, 2, 1, 2, 3), sep = \"-\")\nvalue &lt;- c(13, 5, 22, 12, 11, 7, 3, 1, 23)\ndata &lt;- data.frame(group, subgroup, value)\n\n# 绘图\ntreemap(data, index = c(\"group\", \"subgroup\"), vSize = \"value\", type = \"index\")\n\n\n\n\n\n带有subgroup的Treemap\n\n\n\n\n\n\n21.2.3 定制\n\n\nShow/Hide Code\ntreemap(\n    data,\n    index = c(\"group\", \"subgroup\"), # 指定分组和子分组的变量名，决定树图的层次结构\n    vSize = \"value\",                # 指定每个矩形面积对应的数据列\n    type = \"index\",                 # 颜色类型，这里按分组着色\n    fontsize.labels = c(15, 12),    # 标签字体大小，分别对应group和subgroup\n    fontcolor.labels = c(\"white\", \"orange\"), # 标签字体颜色，分别对应group和subgroup\n    fontface.labels = c(2, 1),      # 标签字体样式，2为粗体，1为常规\n    bg.labels = c(\"transparent\"),   # 标签背景色，这里设置为透明\n    align.labels = list(\n        c(\"center\", \"center\"),      # group标签居中对齐\n        c(\"right\", \"bottom\")        # subgroup标签右下对齐\n    ),\n    overlap.labels = 0.5,           # 标签重叠容忍度，0为不允许重叠，1为总是显示\n    inflate.labels = F              # 是否根据矩形大小自动放大标签，F为不放大\n)\n\n\n\n\n\n定制标签的Treemap\n\n\n\n\n\n\nShow/Hide Code\ntreemap(\n    data,\n    index = c(\"group\", \"subgroup\"),    # 指定分组和子分组的变量名，决定树图的层次结构\n    vSize = \"value\",                   # 指定每个矩形面积对应的数据列\n    type = \"index\",                    # 颜色类型，这里按分组着色\n    border.col = c(\"black\", \"white\"),  # 边框颜色，分别对应group和subgroup\n    border.lwds = c(7, 2)              # 边框线宽，分别对应group和subgroup\n)\n\n\n\n\n\n定制边框的Treemap\n\n\n\n\n\n\nShow/Hide Code\ntreemap(\n    data,\n    index = c(\"group\", \"subgroup\"), # 指定分组和子分组的变量名，决定树图的层次结构\n    vSize = \"value\", # 指定每个矩形面积对应的数据列\n    type = \"index\", # 颜色类型，这里按分组着色，更多类型见 help(treemap)\n    palette = \"Set2\", # 选择调色板，这里用RColorBrewer内置的\"Set2\"配色\n    title = \"My Treemap\", # 设置树图的主标题\n    fontsize.title = 12 # 设置主标题的字体大小\n)\n\n\n\n\n\n定制颜色和标题的Treemap",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Treemap</span>"
    ]
  },
  {
    "objectID": "treemap.html#d3treer",
    "href": "treemap.html#d3treer",
    "title": "21  Treemap",
    "section": "21.3 d3treeR",
    "text": "21.3 d3treeR\n点击一个组来放大并显示其子组。\n点击顶部的组名可以取消放大并回到之前的状态。\n\n\nShow/Hide Code\n# 加载d3treeR包\nlibrary(d3treeR)\n\n# 绘制treemap对象，设置分组、子分组、面积、颜色、调色板和标签样式\np &lt;- treemap(\n    data,\n    index = c(\"group\", \"subgroup\"), # 指定分组和子分组，决定树图的层次结构\n    vSize = \"value\",                # 指定每个矩形面积对应的数据列\n    type = \"index\",                 # 颜色类型，这里按分组着色\n    palette = \"Set2\",               # 使用RColorBrewer的\"Set2\"配色方案\n    bg.labels = c(\"white\"),         # 标签背景色为白色\n    align.labels = list(\n        c(\"center\", \"center\"),       # group标签居中对齐\n        c(\"right\", \"bottom\")         # subgroup标签右下对齐\n    )\n)\n\n\n\n\n\n使用d3treeR实现可交互的Treemap\n\n\n\n\nShow/Hide Code\n# 使用d3treeR将静态treemap对象转为可交互的HTML小部件\nd3tree2(p, rootname = \"Treemap 示例\")\n\n\n\n\n使用d3treeR实现可交互的Treemap",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Treemap</span>"
    ]
  },
  {
    "objectID": "treemap.html#pearl",
    "href": "treemap.html#pearl",
    "title": "21  Treemap",
    "section": "21.4 Pearl",
    "text": "21.4 Pearl\n自定义注释和标签的树图\n\n\n\n自定义注释和标签的树图",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Treemap</span>"
    ]
  },
  {
    "objectID": "pie.html",
    "href": "pie.html",
    "title": "22  Pie",
    "section": "",
    "text": "22.1 PKG\n饼图在科研数据可视化领域非常不受待见的图形, 但在商业领域仍然有其应用场景.\n谨慎使用饼图，或者，使用 条形图、棒棒糖图、树状图 等替代方案。\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(RColorBrewer) # 用于调色板",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Pie</span>"
    ]
  },
  {
    "objectID": "pie.html#饼图的问题",
    "href": "pie.html#饼图的问题",
    "title": "22  Pie",
    "section": "22.2 饼图的问题",
    "text": "22.2 饼图的问题\n\n22.2.1 Bad by definition\n饼图是一个被分成扇区的圆，每个扇区代表整体的一部分。它通常用于显示百分比，其中所有扇区的总和等于 100%。\n可读性太差了!，尤其是当扇区的大小相似时。人们很难准确地比较不同扇区的大小。\n\n\n\n饼图,你能找出组间趋势吗?\n\n\n同样的数据用条形图表示就清晰多了:\n\n\n\n柱状图看起来比饼图清晰多了\n\n\n\n\n22.2.2 Even worse\n饼图还有一些讨厌的问题:\n\n3D 版饼图\n总和不为 100%\n项目太多\n爆炸/分散式饼图(exploded pie charts)\n\n\n\n22.2.3 Alternatives\n最好的替代是条形图,如果数据很多,可以使用棒棒糖图,会更优雅一点.\n基于世界上几个国家 武器销售 数量的例子：\n\n\n\n世界上部分国家武器销售数量,美国遥遥领先\n\n\n为了描述整体的组成,还可以使用树状图, 例如:\n\n\n\n树状图,武器销售占比",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Pie</span>"
    ]
  },
  {
    "objectID": "pie.html#pie",
    "href": "pie.html#pie",
    "title": "22  Pie",
    "section": "22.3 pie()",
    "text": "22.3 pie()\nBase R::pie() 函数用于绘制饼图.\n\n22.3.1 基础\n\n\nShow/Hide Code\nProp &lt;- c(3,7,9,1,2)\npie(Prop)\n\n\n\n\n\n基础饼图\n\n\n\n\n\n\n22.3.2 labels\n\n\nShow/Hide Code\npie(Prop , labels = c(\"Gr-A\",\"Gr-B\",\"Gr-C\",\"Gr-D\",\"Gr-E\"))\n\n\n\n\n\n带标签的饼图\n\n\n\n\n\n\n22.3.3 Non-circular\n可以通过 edges 参数(多边形的边数)来绘制非圆形的饼图, 例如:\n\n\nShow/Hide Code\npie(Prop, labels = c(\"Gr-A\", \"Gr-B\", \"Gr-C\", \"Gr-D\", \"Gr-E\"), edges = 50)\n\n\n\n\n\n非圆形饼图\n\n\n\n\n\n\n22.3.4 Shadow\n\n\nShow/Hide Code\npie(\n  Prop,\n  labels = c(\"Gr-A\", \"Gr-B\", \"Gr-C\", \"Gr-D\", \"Gr-E\"),\n  density = 10, # 设置阴影密度\n  angle = c(20, 90, 30, 10, 0) # 设置每个扇区的阴影角度\n)\n\n\n\n\n\n带阴影的饼图\n\n\n\n\n\n\n22.3.5 颜色\n使用 col 更改组颜色，使用 border 更改边框颜色。\n\n\nShow/Hide Code\n# library(RColorBrewer) # 用于调色板\n\nmyPalette &lt;- brewer.pal(5, \"Set2\")\n\npie(\n  Prop,\n  labels = c(\"Gr-A\", \"Gr-B\", \"Gr-C\", \"Gr-D\", \"Gr-E\"),\n  border = \"white\", # 设置边框颜色为白色\n  col = myPalette # 使用调色板\n)\n\n\n\n\n\n定制饼图颜色",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Pie</span>"
    ]
  },
  {
    "objectID": "pie.html#geom_bar",
    "href": "pie.html#geom_bar",
    "title": "22  Pie",
    "section": "22.4 geom_bar()",
    "text": "22.4 geom_bar()\n由于饼图不受待见, ggplot2 没有提供专门的饼图函数, 但可以使用 geom_bar() 绘制饼图. 核心技术:\n\n输入数据框有 2 列：group 和 value\ngeom_bar() 函数创建一个仅包含一个条形的堆叠条形图\ncoord_polar() 使其呈圆形\n\n\n22.4.1 基础\n\n\nShow/Hide Code\n# 创建数据框\ndata &lt;- data.frame(\n  group = LETTERS[1:5],\n  value = c(13, 7, 9, 21, 2)\n)\n# 绘制饼图\nggplot(data, aes(x = \"\", y = value, fill = group)) +\n  geom_bar(stat = \"identity\", width = 1) + # identity 创建堆叠条形图\n  coord_polar(\"y\", start = 0) +  # 将条形图转换为极坐标系\n  scale_fill_brewer(palette = 2) # 设置配色方案\n\n\n\n\n\n基础饼图\n\n\n\n\n\n\n22.4.2 去坐标轴\n上面的图看起来不太对,不像饼图, 继续移除 x 轴和 y 轴的标签,和背景:\n\n\nShow/Hide Code\n# 移除x 轴和 y 轴的标签和背景\nggplot(data, aes(x = \"\", y = value, fill = group)) +\n  geom_bar(stat = \"identity\", width = 1) + # identity 创建堆叠条形图\n  coord_polar(\"y\", start = 0) + # 将条形图转换为极坐标系\n  scale_fill_brewer(palette = 2) + # 设置配色方案\n  theme_void() # 移除背景和坐标轴\n\n\n\n\n\n改进后的饼图\n\n\n\n\n\n\n22.4.3 标签\n因为使用了 coord_polar()，所以计算文本标签的位置比较复杂.\n\n\nShow/Hide Code\n# 1. 按 group 降序排列，计算每组所占百分比和标签位置\ndata &lt;- data |&gt; \n    arrange(desc(group)) |&gt; # 按 group 降序排列\n    mutate(\n        prop = value / sum(data$value) * 100, # 计算百分比\n        ypos = cumsum(prop) - 0.5 * prop      # 计算标签位置\n    )\n\n# 2. 绘制饼图\nggplot(data, aes(x = \"\", y = prop, fill = group)) +\n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + # 绘制堆叠条形图\n    coord_polar(\"y\", start = 0) +                             # 转换为极坐标系（饼图）\n    geom_text(\n        aes(y = ypos, label = group),                           # 添加标签\n        color = \"white\", size = 6\n    ) +\n    scale_fill_brewer(palette = 2) +                      # 设置配色方案\n    theme_void() +                                            # 移除背景和坐标轴\n    theme(legend.position = \"none\")                          # 移除图例\n\n\n\n\n\n带标签和自定义配色的饼图\n\n\n\n\n大功告成!",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Pie</span>"
    ]
  },
  {
    "objectID": "donut.html",
    "href": "donut.html",
    "title": "23  Donut",
    "section": "",
    "text": "23.1 问题\n与饼图相比，环形图在视觉上更具吸引力，但是也存在饼图的问题,见 Chapter 22",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "donut.html#pkg",
    "href": "donut.html#pkg",
    "title": "23  Donut",
    "section": "23.2 PKG",
    "text": "23.2 PKG\n\n\nShow/Hide Code\nlibrary(tidyverse)",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "donut.html#base-r",
    "href": "donut.html#base-r",
    "title": "23  Donut",
    "section": "23.3 Base R",
    "text": "23.3 Base R\n先用 pie() 绘制一个饼图，再用Base R::symbols() 叠加略小白色圆形来形成环形效果。\n\n\nShow/Hide Code\n# 定义各部分的比例\nProp &lt;- c(3, 7, 9, 1, 2)\n\n# 绘制饼图\npie(Prop)\n\n# 在饼图中央添加一个白色圆形，形成环形图效果\nsymbols(\n    0,                # x坐标\n    0,                # y坐标\n    circles = 0.5,    # 圆的半径\n    inches = FALSE,   # 使用坐标单位而非英寸\n    add = TRUE,       # 在已有图形上添加\n    bg = \"white\",     # 圆的填充色为白色\n    fg = \"black\"      # 圆的边框色为黑色\n)\n\n\n\n\n\n使用Base R绘制环形图（Donut Chart）示例\n\n\n\n\n更为复杂的 自定义函数 方法,不推荐",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "donut.html#geom_bar",
    "href": "donut.html#geom_bar",
    "title": "23  Donut",
    "section": "23.4 geom_bar()",
    "text": "23.4 geom_bar()\n核心思路：\n\ngeom_bar() 绘制堆叠条形图\ncoord_polar() 堆叠的矩形切换到环形\nxlim() 从饼图切换到环形图 (中间添加一个空白圆圈)\n\n\n23.4.1 基础\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 2, fill = cut)) + \n  geom_bar(color = \"white\") +           # 绘制每个cut的条形，白色边框\n  xlim(0.5, 2.5) +                      # 设置x轴范围，决定中间空白洞的大小\n  coord_polar(theta = \"y\") +            # 使用极坐标，将条形图转换为圆环（甜甜圈）\n  scale_fill_brewer(palette = 2) +      # 设置配色方案\n  theme_void()                          # 移除所有背景和坐标轴，突出图形主体\n\n\n\n\n\n使用geom_bar()绘制环形图（Donut Chart）示例\n\n\n\n\n\n\n23.4.2 标签\n\n\nShow/Hide Code\n# 修改label来更改文本\n# 修改aes(label = label, x = 3) 的 X 来控制标签位置\n\n# 计算每个cut的数量和比例\ndiamonds_summary &lt;- diamonds |&gt;\n  count(cut) |&gt;\n  mutate(\n    prop = n / sum(n), # 计算每个cut的比例\n    percentage = round(prop * 100, 1), # 转换为百分比并保留一位小数\n    label = paste0(cut, \": \\n\", n, \" (\", percentage, \"%)\") # 组合标签文本\n  )\n\n# 绘制带标签的环形图\nggplot(diamonds_summary, aes(x = 2, y = n, fill = cut)) +\n  geom_bar(\n    stat = \"identity\", # 使用实际的y值（n）绘制条形\n    color = \"white\", # 条形之间的分隔线为白色\n    width = 1 # 条形宽度\n  ) +\n  xlim(0.5, 3) + # 控制中间空白圆圈的大小  \n  geom_text(\n    aes(label = label, x = 3), # 设置标签内容\n    position = position_stack(vjust = 0.5), # 标签居中显示在每个扇区\n    color = \"black\", # 标签颜色\n    size = 3.5, # 标签字体大小\n    fontface = \"bold\" # 标签字体加粗\n  ) +\n  coord_polar(theta = \"y\") + # 极坐标转换为环形图\n  scale_fill_brewer(palette = 2) + # 设置配色方案\n  theme_void() + # 移除背景和坐标轴\n  theme(legend.position = \"none\") # 隐藏图例，标签已包含信息\n\n\n\n\n\n带标签的环形图（Donut Chart），显示每个cut的数量和百分比",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "donut.html#厚度",
    "href": "donut.html#厚度",
    "title": "23  Donut",
    "section": "23.5 厚度",
    "text": "23.5 厚度\nxlim() 函数可以控制环形的厚度, 通过调整 xlim() 的范围来实现。\n看不懂就直接删除coord_polar()，就能看到环形的厚度变化。",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "dendrogram.html",
    "href": "dendrogram.html",
    "title": "24  Dendrogram",
    "section": "",
    "text": "24.1 PKG\nShow/Hide Code\nlibrary(ggraph) # 用于绘制图形\nlibrary(igraph) # 用于图形处理\nlibrary(tidyverse) \nlibrary(RColorBrewer) # 用于颜色处理\nlibrary(collapsibleTree) # 用于交互式树状图\nlibrary(dendextend) # 用于树状图的扩展和定制",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Dendrogram</span>"
    ]
  },
  {
    "objectID": "dendrogram.html#树状",
    "href": "dendrogram.html#树状",
    "title": "24  Dendrogram",
    "section": "24.2 树状",
    "text": "24.2 树状\n\n24.2.1 Edge list\n树状图（dendrogram）是一种用于展示层级关系的图形，通常用于聚类分析或分类数据的可视化。它通过连接节点来表示不同层级之间的关系。\n\n\n\nEdge list\n\n\n\n\nShow/Hide Code\n# 加载绘图和数据处理所需的包\nlibrary(ggraph)    # 用于高级图形绘制，特别是网络和树状结构\nlibrary(igraph)    # 用于图结构的创建和处理\nlibrary(tidyverse) # 用于数据处理\n\n# 创建一个边列表数据框，定义树状结构的层级关系\n# 第一层：origin 指向 5 个 group\nd1 &lt;- data.frame(from = \"origin\", to = paste(\"group\", seq(1, 5), sep = \"\"))\n\n# 第二层：每个 group 指向 5 个 subgroup，共 25 个 subgroup\nd2 &lt;- data.frame(from = rep(d1$to, each = 5), to = paste(\"subgroup\", seq(1, 25), sep = \"_\"))\n\n# 合并两层边数据，形成完整的边列表\nedges &lt;- rbind(d1, d2)\n\n# 根据边列表创建 igraph 图对象\nmygraph &lt;- graph_from_data_frame(edges)\n\n# 使用 ggraph 绘制基础树状图（dendrogram）\nggraph(mygraph, layout = 'dendrogram', circular = FALSE) + \n    geom_edge_diagonal() +   # 绘制树的边（对角线样式）\n    geom_node_point() +      # 绘制节点\n    theme_void()             # 去除背景和坐标轴，使图形更简洁\n\n\n\n\n\n使用ggraph和igraph包绘制基础树状图（dendrogram）\n\n\n\n\n\n\n24.2.2 Nested df\n\n\n\nNested dataframe\n\n\n需要把嵌套数据框（nested dataframe）转换为边列表（edge list）\n\n\nShow/Hide Code\n# 加载所需的包\nlibrary(ggraph) # 用于高级图形绘制，特别是网络和树状结构\nlibrary(igraph) # 用于图结构的创建和处理\nlibrary(tidyverse) # 用于数据处理\n\n# 创建一个嵌套数据框，包含三层层级关系\ndata &lt;- data.frame(\n  level1 = \"CEO\", # 第一层：CEO\n  level2 = c(rep(\"boss1\", 4), rep(\"boss2\", 4)), # 第二层：boss1 和 boss2，各自有4个下属\n  level3 = paste0(\"mister_\", letters[1:8]) # 第三层：8个下属，命名为 mister_a ~ mister_h\n)\n\n# 将嵌套数据框转换为边列表（edge list）\n# 第一层到第二层的边\nedges_level1_2 &lt;- data |&gt;\n  select(level1, level2) |&gt;\n  unique() |&gt;\n  rename(from = level1, to = level2)\n# 第二层到第三层的边\nedges_level2_3 &lt;- data |&gt;\n  select(level2, level3) |&gt;\n  unique() |&gt;\n  rename(from = level2, to = level3)\n# 合并所有边\nedge_list &lt;- rbind(edges_level1_2, edges_level2_3)\n\n# 根据边列表创建 igraph 图对象\nmygraph &lt;- graph_from_data_frame(edge_list)\n\n# 使用 ggraph 绘制树状图（dendrogram）\nggraph(mygraph, layout = 'dendrogram', circular = FALSE) +\n  geom_edge_diagonal() + # 绘制树的边（对角线样式）\n  geom_node_point() + # 绘制节点\n  theme_void() # 去除背景和坐标轴，使图形更简洁\n\n\n\n\n\n使用嵌套数据框（nested dataframe）和ggraph绘制树状图\n\n\n\n\n\n\n24.2.3 定制\n\n\nShow/Hide Code\n# 加载所需的包\nlibrary(ggraph)      # 用于高级图形绘制，特别是网络和树状结构\nlibrary(igraph)      # 用于图结构的创建和处理\nlibrary(tidyverse)   # 用于数据处理\n\n# 构建边列表数据框，定义树状结构的层级关系\n# 第一层：origin 指向 7 个 group\nd1 &lt;- data.frame(from = \"origin\", to = paste(\"group\", seq(1, 7), sep = \"\"))\n\n# 第二层：每个 group 指向 7 个 subgroup，共 49 个 subgroup\nd2 &lt;- data.frame(\n    from = rep(d1$to, each = 7),\n    to = paste(\"subgroup\", seq(1, 49), sep = \"_\")\n)\n\n# 合并两层边数据，形成完整的边列表\nedges &lt;- rbind(d1, d2)\n\n# 构建节点属性数据框\n# name：节点名称\n# group：所属分组（group1~group7），origin和group节点为NA\n# cluster：随机分配的类别（a~d）\n# value：随机分配的数值（10~30）\nname &lt;- unique(c(as.character(edges$from), as.character(edges$to)))\nvertices &lt;- data.frame(\n    name = name,\n    group = c(rep(NA, 8), rep(paste(\"group\", seq(1, 7), sep = \"\"), each = 7)),\n    cluster = sample(letters[1:4], length(name), replace = TRUE),\n    value = sample(seq(10, 30), length(name), replace = TRUE)\n)\n\n# 根据边列表和节点属性创建 igraph 图对象\nmygraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# 直线条\nggraph(mygraph, layout = 'dendrogram') + \n  geom_edge_link() + \n  theme_void() # 去除背景和坐标轴，使图形更简洁\n\n\n\n\n\n定制节点属性和分组的树状图（dendrogram）示例\n\n\n\n\nShow/Hide Code\n# 曲线条\nggraph(mygraph, layout = 'dendrogram') + \n  geom_edge_diagonal() + \n  theme_void() # 去除背景和坐标轴，使图形更简洁\n\n\n\n\n\n定制节点属性和分组的树状图（dendrogram）示例\n\n\n\n\n\n\nShow/Hide Code\n# 使用ggraph绘制树状图，并在叶节点处添加标签\nggraph(mygraph, layout = 'dendrogram') +\n    geom_edge_diagonal() + # 绘制树的边（对角线样式）\n    geom_node_text(\n        aes(label = name, filter = leaf), # 仅对叶节点添加标签\n        angle = 90,                       # 标签旋转90度\n        hjust = 1,                        # 标签右对齐\n        nudge_y = -0.01                   # 标签向下微调\n    ) +\n    ylim(-.4, NA) +                       # 调整y轴范围，使标签显示完整\n    theme_void() # 去除背景和坐标轴，使图形更简洁\n\n\n\n\n\n在树状图（dendrogram）上显示叶节点标签和定制节点样式\n\n\n\n\nShow/Hide Code\n# 再绘制一个树状图，进一步定制叶节点样式\nggraph(mygraph, layout = 'dendrogram') +\n    geom_edge_diagonal() + # 绘制树的边（对角线样式）\n    geom_node_text(\n        aes(label = name, filter = leaf), # 仅对叶节点添加标签\n        angle = 90,                       # 标签旋转90度\n        hjust = 1,                        # 标签右对齐\n        nudge_y = -0.04                   # 标签向下微调\n    ) +\n    geom_node_point(aes(filter = leaf), alpha = 0.6) + # 仅对叶节点绘制半透明点\n    ylim(-.5, NA)  + # 调整y轴范围，使标签和点显示完整\n    theme_void() # 去除背景和坐标轴，使图形更简洁\n\n\n\n\n\n在树状图（dendrogram）上显示叶节点标签和定制节点样式\n\n\n\n\n\n\nShow/Hide Code\n# 使用ggraph绘制树状图，定制叶节点标签、颜色和大小\nggraph(mygraph, layout = 'dendrogram') +\n  geom_edge_diagonal() + # 绘制树的边（对角线样式）\n  geom_node_text(\n    aes(label = name, filter = leaf, color = group), # 仅对叶节点添加标签，并按分组着色\n    angle = 90, # 标签旋转90度\n    hjust = 1, # 标签右对齐\n    nudge_y = -0.1 # 标签向下微调\n  ) +\n  geom_node_point(\n    aes(filter = leaf, size = value, color = group), # 仅对叶节点绘制点，按分组着色，按value调整大小\n    alpha = 0.6 # 点的透明度\n  ) +\n  ylim(-.6, NA) + # 调整y轴范围，使标签和点显示完整\n  theme(legend.position = \"none\") + # 隐藏图例\n  theme_void() # 去除背景和坐标轴，使图形更简洁\n\n\n\n\n\n带有分组颜色和节点数值大小的定制树状图（dendrogram）\n\n\n\n\n\n\n24.2.4 圆形\n\n\nShow/Hide Code\n# 加载所需的包\nlibrary(ggraph)         # 用于高级图形绘制，特别是网络和树状结构\nlibrary(igraph)         # 用于图结构的创建和处理\nlibrary(tidyverse)      # 用于数据处理\nlibrary(RColorBrewer)   # 用于调色板\n\n# 创建边列表数据框，定义树状结构的层级关系\n# 第一层：origin 指向 10 个 group\nd1 &lt;- data.frame(from = \"origin\", to = paste(\"group\", seq(1, 10), sep = \"\"))\n\n# 第二层：每个 group 指向 10 个 subgroup，共 100 个 subgroup\nd2 &lt;- data.frame(\n    from = rep(d1$to, each = 10),\n    to = paste(\"subgroup\", seq(1, 100), sep = \"_\")\n)\n\n# 合并两层边数据，形成完整的边列表\nedges &lt;- rbind(d1, d2)\n\n# 创建节点属性数据框\n# name：节点名称\n# value：随机分配的数值，用于节点大小\nvertices &lt;- data.frame(\n    name = unique(c(as.character(edges$from), as.character(edges$to))),\n    value = runif(111)\n)\n\n# 添加分组信息，便于后续节点着色\nvertices$group &lt;- edges$from[match(vertices$name, edges$to)]\n\n# 计算标签显示所需的角度、对齐方式和翻转角度\n# id：叶节点编号\nvertices$id &lt;- NA\nmyleaves &lt;- which(is.na(match(vertices$name, edges$from))) # 找到所有叶节点\nnleaves &lt;- length(myleaves)                                # 叶节点总数\nvertices$id[myleaves] &lt;- seq(1, nleaves)                   # 给叶节点编号\nvertices$angle &lt;- 90 - 360 * vertices$id / nleaves         # 计算每个叶节点的标签角度\n\n# 根据角度调整标签对齐方式（左对齐或右对齐）\nvertices$hjust &lt;- ifelse(vertices$angle &lt; -90, 1, 0)\n\n# 对于左侧的标签，翻转角度以便文字正向显示\nvertices$angle &lt;- ifelse(\n    vertices$angle &lt; -90,\n    vertices$angle + 180,\n    vertices$angle\n)\n\n# 根据边列表和节点属性创建 igraph 图对象\nmygraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# 绘制圆形树状图（circular dendrogram）\nggraph(mygraph, layout = 'dendrogram', circular = TRUE) +\n    geom_edge_diagonal(colour = \"grey\") + # 绘制树的边（对角线样式）\n    scale_edge_colour_distiller(palette = \"RdPu\") + # 边的颜色渐变\n    geom_node_text(\n        aes(\n            x = x * 1.15, # 标签位置向外扩展\n            y = y * 1.15,\n            filter = leaf, # 仅对叶节点添加标签\n            label = name,\n            angle = angle, # 标签旋转角度\n            hjust = hjust, # 标签对齐方式\n            colour = group # 按分组着色\n        ),\n        size = 2.7,\n        alpha = 1\n    ) +\n    geom_node_point(\n        aes(\n            filter = leaf, # 仅对叶节点绘制点\n            x = x * 1.07,  # 点的位置向外扩展\n            y = y * 1.07,\n            colour = group, # 按分组着色\n            size = value,   # 按value调整大小\n            alpha = 0.2     # 点的透明度\n        )\n    ) +\n    scale_colour_manual(values = rep(brewer.pal(9, \"Paired\"), 30)) + # 自定义颜色\n    scale_size_continuous(range = c(0.1, 10)) + # 节点大小范围\n    theme_void() + # 去除背景和坐标轴，使图形更简洁\n    theme(\n        legend.position = \"none\", # 隐藏图例\n        plot.margin = unit(c(0, 0, 0, 0), \"cm\") # 去除边距\n    ) +\n    expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3)) # 扩展坐标轴范围，防止标签被裁剪\n\n\n\n\n\n圆形树状图（circular dendrogram）定制标签和节点样式示例\n\n\n\n\n\n\n24.2.5 Interactive\n\n\nShow/Hide Code\n# 加载collapsibleTree包，用于绘制交互式树状图\nlibrary(collapsibleTree)\n\n# 使用warpbreaks数据集，按wool、tension、breaks三个层级绘制树状图\ncollapsibleTree(\n    warpbreaks,                   # 数据集\n    c(\"wool\", \"tension\", \"breaks\") # 层级顺序\n)\n\n\n\n\n使用collapsibleTree包绘制交互式树状图（dendrogram）",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Dendrogram</span>"
    ]
  },
  {
    "objectID": "dendrogram.html#聚类",
    "href": "dendrogram.html#聚类",
    "title": "24  Dendrogram",
    "section": "24.3 聚类",
    "text": "24.3 聚类\n\n24.3.1 基本\n使用 hclust() 进行基础层次聚类并绘制树状图\n\n\nShow/Hide Code\n# 构造一个模拟数据矩阵，包含20个样本和10个变量\ndata &lt;- matrix(sample(seq(1, 2000), 200), ncol = 10)\nrownames(data) &lt;- paste0(\"sample_\", seq(1, 20))   # 设置行名为 sample_1 ~ sample_20\ncolnames(data) &lt;- paste0(\"variable\", seq(1, 10))  # 设置列名为 variable1 ~ variable10\n\n# 计算样本之间的欧氏距离（仅使用第4到第8列变量）\ndist &lt;- dist(data[, c(4:8)], diag = TRUE)\n\n# 使用hclust函数进行层次聚类分析\nhc &lt;- hclust(dist)\n\n# 绘制聚类结果的树状图（dendrogram）\nplot(hc)\n\n\n\n\n\n使用hclust进行基础层次聚类并绘制树状图\n\n\n\n\n可以聚焦于树的一部分。使用 [[..]] 运算符选择感兴趣的组：\n\n\nShow/Hide Code\n# 将层次聚类对象（hc）转换为dendrogram对象，便于后续操作\ndhc &lt;- as.dendrogram(hc)\n\n# 设置绘图区域的边距，顺序为下、左、上、右\npar(mar = c(4, 4, 2, 2))\n\n# 绘制dendrogram的第二个分支（子树），实现对树状图局部的放大显示\nplot(\n    dhc[[2]], \n    main = \"zoom on a part of the dendrogram\" # 设置主标题\n)\n\n\n\n\n\n聚类树状图的子树放大显示示例\n\n\n\n\n\n\n24.3.2 color\n\n\nShow/Hide Code\n# 构建模拟数据集，包含24个样本、3个分组变量和5个基因表达量\nsample &lt;- paste(rep(\"sample_\", 24), seq(1, 24), sep = \"\")\nspecie &lt;- c(rep(\"dicoccoides\", 8), rep(\"dicoccum\", 8), rep(\"durum\", 8))\ntreatment &lt;- rep(c(rep(\"High\", 4), rep(\"Low\", 4)), 3)\ndata &lt;- data.frame(sample, specie, treatment)\nfor (i in seq(1:5)) {\n    gene = sample(c(1:40), 24)\n    data = cbind(data, gene)\n    colnames(data)[ncol(data)] = paste(\"gene_\", i, sep = \"\")\n}\n# 高氮处理的样本基因表达量整体加100\ndata[data$treatment == \"High\", c(4:8)] = data[\n    data$treatment == \"High\",\n    c(4:8)\n] + 100\n# durum品种的样本基因表达量整体减30\ndata[data$specie == \"durum\", c(4:8)] = data[data$specie == \"durum\", c(4:8)] - 30\nrownames(data) &lt;- data[, 1] # 设置行名为样本名\n\n# 查看数据集结构\n# head(data)\n\n# 计算样本间欧氏距离（仅用第4到8列基因表达量）\ndist = dist(data[, c(4:8)], diag = TRUE)\n\n# 层次聚类分析\nhc &lt;- hclust(dist)\ndhc &lt;- as.dendrogram(hc)\n\n# 查看树状图某个叶节点的属性\nspecific_leaf &lt;- dhc[[1]][[1]][[1]]\n# specific_leaf\n# attributes(specific_leaf)\n\n# 定义函数，为每个叶节点添加颜色、字体和大小等属性\ni = 0\ncolLab &lt;&lt;- function(n) {\n    if (is.leaf(n)) {\n        # 获取当前节点属性\n        a = attributes(n)\n\n        # 根据标签找到原始数据行，获取处理和品种信息\n        ligne = match(attributes(n)$label, data[, 1])\n        treatment = data[ligne, 3]\n        if (treatment == \"Low\") {\n            col_treatment = \"blue\"\n        }\n        if (treatment == \"High\") {\n            col_treatment = \"red\"\n        }\n        specie = data[ligne, 2]\n        if (specie == \"dicoccoides\") {\n            col_specie = \"red\"\n        }\n        if (specie == \"dicoccum\") {\n            col_specie = \"Darkgreen\"\n        }\n        if (specie == \"durum\") {\n            col_specie = \"blue\"\n        }\n\n        # 修改叶节点属性，包括点的颜色、标签颜色、字体等\n        attr(n, \"nodePar\") &lt;- c(\n            a$nodePar,\n            list(\n                cex = 1.5,         # 点的大小\n                lab.cex = 1,       # 标签字体大小\n                pch = 20,          # 点的形状\n                col = col_treatment, # 点的颜色（按处理分组）\n                lab.col = col_specie, # 标签颜色（按品种分组）\n                lab.font = 1,      # 标签字体\n                lab.cex = 1        # 标签字体大小\n            )\n        )\n    }\n    return(n)\n}\n\n# 应用自定义函数到树状图所有叶节点\ndL &lt;- dendrapply(dhc, colLab)\n\n# 绘制自定义样式的树状图\nplot(dL, main = \"structure of the population\")\n\n# 添加图例，说明颜色和分组含义\nlegend(\n    \"topright\",\n    legend = c(\n        \"High Nitrogen\",   # 高氮处理\n        \"Low Nitrogen\",    # 低氮处理\n        \"Durum\",           # 品种durum\n        \"Dicoccoides\",     # 品种dicoccoides\n        \"Dicoccum\"         # 品种dicoccum\n    ),\n    col = c(\"red\", \"blue\", \"blue\", \"red\", \"Darkgreen\"),\n    pch = c(20, 20, 4, 4, 4),\n    bty = \"n\",\n    pt.cex = 1.5,\n    cex = 0.8,\n    text.col = \"black\",\n    horiz = FALSE,\n    inset = c(0, 0.1)\n)\n\n\n\n\n\n自定义树状图叶节点颜色和标签样式",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Dendrogram</span>"
    ]
  },
  {
    "objectID": "dendrogram.html#定制-1",
    "href": "dendrogram.html#定制-1",
    "title": "24  Dendrogram",
    "section": "24.4 定制",
    "text": "24.4 定制\n\n24.4.1 set()\n\n\nShow/Hide Code\n# 加载tidyverse包，用于数据处理\nlibrary(tidyverse)\nlibrary(dendextend) # 用于dendrogram对象的定制\nlibrary(patchwork)  # 用于拼接多个图形\n\n# 使用mtcars数据集的mpg、cyl、disp三个变量进行层次聚类\ndend &lt;- mtcars |&gt;\n    select(mpg, cyl, disp) |&gt; # 选择3个变量\n    dist() |&gt;                 # 计算欧氏距离\n    hclust() |&gt;               # 层次聚类\n    as.dendrogram()           # 转换为dendrogram对象\n\n# 设置绘图区域的边距，增加底部空间以完整显示标签\npar(mar = c(7, 3, 1, 1))\n\n# 基础树状图\nplot(dend)\n\n\n\n\n\n使用set()函数定制mtcars数据集的树状图分支、标签和节点样式\n\n\n\n\nShow/Hide Code\n# 使用set()函数定制分支颜色和粗细，以及标签颜色和大小\ndend |&gt;\n  set(\"branches_col\", \"grey\") |&gt;   # 设置分支颜色为灰色\n  set(\"branches_lwd\", 3) |&gt;        # 设置分支线宽为3\n  set(\"labels_col\", \"orange\") |&gt;   # 设置标签颜色为橙色\n  set(\"labels_cex\", 0.8) |&gt;        # 设置标签字体大小为0.8\n  plot()\n\n\n\n\n\n使用set()函数定制mtcars数据集的树状图分支、标签和节点样式\n\n\n\n\nShow/Hide Code\n# 定制所有节点的点形状、大小和颜色\ndend |&gt;\n  set(\"nodes_pch\", 19)  |&gt;         # 设置所有节点的点形状为实心圆\n  set(\"nodes_cex\", 0.7) |&gt;         # 设置节点点的大小为0.7\n  set(\"nodes_col\", \"orange\") |&gt;    # 设置节点点的颜色为橙色\n  plot()\n\n\n\n\n\n使用set()函数定制mtcars数据集的树状图分支、标签和节点样式\n\n\n\n\nShow/Hide Code\n# 仅定制叶节点的点形状、大小和颜色\ndend |&gt;\n  set(\"leaves_pch\", 19)  |&gt;        # 设置叶节点的点形状为实心圆\n  set(\"leaves_cex\", 0.7) |&gt;        # 设置叶节点点的大小为0.7\n  set(\"leaves_col\", \"skyblue\") |&gt;  # 设置叶节点点的颜色为天蓝色\n  plot()\n\n\n\n\n\n使用set()函数定制mtcars数据集的树状图分支、标签和节点样式\n\n\n\n\n\n\n24.4.2 Highlight\n\n\nShow/Hide Code\n# 根据聚类结果为标签和分支着色\npar(mar = c(1, 1, 1, 7)) # 设置绘图区域边距，右侧留出空间\ndend |&gt;\n    set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |&gt; # 按3个聚类为标签着色\n    set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |&gt; # 按3个聚类为分支着色\n    plot(horiz = TRUE, axes = FALSE) # 横向绘制树状图，去除坐标轴\nabline(v = 350, lty = 2) # 添加虚线，辅助观察\n\n\n\n\n\n根据聚类结果为树状图分支和标签着色，并高亮显示指定聚类分支\n\n\n\n\nShow/Hide Code\n# 高亮显示某个聚类分支（用矩形框出）\npar(mar = c(9, 1, 1, 1)) # 调整边距，底部留出空间\ndend |&gt;\n    set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |&gt; # 按3个聚类为标签着色\n    set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |&gt; # 按3个聚类为分支着色\n    plot(axes = FALSE) # 绘制树状图，去除坐标轴\nrect.dendrogram(\n    dend,                # 树状图对象\n    k = 3,               # 指定聚类数为3\n    lty = 5,             # 矩形边框线型为虚线\n    lwd = 0,             # 边框线宽为0（仅填充色，无边框线）\n    x = 1,               # 指定高亮第1个聚类\n    col = rgb(0.1, 0.2, 0.4, 0.1) # 填充颜色为半透明蓝色\n)\n\n\n\n\n\n根据聚类结果为树状图分支和标签着色，并高亮显示指定聚类分支\n\n\n\n\n\n\n24.4.3 预期\n与预期聚类进行比较:\n\n\nShow/Hide Code\n# 创建颜色向量：am为0时为深绿色（forestgreen），为1时为绿色（green）\nmy_colors &lt;- ifelse(mtcars$am == 0, \"forestgreen\", \"green\")\n\n# 设置绘图区域边距，底部留出空间以完整显示标签\npar(mar = c(10, 1, 1, 1))\n\n# 绘制树状图，分支和标签按3个聚类着色，叶节点为实心圆，节点大小为0.7\ndend |&gt;\n    set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |&gt; # 标签按聚类着色\n    set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |&gt; # 分支按聚类着色\n    set(\"leaves_pch\", 19) |&gt;        # 叶节点点形状为实心圆\n    set(\"nodes_cex\", 0.7) |&gt;        # 节点点大小为0.7\n    plot(axes = FALSE)              # 去除坐标轴\n\n# 在树状图下方添加分组色条，表示am变量的分组情况\ncolored_bars(colors = my_colors, dend = dend, rowLabels = \"am\")\n\n\n\n\n\n对比聚类结果与预期分组（am变量）并添加分组色条\n\n\n\n\n\n\n24.4.4 2 树比较\n\n\nShow/Hide Code\n# 使用USArrests数据集，分别用average和complete方法进行层次聚类，并转换为dendrogram对象\nd1 &lt;- USArrests |&gt; dist() |&gt; hclust(method = \"average\") |&gt; as.dendrogram()   # average法\nd2 &lt;- USArrests |&gt; dist() |&gt; hclust(method = \"complete\") |&gt; as.dendrogram()  # complete法\n\n# 对两棵树分别定制分支和标签颜色，并放入dendlist对象中\ndl &lt;- dendlist(\n    d1 |&gt;\n        set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |&gt;   # 按3类为标签着色\n        set(\"branches_lty\", 1) |&gt;                                             # 分支线型为实线\n        set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3), # 按3类为分支着色\n    d2 |&gt;\n        set(\"labels_col\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3) |&gt;\n        set(\"branches_lty\", 1) |&gt;\n        set(\"branches_k_color\", value = c(\"skyblue\", \"orange\", \"grey\"), k = 3)\n)\n\n# 并排绘制两棵树状图，比较聚类结构差异\ntanglegram(\n    dl,\n    common_subtrees_color_lines = FALSE,   # 不高亮共同子树\n    highlight_distinct_edges = TRUE,       # 高亮不同的分支\n    highlight_branches_lwd = FALSE,        # 不加粗分支\n    margin_inner = 7,                      # 两树之间的间距\n    lwd = 2                                # 分支线宽\n)\n\n\n\n\n\n对比两种不同聚类方法（average与complete）的树状图结构",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Dendrogram</span>"
    ]
  },
  {
    "objectID": "circular.html",
    "href": "circular.html",
    "title": "25  Circular",
    "section": "",
    "text": "25.1 PKG\nShow/Hide Code\nlibrary(packcircles) # for packing circles\nlibrary(tidyverse) # for data manipulation and visualization\nlibrary(viridis) # for color palettes\nlibrary(ggiraph) # for interactive plots\nlibrary(ggraph) # for graph visualization\nlibrary(igraph) # for graph manipulation\n# remotes::install_github(\"jeromefroe/circlepackeR\")\nlibrary(circlepackeR) # for interactive circle packing\nlibrary(data.tree)",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Circular</span>"
    ]
  },
  {
    "objectID": "circular.html#one-level",
    "href": "circular.html#one-level",
    "title": "25  Circular",
    "section": "25.2 One level",
    "text": "25.2 One level\n\n25.2.1 Basic\n\n\nShow/Hide Code\nlibrary(packcircles)  # 加载 packcircles 包，用于圆形打包\nlibrary(ggplot2)      # 加载 ggplot2 包，用于绘图\n\n# 创建数据框，包含分组名称和对应的数值\ndata &lt;- data.frame(\n    group = paste(\"Group\", letters[1:20]),   # 生成 20 个分组名\n    value = sample(seq(1, 100), 20)          # 随机生成 20 个 1~100 之间的数值\n)\n\n# 生成圆形打包布局，返回每个圆的中心坐标 (x, y) 和半径 (radius)\n# sizetype='area' 表示半径根据面积成比例分配\npacking &lt;- circleProgressiveLayout(data$value, sizetype = 'area')\n\n# 将打包信息（中心坐标和半径）合并到原始数据框中\ndata &lt;- cbind(data, packing)\n\n# 检查半径与数值的关系（可选）\n# plot(data$radius, data$value)\n\n# 根据每个圆的中心和半径，生成用于绘制圆形的多边形顶点坐标\n# npoints=50 表示每个圆用 50 个点近似\ndat.gg &lt;- circleLayoutVertices(packing, npoints = 50)\n\n# 绘制圆形打包图\nggplot() +\n    # 绘制圆形多边形（气泡）\n    geom_polygon(\n        data = dat.gg,\n        aes(x, y, group = id, fill = as.factor(id)),\n        colour = \"black\", alpha = 0.6\n    ) +\n    # 在每个圆心添加文本标签，并根据 value 控制字体大小\n    geom_text(\n        data = data,\n        aes(x, y, size = value, label = group)\n    ) +\n    scale_size_continuous(range = c(1, 4)) +  # 设置字体大小范围\n    # 设置主题为无坐标轴、无背景\n    theme_void() +\n    theme(legend.position = \"none\") +         # 不显示图例\n    coord_equal()                             # 保持 x、y 轴比例相等\n\n\n\n\n\nCircle packing with packcircles\n\n\n\n\n\n\n25.2.2 Color\n使用自定义调色板（magma）进行圆形打包可视化:\n\n\nShow/Hide Code\n# 使用 ggplot2 绘制圆形打包图，并自定义颜色\nggplot() +\n    # 绘制圆形多边形（气泡），每个圆用不同颜色填充\n    geom_polygon(\n        data = dat.gg,\n        aes(x, y, group = id, fill = as.factor(id)), # 按 id 分组并填充颜色\n        colour = \"black\",    # 圆边界为黑色\n        alpha = 0.6          # 设置透明度\n    ) +\n    # 使用 viridis 包中的 magma 调色板为每个圆分配颜色\n    scale_fill_manual(values = magma(nrow(data))) +\n    # 在每个圆心添加文本标签，字体大小与 value 成比例\n    geom_text(\n        data = data,\n        aes(x, y, size = value, label = group)\n    ) +\n    scale_size_continuous(range = c(1, 4)) +  # 设置字体大小范围\n    theme_void() +                            # 去除坐标轴和背景\n    theme(legend.position = \"none\") +         # 不显示图例\n    coord_equal()                             # 保持 x、y 轴比例相等\n\n\n\n\n\n使用自定义调色板（magma）进行圆形打包可视化\n\n\n\n\n使用渐变色（BuPu 调色板）根据 value 显示圆形打包图:\n\n\nShow/Hide Code\n# 首先，将每个分组的 value 添加到 dat.gg 数据框中。\n# 由于每个圆形多边形由 51 个点近似（npoints=50，首尾闭合），所以每个 value 需要重复 51 次。\ndat.gg$value &lt;- rep(data$value, each = 51)\n\n# 绘制圆形打包图\nggplot() + \n    # 绘制圆形多边形（气泡），根据 value 使用渐变色填充\n    geom_polygon(\n        data = dat.gg,\n        aes(x, y, group = id, fill = value),   # 按 value 渐变填充\n        colour = \"black\",                      # 边界为黑色\n        alpha = 0.6                            # 设置透明度\n    ) +\n    scale_fill_distiller(palette = \"BuPu\", direction = 1) +  # 使用 BuPu 调色板\n\n    # 在每个圆心添加文本标签，字体大小与 value 成比例\n    geom_text(\n        data = data,\n        aes(x, y, size = value, label = group)\n    ) +\n    scale_size_continuous(range = c(1, 4)) +  # 设置字体大小范围\n\n    # 设置主题为无坐标轴、无背景\n    theme_void() +\n    theme(legend.position = \"none\") +         # 不显示图例\n    coord_equal()                             # 保持 x、y 轴比例相等\n\n\n\n\n\n使用渐变色（BuPu 调色板）根据 value 显示圆形打包图\n\n\n\n\n通过 theme() 函数及其 plot.background() 参数更改背景:\n\n\nShow/Hide Code\n# 使用 ggplot2 绘制圆形打包图，并设置黑色背景和自定义标题\n\nggplot() + \n  \n  # 绘制圆形多边形（气泡），根据 value 使用渐变色填充\n  geom_polygon(\n    data = dat.gg, \n    aes(x, y, group = id, fill = value),   # 按 value 渐变填充\n    colour = \"grey\",                       # 边界为灰色\n    alpha = 0.6,                           # 设置透明度\n    size = .5                              # 边界线宽\n  ) +\n  scale_fill_distiller(palette = \"Spectral\", direction = 1 ) +  # 使用 Spectral 调色板\n  \n  # 在每个圆心添加标签，字体大小与 value 成比例\n  geom_label(\n    data = data, \n    aes(x, y, size = value, label = group) # 标签内容为分组名\n  ) +\n  scale_size_continuous(range = c(1, 4)) + # 设置字体大小范围\n  \n  # 设置主题为无坐标轴、无背景，并自定义背景和标题颜色\n  theme_void()  + \n  theme(\n    legend.position = \"none\",                        # 不显示图例\n    plot.background = element_rect(fill = \"black\"),  # 设置背景为黑色\n    plot.title = element_text(color = \"white\")       # 标题字体为白色\n  ) + \n  coord_equal() +                                    # 保持 x、y 轴比例相等\n  ggtitle(\"A custom circle packing with\\nblack background\") # 添加标题\n\n\n\n\n\n自定义黑色背景的圆形打包图，使用Spectral调色板和标签\n\n\n\n\n\n\n25.2.3 Space\n\n\nShow/Hide Code\n# 创建数据框，包含分组名称和对应的数值\ndata &lt;- data.frame(\n  group = paste(\"Group\", letters[1:20]),\n  value = sample(seq(1, 100), 20)\n)\n\n# 生成布局\npacking &lt;- circleProgressiveLayout(data$value, sizetype = 'area')\npacking$radius &lt;- 0.95 * packing$radius # 让直径小于 1, 留有空隙\ndata &lt;- cbind(data, packing)\ndat.gg &lt;- circleLayoutVertices(packing, npoints = 50)\n\n\n# 使用 ggplot2 绘制圆形打包图，采用 viridis 调色板\nggplot() +\n\n    # 绘制圆形多边形（气泡），每个圆用不同颜色填充\n    geom_polygon(\n        data = dat.gg,                           # 多边形顶点数据\n        aes(x, y, group = id, fill = id),        # 按 id 分组并填充颜色\n        colour = \"black\",                        # 边界为黑色\n        alpha = 0.6                              # 设置透明度\n    ) +\n    scale_fill_viridis() +                     # 使用 viridis 调色板\n\n    # 在每个圆心添加文本标签，字体大小与 value 成比例\n    geom_text(\n        data = data,                             # 圆心及标签数据\n        aes(x, y, size = value, label = group),  # 设置圆心坐标、字体大小和标签内容\n        color = \"black\"                          # 标签字体颜色为黑色\n    ) +\n    theme_void() +                             # 去除坐标轴和背景\n    theme(legend.position = \"none\") +          # 不显示图例\n    coord_equal()                              # 保持 x、y 轴比例相等\n\n\n\n\n\n使用 viridis 调色板展示圆形打包图\n\n\n\n\n\n\n25.2.4 Interactive\n使用 ggiraph::girafe() 函数生成交互式圆形打包图，悬停查看详细信息:\n\n\nShow/Hide Code\n# 加载所需包\nlibrary(packcircles)   # 用于圆形打包布局\nlibrary(ggplot2)       # 用于绘图\nlibrary(viridis)       # 用于配色\nlibrary(ggiraph)       # 用于交互式图形\n\n# 创建数据框，包含分组名称和对应的数值\ndata &lt;- data.frame(\n    group = paste(\n        \"Group_\",\n        sample(letters, 70, replace = TRUE),  # 随机生成 70 个字母\n        sample(letters, 70, replace = TRUE),\n        sample(letters, 70, replace = TRUE),\n        sep = \"\"\n    ),\n    value = sample(seq(1, 70), 70)          # 随机生成 70 个 1~70 之间的数值\n)\n\n# 添加文本列，用于气泡悬停时显示详细信息\ndata$text &lt;- paste(\n    \"name: \", data$group, \"\\n\",\n    \"value: \", data$value, \"\\n\",\n    \"You can add a story here!\"\n)\n\n# 生成圆形打包布局，返回每个圆的中心坐标 (x, y) 和半径 (radius)\npacking &lt;- circleProgressiveLayout(data$value, sizetype = 'area')\ndata &lt;- cbind(data, packing)\n\n# 根据每个圆的中心和半径，生成用于绘制圆形的多边形顶点坐标\ndat.gg &lt;- circleLayoutVertices(packing, npoints = 50)\n\n# 绘制交互式圆形打包图\np &lt;- ggplot() +\n    # 绘制交互式圆形多边形（气泡），可悬停显示 tooltip\n    geom_polygon_interactive(\n        data = dat.gg,\n        aes(\n            x, y, group = id, fill = id,\n            tooltip = data$text[id],   # 悬停显示的文本\n            data_id = id               # 交互用的唯一标识\n        ),\n        colour = \"black\",            # 边界为黑色\n        alpha = 0.6                  # 设置透明度\n    ) +\n    scale_fill_viridis() +         # 使用 viridis 调色板\n    # 在每个圆心添加文本标签，去掉 \"Group_\" 前缀\n    geom_text(\n        data = data,\n        aes(x, y, label = gsub(\"Group_\", \"\", group)),\n        size = 2,\n        color = \"black\"\n    ) +\n    theme_void() +                 # 去除坐标轴和背景\n    theme(\n        legend.position = \"none\", \n        plot.margin = unit(c(0, 0, 0, 0), \"cm\")  # 去除边距\n    ) +\n    coord_equal()                  # 保持 x、y 轴比例相等\n\n# 生成交互式图形\ngirafe(ggobj = p) # 旧版本用 ggiraph()\n\n\n\n\n交互式圆形打包图（circle packing），可悬停显示详细信息",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Circular</span>"
    ]
  },
  {
    "objectID": "circular.html#several-levels",
    "href": "circular.html#several-levels",
    "title": "25  Circular",
    "section": "25.3 Several levels",
    "text": "25.3 Several levels\n\n25.3.1 ggraph()\n\n\nShow/Hide Code\nlibrary(ggraph) # 用于图形可视化\nlibrary(igraph) # 用于图形操作\nlibrary(tidyverse)\n\n# 加载 edges 和 vertices 数据，flare 数据集内置于 packcircles 包\nedges &lt;- flare$edges  # 边数据，描述节点之间的父子关系\n\n# 通常我们还会有一个节点信息表，包含每个节点的属性\nvertices &lt;- flare$vertices  # 节点数据，包含节点名称、分组等信息\n\n# 使用 igraph 包将边和节点数据转换为图对象\nmygraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# 使用 ggraph 包绘制多层级圆形打包图\nggraph(mygraph, layout = 'circlepack') + \n    geom_node_circle() +         # 绘制每个节点的圆\n    theme_void()                 # 去除坐标轴和背景\n\n\n\n\n\n多层级圆形打包图（circle packing），展示层级结构数据\n\n\n\n\n\n\n25.3.2 type\n\n\nShow/Hide Code\nggraph(mygraph, layout = 'dendrogram', circular = TRUE) +\n  geom_edge_diagonal() +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\ndendrogram, circle packing\n\n\n\n\n\n\nShow/Hide Code\nggraph(mygraph, layout = 'dendrogram', circular = FALSE) +\n  geom_edge_diagonal() +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\ndendrogram, not circle packing\n\n\n\n\n\n\nShow/Hide Code\nggraph(mygraph, 'treemap', weight = size) +\n  geom_node_tile(aes(fill = depth), size = 0.25) +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\ntreemap\n\n\n\n\n\n\nShow/Hide Code\nggraph(mygraph, 'partition', circular = TRUE) +\n  geom_node_arc_bar(aes(fill = depth), size = 0.25) +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\npartition\n\n\n\n\n\n\nShow/Hide Code\n# 使用 ggraph 绘制基础网络图，展示节点与边的关系\nggraph(mygraph) +\n    # 绘制边（连线），表示节点之间的连接关系\n    geom_edge_link() +\n    # 绘制节点（点），表示网络中的各个实体\n    geom_node_point() +\n    # 去除坐标轴和背景，使图形更简洁\n    theme_void() +\n    # 不显示图例\n    theme(legend.position = \"none\")\n\n\n\n\n\n基础网络图：节点与连线的可视化\n\n\n\n\n\n\n25.3.3 color\n节点颜色根据深度变化:\n\n\nShow/Hide Code\n# 使用 ggraph 绘制圆形打包图，节点颜色根据深度变化\np &lt;- ggraph(mygraph, layout = 'circlepack', weight=size) + \n  geom_node_circle(aes(fill = depth)) +\n  theme_void() + \n  theme(legend.position=\"FALSE\")\np\n\n\n\n\n\n圆形打包图：节点颜色根据深度变化\n\n\n\n\n\n\nShow/Hide Code\np + scale_fill_viridis()\n\n\n\n\n\nviridis 调色板应用于圆形打包图\n\n\n\n\n\n\nShow/Hide Code\np + scale_fill_distiller(palette = \"RdPu\") \n\n\n\n\n\ncolorBrewer 调色板应用于圆形打包图\n\n\n\n\n\n\n25.3.4 label\n适用于层级不特别多的情况\n\n\nShow/Hide Code\n# 仅保留有下级的边（即 to 在 from 中出现）\nedges &lt;- flare$edges |&gt;\n    filter(to %in% from) |&gt;\n    droplevels()\n\n# 仅保留参与这些边的节点\nvertices &lt;- flare$vertices |&gt;\n    filter(name %in% c(edges$from, edges$to)) |&gt;\n    droplevels()\n\n# 随机生成每个节点的 size 属性（可根据实际数据调整）\nvertices$size &lt;- runif(nrow(vertices))\n\n# 重新构建 igraph 图对象\nmygraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# 使用 ggraph 绘制多层级圆形打包图\nggraph(mygraph, layout = 'circlepack', weight = size) +\n    # 绘制每个节点的圆，颜色根据深度变化\n    geom_node_circle(aes(fill = depth)) +\n    # 仅在叶节点（leaf=TRUE）处添加标签，标签内容为 shortName，字体大小与 size 成比例\n    geom_node_text(aes(\n        label = shortName,    # 标签内容\n        filter = leaf,        # 仅叶节点显示\n        fill = depth,         # 标签颜色与深度一致\n        size = size           # 字体大小与 size 成比例\n    )) +\n    theme_void() +                          # 去除坐标轴和背景\n    theme(legend.position = \"FALSE\") +      # 不显示图例\n    scale_fill_viridis()                    # 使用 viridis 调色板\n\n\n\n\n\n带标签的多层级圆形打包图（circle packing），仅叶节点显示标签\n\n\n\n\n\n\nShow/Hide Code\n# 使用 ggraph 绘制多层级圆形打包图，节点颜色根据深度变化，叶节点显示标签\nggraph(mygraph, layout = 'circlepack', weight = size) + \n    # 绘制每个节点的圆，颜色根据深度变化\n    geom_node_circle(aes(fill = depth)) +\n    # 仅在叶节点（leaf=TRUE）处添加标签，标签内容为 shortName，字体大小与 size 成比例\n    geom_node_label(\n        aes(\n            label = shortName,  # 标签内容为节点的 shortName\n            filter = leaf,      # 仅叶节点显示标签\n            size = size         # 字体大小与 size 成比例\n        )\n    ) +\n    theme_void() +                          # 去除坐标轴和背景\n    theme(legend.position = \"FALSE\") +      # 不显示图例\n    scale_fill_viridis()                    # 使用 viridis 调色板\n\n\n\n\n\n带标签的多层级圆形打包图（circle packing），仅叶节点显示标签\n\n\n\n\n\n\n25.3.5 Hide\n隐藏1个或多个外层大圈:\n\n\nShow/Hide Code\n# 使用 packcircles 包内置的 flare 数据集，包含层级结构的边和节点信息\nedges = flare$edges         # 边数据，描述父子关系\nvertices = flare$vertices   # 节点数据，包含节点属性\n\n# 构建 igraph 图对象\nmygraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# 绘制多层级圆形打包图，隐藏最外层大圈（depth=0 填充为白色）\nggraph(mygraph, layout = 'circlepack', weight = size) +\n    # 绘制每个节点的圆，填充和边框颜色根据深度分组\n    geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth))) +\n    # 设置不同深度的填充颜色，最外层（depth=0）为白色，其余用 viridis 调色板\n    scale_fill_manual(\n        values = c(\n            \"0\" = \"white\",           # 最外层隐藏\n            \"1\" = viridis(4)[1],     # 第一层\n            \"2\" = viridis(4)[2],     # 第二层\n            \"3\" = viridis(4)[3],     # 第三层\n            \"4\" = viridis(4)[4]      # 第四层\n        )\n    ) +\n    # 设置不同深度的边框颜色，最外层为白色，其余为黑色\n    scale_color_manual(\n        values = c(\n            \"0\" = \"white\",           # 最外层隐藏\n            \"1\" = \"black\",\n            \"2\" = \"black\",\n            \"3\" = \"black\",\n            \"4\" = \"black\"\n        )\n    ) +\n    theme_void() +                        # 去除坐标轴和背景\n    theme(legend.position = \"FALSE\")      # 不显示图例\n\n\n\n\n\n隐藏最外层大圈的多层级圆形打包图（circle packing）\n\n\n\n\n\n\nShow/Hide Code\n# 使用 ggraph 绘制多层级圆形打包图，隐藏最外层和第二层大圈\nggraph(mygraph, layout = 'circlepack', weight = size) +\n    # 绘制每个节点的圆，填充和边框颜色根据深度分组\n    geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth))) +\n    # 设置不同深度的填充颜色，前两层（depth=0,1）为白色，其余用 magma 调色板\n    scale_fill_manual(\n        values = c(\n            \"0\" = \"white\",           # 最外层隐藏\n            \"1\" = \"white\",           # 第二层隐藏\n            \"2\" = magma(4)[2],       # 第三层\n            \"3\" = magma(4)[3],       # 第四层\n            \"4\" = magma(4)[4]        # 第五层\n        )\n    ) +\n    # 设置不同深度的边框颜色，前两层为白色，其余为黑色\n    scale_color_manual(\n        values = c(\n            \"0\" = \"white\",           # 最外层隐藏\n            \"1\" = \"white\",           # 第二层隐藏\n            \"2\" = \"black\",\n            \"3\" = \"black\",\n            \"4\" = \"black\"\n        )\n    ) +\n    theme_void() +                        # 去除坐标轴和背景\n    theme(legend.position = \"FALSE\")      # 不显示图例\n\n\n\n\n\n隐藏前两层大圈的多层级圆形打包图（circle packing）\n\n\n\n\n\n\n25.3.6 特定 label\n\n\nShow/Hide Code\n# 加载 data.tree 包，用于树结构操作\nlibrary(data.tree)\n\n# 重新加载边和节点数据\nedges &lt;- flare$edges\nvertices &lt;- flare$vertices\n\n# 将边数据转换为树结构，便于获取每个节点的层级信息\ntree &lt;- FromDataFrameNetwork(edges)\n\n# 获取每个节点的名称和层级，并合并到原始节点数据框\nmylevels &lt;- data.frame(\n    name = tree$Get('name'),      # 节点名称\n    level = tree$Get(\"level\")     # 节点层级（根节点为1）\n)\nvertices &lt;- vertices %&gt;%\n    left_join(., mylevels, by = c(\"name\" = \"name\"))\n\n# 仅为 level=2 的节点添加标签，其余节点标签为 NA\nvertices &lt;- vertices %&gt;%\n    mutate(new_label = ifelse(level == 2, shortName, NA))\n\n# 构建 igraph 图对象\nmygraph &lt;- graph_from_data_frame(edges, vertices = vertices)\n\n# 绘制多层级圆形打包图\nggraph(mygraph, layout = 'circlepack', weight = size) +\n    # 绘制每个节点的圆，填充和边框颜色根据深度分组\n    geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth))) +\n    # 设置不同深度的填充颜色，最外层为白色，其余用 viridis 调色板\n    scale_fill_manual(values = c(\n        \"0\" = \"white\",\n        \"1\" = viridis(4)[1],\n        \"2\" = viridis(4)[2],\n        \"3\" = viridis(4)[3],\n        \"4\" = viridis(4)[4]\n    )) +\n    # 设置不同深度的边框颜色，最外层为白色，其余为黑色\n    scale_color_manual(values = c(\n        \"0\" = \"white\",\n        \"1\" = \"black\",\n        \"2\" = \"black\",\n        \"3\" = \"black\",\n        \"4\" = \"black\"\n    )) +\n    # 仅为 new_label 非 NA 的节点添加标签（即 level=2 的节点）\n    geom_node_label(aes(label = new_label), size = 4) +\n    # 去除坐标轴和背景，设置无图例和无边距\n    theme_void() +\n    theme(\n        legend.position = \"FALSE\",\n        plot.margin = unit(rep(0, 4), \"cm\")\n    )\n\n\n\n\n\n仅为特定层级（如 level=2）节点添加标签的多层级圆形打包图\n\n\n\n\n\n\n25.3.7 可缩放\ncirclePacker 包可以用来创建交互式和可缩放圆形堆积图\n\n\nShow/Hide Code\n# 加载 circlepackeR 包，用于创建可缩放的交互式圆形打包图\nlibrary(circlepackeR)\n\n# 构建一个嵌套数据框，包含多层级结构信息\ndata &lt;- data.frame(\n    root = rep(\"root\", 15),                                 # 根节点\n    group = c(rep(\"group A\", 5), rep(\"group B\", 5), rep(\"group C\", 5)), # 一级分组\n    subgroup = rep(letters[1:5], each = 3),                 # 二级分组\n    subsubgroup = rep(letters[1:3], 5),                     # 三级分组\n    value = sample(seq(1:15), 15)                           # 每个叶节点的数值\n)\n\n# 使用 data.tree 包将数据转换为树结构\nlibrary(data.tree)\n# 构建 pathString 字段，格式为 root/group/subgroup/subsubgroup\ndata$pathString &lt;- paste(\n    \"world\",                # 根节点名称\n    data$group,             # 一级分组\n    data$subgroup,          # 二级分组\n    data$subsubgroup,       # 三级分组\n    sep = \"/\"\n)\n# 转换为树结构对象\npopulation &lt;- as.Node(data)\n\n# 绘制可缩放的交互式圆形打包图\n# color_min 和 color_max 可自定义颜色范围\ncirclepackeR(\n    population,                 # 层级结构数据\n    size = \"value\",             # 用于圆面积的数值字段\n    color_min = \"hsl(56,80%,80%)\",   # 最小值对应的颜色\n    color_max = \"hsl(341,30%,40%)\"   # 最大值对应的颜色\n)\n\n\n\n\n可缩放交互式多层级圆形打包图（circle packing），使用 circlepackeR 包\n\n\n\n\nShow/Hide Code\n# 加载 circlepackeR 包，用于绘制交互式圆形打包图\nlibrary(circlepackeR)\n# 加载 ggraph 包（本例未直接用到，但常用于网络可视化）\nlibrary(ggraph)\n\n# 使用 packcircles 包内置的 flare 数据集，获取边列表\ndata_edge &lt;- flare$edges\n\n# 提取每个节点名称的最后一级（去掉前面的分层前缀），便于后续分层\ndata_edge$from &lt;- gsub(\".*\\\\.\", \"\", data_edge$from)\ndata_edge$to &lt;- gsub(\".*\\\\.\", \"\", data_edge$to)\n# head(data_edge) # 查看处理后的边列表\n\n# 加载 data.tree 包，用于将边列表转换为树结构\nlibrary(data.tree)\n# 将边列表转换为树结构对象\ndata_tree &lt;- FromDataFrameNetwork(data_edge)\n\n# 将树结构转换为嵌套数据框，提取每一层的名称\ndata_nested &lt;- ToDataFrameTree(\n    data_tree,\n    level1 = function(x) x$path[2], # 第一层\n    level2 = function(x) x$path[3], # 第二层\n    level3 = function(x) x$path[4], # 第三层\n    level4 = function(x) x$path[5]  # 第四层\n)[-1, -1] # 去除根节点和第一列（树结构自带的 name）\n\n# 去除包含 NA 的行，只保留完整路径\ndata_nested &lt;- na.omit(data_nested)\n\n# 构建 pathString 字段，格式为 roots/level1/level2/level3/level4\ndata_nested$pathString &lt;- paste(\n    \"roots\",\n    data_nested$level1,\n    data_nested$level2,\n    data_nested$level3,\n    data_nested$level4,\n    sep = \"/\"\n)\n\n# 设置每个叶节点的 value（圆面积），此处统一为 1\ndata_nested$value = 1\n\n# 将嵌套数据框转换为树结构对象\ndata_Node &lt;- as.Node(data_nested)\n\n# 使用 circlepackeR 绘制可缩放的多层级圆形打包图\ncirclepackeR(data_Node, size = \"value\")\n\n\n\n\n将 edge list 转换为嵌套结构并用 circlepackeR 绘制多层级圆形打包图",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Circular</span>"
    ]
  },
  {
    "objectID": "waffle.html",
    "href": "waffle.html",
    "title": "26  Waffle",
    "section": "",
    "text": "26.1 PKG\nWaffle chart 通过一个小方块网格直观地表示分类数据，形状像华夫饼。\n每个小方块代表一个单位，每个类别有一种颜色，通常用于展示百分比或比例数据。\nwaffle 包提供两种不同的 API（应用程序编程接口）。第一种类似于基础 R 语法，使用 waffle() 函数。第二种 geom_waffle() 符合 tidyverse 理念，可以无缝集成到 ggplot2 调用中。\nShow/Hide Code\nlibrary(waffle)\nlibrary(tidyverse)   \nlibrary(ggtext)    \nlibrary(rnaturalearth) # 获取世界地图数据\nlibrary(sf)           # 处理空间数据",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Waffle</span>"
    ]
  },
  {
    "objectID": "waffle.html#base-r",
    "href": "waffle.html#base-r",
    "title": "26  Waffle",
    "section": "26.2 Base R",
    "text": "26.2 Base R\n\n26.2.1 基本\n\n\nShow/Hide Code\n# 构造示例数据\ngroup &lt;- c(\"group-1\", \"group-2\", \"group-3\")\nvalue &lt;- c(13, 5, 22)\ndata &lt;- data.frame(group, value)\n\n# 绘制华夫饼图\nwaffle(data)\n\n\n\n\n\n基础 R 语言绘制华夫饼图\n\n\n\n\n\n\n26.2.2 rows\n\n\nShow/Hide Code\nwaffle(data, rows = 5)\n\n\n\n\n\n通过 rows 参数设置华夫饼图的行数\n\n\n\n\n\n\n26.2.3 colors\n\n\nShow/Hide Code\nwaffle(data, rows = 5, colors = c(\"#fb5607\", \"#ff006e\", \"#8338ec\"))\n\n\n\n\n\n通过 colors 参数设置华夫饼图的颜色\n\n\n\n\n\n\n26.2.4 Legend\n通过 legend_pos 参数设置图例位置\n\n\nShow/Hide Code\nwaffle(\n    data,\n    rows = 5,\n    colors = c(\"#fb5607\", \"#ff006e\", \"#8338ec\"),\n    legend_pos = \"bottom\"\n)\n\n\n\n\n\n通过 legend_pos 参数设置图例位置",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Waffle</span>"
    ]
  },
  {
    "objectID": "waffle.html#ggplot2",
    "href": "waffle.html#ggplot2",
    "title": "26  Waffle",
    "section": "26.3 ggplot2",
    "text": "26.3 ggplot2\ngeom_waffle() 可以在 ggplot2 中使用。\n\n26.3.1 基本\n\n\nShow/Hide Code\nggplot(data, aes(fill=group, values=value)) +\n  geom_waffle() +\n  theme_void()\n\n\n\n\n\n使用 ggplot2 绘制华夫饼图\n\n\n\n\n\n\n26.3.2 颜色\n\n\nShow/Hide Code\nggplot(data, aes(fill=group, values=value)) +\n  geom_waffle(color = \"white\") + # 添加白色边框\n  scale_fill_brewer(palette = \"Set2\") + # 使用 Set2 调色板\n  theme_void()\n\n\n\n\n\n使用 ggplot2 绘制华夫饼图，修改颜色\n\n\n\n\n\n\n26.3.3 Legend\n\n\nShow/Hide Code\nggplot(data, aes(fill=group, values=value)) +\n  geom_waffle() +\n  scale_fill_manual(\n    values = c(\"#999999\", \"#E69F00\", \"#56B4E9\"),\n    labels = c(\"First group\", \"Second group\", \"Third group\")) +\n  theme_void()\n\n\n\n\n\n使用 ggplot2 绘制华夫饼图，修改图例\n\n\n\n\n\n\n26.3.4 subgroup\n通过对group分面，可以得到每个组的子组分布情况。\n\n\nShow/Hide Code\n# 构造带有 subgroup 的示例数据\ndata &lt;- data.frame(\n    group = c(\n        \"First group\",\n        \"First group\",\n        \"First group\",\n        \"First group\",\n        \"First group\",\n        \"First group\",\n        \"Second group\",\n        \"Second group\",\n        \"Second group\",\n        \"Second group\",\n        \"Third group\",\n        \"Third group\"\n    ),\n    subgroup = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"A\", \"B\", \"C\", \"D\", \"A\", \"B\"),\n    value = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)\n)\n\nggplot(data = data, aes(fill = subgroup, values = value)) +\n    geom_waffle(color = \"white\", size = 1.125, n_rows = 6) +\n    facet_wrap(~group, ncol = 1) + # 关键是分面 facet_wrap\n    theme_void()\n\n\n\n\n\n使用 ggplot2 绘制华夫饼图，分组显示\n\n\n\n\n\n\n26.3.5 颜色\n可以使用 scale_fill_manual() 来修改颜色。\n\n\nShow/Hide Code\nggplot(data = data, aes(fill = subgroup, values = value)) +\n    geom_waffle(color = \"white\", size = 1.125, n_rows = 6) +\n    facet_wrap(~group, ncol = 1) +\n    theme_void() +\n    scale_fill_manual(\n        values = c(\n            \"#69b3a2\",\n            \"#404080\",\n            \"#FFA07A\",\n            \"#FFD700\",\n            \"#FF6347\",\n            \"#4682B4\"\n        )\n    )\n\n\n\n\n\nscale_fill_manual() 修改颜色\n\n\n\n\n或者使用我更爱的 scale_fill_brewer(palette = \"Set2\") 来使用预定义的调色板。\n\n\nShow/Hide Code\nggplot(data = data, aes(fill = subgroup, values = value)) +\n    geom_waffle(color = \"white\", size = 1.125, n_rows = 6) +\n    facet_wrap(~group, ncol = 1) +\n    theme_void() +\n    scale_fill_brewer(palette = \"Set2\")\n\n\n\n\n\nscale_fill_brewer() 更改颜色",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Waffle</span>"
    ]
  },
  {
    "objectID": "waffle.html#pearl",
    "href": "waffle.html#pearl",
    "title": "26  Waffle",
    "section": "26.4 Pearl",
    "text": "26.4 Pearl\n2010-2020年全球 各大洲小麦产量 分布的华夫饼图：\n\n\n\n2010-2020年全球各大洲小麦/玉米产量分布\n\n\n大西洋飓风数量 分布的华夫饼图：\n\n\n\n大西洋飓风数量分布的华夫饼图\n\n\n不同大洲作为动物饲料消耗的 谷物比例:\n\n\n\n不同大洲作为动物饲料消耗的谷物比例",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Waffle</span>"
    ]
  },
  {
    "objectID": "evolution.html",
    "href": "evolution.html",
    "title": "Evolution",
    "section": "",
    "text": "此部分展示数据随时间的变化趋势\n\n\n\nEvolution\n\n\n\n27  Line : 线图\n28  Area : 区域图\n29  Stacked Area : 堆叠区域图\n30  Stream : 流图\n31  Time : 时间序列图",
    "crumbs": [
      "Evolution"
    ]
  },
  {
    "objectID": "line.html",
    "href": "line.html",
    "title": "27  Line",
    "section": "",
    "text": "27.1 PKG\nShow/Hide Code\nlibrary(tidyverse) # 数据处理与可视化的核心包集合\nlibrary(hrbrthemes) # 主题样式\nlibrary(plotly) # 交互式图表\nlibrary(patchwork) # 用于组合多个ggplot2图表\nlibrary(babynames) # 包含美国婴儿姓名数据集\nlibrary(viridis) # 提供色盲友好的配色方案\nlibrary(latticeExtra) # 提供额外的lattice图形功能\nlibrary(gghighlight) # 用于高亮显示ggplot2图形中的特定数据点\nlibrary(ggiraph) # 用于创建交互式ggplot2图形\nlibrary(RColorBrewer) # 提供调色板\nlibrary(plotrix) # 提供绘图功能",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Line</span>"
    ]
  },
  {
    "objectID": "line.html#sec-line-what",
    "href": "line.html#sec-line-what",
    "title": "27  Line",
    "section": "27.2 What",
    "text": "27.2 What\n\n27.2.1 Definition\n与散点图相似，但测量点是按顺序排列的\n以下示例展示了 2013 年 4 月至 2018 年 4 月期间 比特币价格的演变情况。数据来自 CoinMarketCap 网站\n\n\nShow/Hide Code\n# 读取比特币价格数据，数据以空格分隔\ndf &lt;- read_delim(\n    \"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv\",\n    delim = \" \"\n)\n\n# 转换日期格式，并绘制比特币价格随时间变化的折线图\ndf |&gt;\n    mutate(date = as.Date(date)) |&gt; # 转换日期列为Date类型\n    ggplot(aes(x = date, y = value)) + # 设置x轴为日期，y轴为价格\n    geom_line(color = \"#69b3a2\") + # 绘制折线，设置颜色\n    ggtitle(\"Evolution of Bitcoin price\") + # 添加标题\n    ylab(\"bitcoin price ($)\") + # 设置y轴标签\n    theme_ipsum() # 应用hrbrthemes主题\n\n\n\n\n\n比特币价格随时间变化的折线图\n\n\n\n\n\n\n27.2.2 What for\n线形图可以用来展示一个（如上例）或多个变量的演变情况。\n1880 年至 2015 年间美国三个婴儿名字频率的演变情况:\n\n\nShow/Hide Code\n# 从 github 加载 babynames 数据集，并筛选出名字为 Ashley、Patricia、Helen 的女性婴儿\ndon &lt;- babynames |&gt;\n    dplyr::filter(name %in% c(\"Ashley\", \"Patricia\", \"Helen\")) |&gt; # 只保留指定名字\n    dplyr::filter(sex == \"F\") # 只保留女性\n\n# 绘制折线图，展示不同名字随年份的变化趋势\ndon |&gt;\n    ggplot(aes(x = year, y = n, group = name, color = name)) + # x轴为年份，y轴为人数，按名字分组和着色\n    geom_line() + # 绘制折线\n    scale_color_viridis(discrete = TRUE) + # 使用色盲友好的配色方案\n    ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n    hrbrthemes::theme_ipsum() + # 应用 hrbrthemes 主题\n    labs(y = \"Number of babies born\") # 设置 y 轴标签\n\n\n\n\n\n1880 年至 2015 年间美国三个女性婴儿名字频率的演变\n\n\n\n\n但是这种情况其实仅适用于分组不多的情况。\n\n\n27.2.3 Variation\n如果数据点的数量较少，建议用点来表示每个单独的观测值。这样可以了解观测值具体是在何时进行的：\n\n\nShow/Hide Code\ndf |&gt;\n    tail(10) |&gt; # 取数据的最后10行\n    ggplot(aes(x = date, y = value)) + # 设置x轴为日期，y轴为比特币价格\n    geom_line(color = \"#69b3a2\") + # 绘制折线，颜色为#69b3a2\n    geom_point(color = \"#69b3a2\", size = 4) + # 绘制散点，颜色为#69b3a2，点大小为4\n    labs(\n        x = \"Date\", # 设置x轴标签\n        y = \"Bitcoin Price ($)\", # 设置y轴标签\n        title = \"Bitcoin Price Evolution in the Last 10 Days\" # 设置图表标题\n    )\n\n\n\n\n\n展示比特币价格最后10天的折线与散点图\n\n\n\n\n在散点图中，线也用于显示趋势:\n\n\nShow/Hide Code\nggplot(mpg, aes(displ, hwy)) +\n    geom_point() +\n    geom_smooth(color = \"#69b3a2\") +\n    theme_ipsum()\n\n\n\n\n\n给散点图加上拟合线\n\n\n\n\n\n\n27.2.4 注意\n\nY是否从0开始？ Y 轴截断会夸大差距，商业上常用\n\n\n\nShow/Hide Code\n# 左图：Y轴从0开始\ndf |&gt;\n    mutate(date = as.Date(date)) |&gt; # 转换日期格式\n    tail(10) |&gt;\n    ggplot(aes(x = date, y = value)) + # 设置x轴为日期，y轴为比特币价格\n    geom_line(color = \"#69b3a2\") + # 绘制折线，颜色为#69b3a2\n    geom_point(color = \"#69b3a2\", size = 4) + # 绘制散点，颜色为#69b3a2，点大小为4\n    ggtitle(\"Not cuting\") + # 设置图表标题\n    ylab(\"bitcoin price ($)\") + # 设置y轴标签\n    theme_ipsum() + # 应用hrbrthemes主题\n    ylim(0, 10000) # 设置y轴范围从0到10000\n\n# 右图：Y轴截断\ndf |&gt;\n    mutate(date = as.Date(date)) |&gt; # 转换日期格式\n    tail(10) |&gt;\n    ggplot(aes(x = date, y = value)) + # 设置x轴为日期，y轴为比特币价格\n    geom_line(color = \"#69b3a2\") + # 绘制折线，颜色为#69b3a2\n    geom_point(color = \"#69b3a2\", size = 4) + # 绘制散点，颜色为#69b3a2，点大小为4\n    ggtitle(\"Cuting\") + # 设置图表标题\n    ylab(\"bitcoin price ($)\") + # 设置y轴标签\n    theme_ipsum() # 应用hrbrthemes主题\n\n\n\n\n\n\n\n左图：Y轴从 0 开始\n\n\n\n\n\n\n\n右图：Y轴截断\n\n\n\n\n\n\n比较两种Y轴设置对比特币价格走势的影响。\n\n\n\n\n比较两个不同变量的变化趋势，不要使用双轴。（双轴会根据你应用在轴上的范围显示非常不同的结果）\n选择合适的宽高比，极端比例会使图表难以阅读。\n警惕意大利面条图（线条太多难以阅读）\n\n\n\n27.2.5 意大利面\n\n\nShow/Hide Code\n# 加载所需包\nlibrary(tidyverse) # 数据处理与可视化核心包\nlibrary(hrbrthemes) # 美化主题\nlibrary(viridis) # 色盲友好配色\nlibrary(babynames) # 美国婴儿名字数据集\n\n# 从 babynames 数据集中筛选指定的女性名字\ndata &lt;- babynames |&gt;\n    filter(\n        name %in% # 只保留以下名字\n            c(\n                \"Mary\",\n                \"Emma\",\n                \"Ida\",\n                \"Ashley\",\n                \"Amanda\",\n                \"Jessica\",\n                \"Patricia\",\n                \"Linda\",\n                \"Deborah\",\n                \"Dorothy\",\n                \"Betty\",\n                \"Helen\"\n            )\n    ) |&gt;\n    filter(sex == \"F\") # 只保留女性\n\n# 绘制意大利面图（多线折线图）\ndata |&gt;\n    ggplot(aes(\n        x = year, # x 轴为年份\n        y = n, # y 轴为出生人数\n        group = name, # 按名字分组\n        color = name # 按名字着色\n    )) +\n    geom_line() + # 绘制折线\n    scale_color_viridis(discrete = TRUE) + # 使用 viridis 配色\n    theme(\n        legend.position = \"none\", # 不显示图例\n        plot.title = element_text(size = 14) # 设置标题字体大小\n    ) +\n    ggtitle(\"A spaghetti chart of baby names popularity\") + # 添加标题\n    theme_ipsum() # 应用 hrbrthemes 主题\n\n\n\n\n\n意大利面图：展示 1880-2015 年间美国多个女性婴儿名字的流行趋势\n\n\n\n\n通过高亮来突出重点：\n\n\nShow/Hide Code\ndata |&gt; # 数据集，包含婴儿名字及年份、数量等信息\n    mutate(\n        highlight = ifelse(name == \"Amanda\", \"Amanda\", \"Other\") # 新增 highlight 列，Amanda 为 \"Amanda\"，其他为 \"Other\"\n    ) |&gt;\n    ggplot(aes(\n        x = year, # x 轴为年份\n        y = n, # y 轴为出生人数\n        group = name, # 按名字分组\n        color = highlight # 按 highlight 分组着色\n    )) +\n    geom_line(aes(size = highlight)) + # 绘制折线，线宽根据 highlight 分组\n    scale_color_manual(\n        values = c(\"#69b3a2\", \"lightgrey\") # 手动设置颜色：Amanda 为绿色，其他为浅灰\n    ) +\n    scale_size_manual(\n        values = c(1.5, 0.2) # 手动设置线宽：Amanda 为 1.5，其它为 0.2\n    ) +\n    theme(legend.position = \"none\") + # 不显示图例\n    ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    geom_label(\n        x = 1990, # 注释标签的 x 坐标（年份）\n        y = 55000, # 注释标签的 y 坐标（人数）\n        label = \"Amanda reached 3550\\nbabies in 1970\", # 注释内容，\\n 换行\n        size = 4, # 注释字体大小\n        color = \"#69b3a2\" # 注释字体颜色\n    ) +\n    theme(\n        legend.position = \"none\", # 不显示图例\n        plot.title = element_text(size = 14) # 设置标题字体大小\n    )\n\n\n\n\n\n高亮 Amanda 名字的流行趋势，并添加注释\n\n\n\n\n通过分面来突出重点：\n\n\nShow/Hide Code\ndata |&gt; # 数据集，包含婴儿名字及年份、数量等信息\n    ggplot(\n        aes(\n            x = year, # x 轴为年份\n            y = n, # y 轴为出生人数\n            group = name, # 按名字分组\n            fill = name # 按名字填充颜色\n        )\n    ) +\n    geom_area() + # 绘制面积图\n    scale_fill_viridis(discrete = TRUE) + # 使用 viridis 色盲友好配色方案，discrete = TRUE 表示离散型变量\n    theme(legend.position = \"none\") + # 不显示图例\n    ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    theme(\n        legend.position = \"none\", # 不显示图例\n        panel.spacing = unit(0.1, \"lines\"), # 分面之间的间距\n        strip.text.x = element_text(size = 8), # 分面标题字体大小\n        plot.title = element_text(size = 14) # 图表标题字体大小\n    ) +\n    facet_wrap(~name) # 按名字分面，每个名字一个子图\n\n\n\n\n\n1880-2015 年间美国多个女性婴儿名字的流行趋势（每个名字单独分面）\n\n\n\n\n通过高亮+分面来突出重点：\n\n\nShow/Hide Code\n# tmp 数据集：复制 data，并新增 name2 列（等于 name），用于后续分组\ntmp &lt;- data |&gt;\n    mutate(name2 = name)\n\n# 绘制意大利面图\ntmp |&gt;\n    ggplot(aes(x = year, y = n)) + # year 为 x 轴，n 为 y 轴\n    # 绘制所有名字的灰色线（去掉 name，按 name2 分组）\n    geom_line(\n        data = tmp |&gt; dplyr::select(-name), # 去除 name 列，避免颜色映射\n        aes(group = name2), # 按 name2 分组\n        color = \"grey\", # 线条颜色为灰色\n        size = 0.5, # 线宽为 0.5\n        alpha = 0.5 # 透明度为 0.5\n    ) +\n    # 绘制当前分面名字的高亮线\n    geom_line(\n        aes(color = name), # 按 name 着色（用于 facet_wrap 高亮）\n        color = \"#69b3a2\", # 线条颜色为绿色\n        size = 1.2 # 线宽为 1.2\n    ) +\n    scale_color_viridis(discrete = TRUE) + # 使用 viridis 色盲友好配色方案\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    theme(\n        legend.position = \"none\", # 不显示图例\n        plot.title = element_text(size = 14), # 标题字体大小\n        panel.grid = element_blank() # 去除网格线\n    ) +\n    ggtitle(\"A spaghetti chart of baby names popularity\") + # 添加标题\n    facet_wrap(~name) # 按名字分面，每个名字一个子图\n\n\n\n\n\n1880-2015 年间美国多个女性婴儿名字的流行趋势，灰色为其他名字，高亮绿色为当前分面名字\n\n\n\n\n通过交互来解决意大利面 (部分交互效果 Quarto 中没有正确加载):\n\n\nShow/Hide Code\n# library\nlibrary(ggplot2) # 用于数据可视化\nlibrary(ggiraph) # 用于生成交互式 ggplot2 图形\nlibrary(tidyverse) # 数据处理与可视化核心包\n\n# 读取数据\ndata &lt;- read.csv(\n    \"https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/dataConsumerConfidence.csv\"\n) |&gt;\n    mutate(date = lubridate::my(Time)) |&gt;\n    select(-Time) |&gt;\n    pivot_longer(!date, names_to = \"country\", values_to = \"value\") |&gt;\n    na.omit() |&gt;\n    mutate(country = as.factor(country))\n\n# 绘制交互式折线图\nplot &lt;- data |&gt;\n    ggplot(\n        mapping = aes(\n            x = date, # x 轴为日期\n            y = value, # y 轴为消费者信心指数\n            color = country, # 按国家分组着色\n            tooltip = country, # 鼠标悬停时显示国家名\n            data_id = country # 交互高亮的分组依据\n        )\n    ) +\n    geom_line_interactive(hover_nearest = TRUE) + # 绘制可交互折线，hover_nearest=TRUE 表示悬停高亮最近的线\n    theme_classic() # 使用经典主题\n\n\ninteractive_plot &lt;- girafe(ggobj = plot) # 输出交互式图形\ninteractive_plot\n\n\n\n\n交互式意大利面图：展示多个国家消费者信心指数随时间的变化（可悬停高亮）\n\n\n定制 CSS：\n\n\nShow/Hide Code\ninteractive_plot2 &lt;- girafe_options(\n    interactive_plot,\n\n    # 设置鼠标悬停时的样式：填充色为浅黄色，描边为黑色，鼠标为指针\n    opts_hover(css = \"fill:#ffe7a6;stroke:black;cursor:pointer;\"),\n\n    # 设置选中时的样式：单选，填充色为红色，描边为黑色\n    opts_selection(type = \"single\", css = \"fill:red;stroke:black;\"),\n    opts_toolbar(saveaspng = FALSE) # 工具栏设置：禁用“保存为 PNG”按钮\n)\ninteractive_plot2\n\n\n\n\n自定义交互式意大利面图的悬停和选中样式，禁用保存为 PNG 工具按钮\n\n\n高亮某条线：\n\n\nShow/Hide Code\ninteractive_plot2 &lt;- girafe_options(\n    interactive_plot,\n    # opts_hover: 设置鼠标悬停时的 CSS 样式\n    #   css = \"stroke:#69B3A2; stroke-width: 3px; transition: all 0.3s ease;\"\n    #   - stroke: 线条颜色为 #69B3A2\n    #   - stroke-width: 线宽加粗为 3px\n    #   - transition: 所有变化 0.3 秒内平滑过渡\n    opts_hover(css = \"stroke:#69B3A2; stroke-width: 3px; transition: all 0.3s ease;\"),\n    # opts_hover_inv: 设置未悬停（非高亮）线条的 CSS 样式\n    #   \"opacity:0.5;filter:saturate(10%);\"\n    #   - opacity: 透明度降低为 0.5\n    #   - filter:saturate(10%): 饱和度降低为 10%\n    opts_hover_inv(\"opacity:0.5;filter:saturate(10%);\"),\n    # opts_toolbar: 工具栏设置\n    #   saveaspng = FALSE 禁用“保存为 PNG”按钮\n    opts_toolbar(saveaspng = FALSE)\n)\ninteractive_plot2\n\n\n\n\n自定义交互式意大利面图的高亮线样式，鼠标悬停时线条加粗变色，未悬停线条变淡，禁用保存为 PNG 工具按钮\n\n\n更进一步：\n\n\nShow/Hide Code\nhover_css &lt;- \"\n    fill: #ffe7a6;                      # 鼠标悬停时填充色为浅黄色\n    fill-opacity: 0.5;                  # 填充透明度为0.5\n    stroke: black;                      # 描边颜色为黑色\n    stroke-width: 7px;                  # 描边宽度为7像素\n    stroke-dasharray: 5,5;              # 虚线样式，5像素实线+5像素空白\n    transition: fill-opacity 0.5s, stroke-width 0.5s, stroke-dasharray 0.5s, filter 0.5s; # 平滑过渡动画\n    filter: drop-shadow(0 0 5px rgba(0,0,0,0.5)); # 添加阴影效果\n\"\n\ninteractive_plot2 &lt;- girafe_options(\n    interactive_plot,\n    opts_hover(css = hover_css), # 设置鼠标悬停时的CSS样式\n    opts_toolbar(saveaspng = FALSE) # 工具栏设置：禁用“保存为 PNG”按钮\n)\ninteractive_plot2\n\n\n\n\n自定义交互式意大利面图的悬停样式，鼠标悬停时线条变色加粗并添加阴影，禁用保存为 PNG 工具按钮\n\n\n把 CSS 和其它的 ggiraph 特性组合：\n\n\nShow/Hide Code\nplot &lt;- data |&gt;\n    ggplot(mapping = aes(\n        x = date,\n        y = value,\n        color = country,\n        group = country,\n        tooltip = paste(\"Country:\", country, \"&lt;br&gt;Date:\", date, \"&lt;br&gt;Value:\", round(value, 2)),\n        data_id = country\n    )) +\n    geom_line_interactive(size = 1.2, hover_nearest = TRUE) +\n    geom_point_interactive(aes(size = value), alpha = 0.7) +\n    scale_color_viridis_d() +\n    scale_size_continuous(range = c(1, 2)) +\n    theme_minimal(base_size = 14) +\n    labs(\n        title = \"Interactive Country Data Visualization\",\n        subtitle = \"Try to hover and click on the lines!\",\n        caption = \"R-Graph-Gallery.com\",\n        x = \"Date\",\n        y = \"Consumer Confidence\"\n    ) +\n    theme(\n        plot.title = element_text(hjust = 0.5, size = 20, face = \"bold\"),\n        plot.subtitle = element_text(hjust = 0.5, size = 16, face = \"italic\"),\n        legend.position = \"none\",\n        panel.grid.minor = element_blank(),\n        panel.background = element_rect(fill = \"ivory\", color = NA),\n        plot.background = element_rect(fill = \"ivory\", color = NA)\n    )\n\ninteractive_plot &lt;- girafe(ggobj = plot)\n\nhover_css &lt;- \"\n  stroke: black;\n  stroke-width: 1px;\n  r: 8px;\n  transition: all 0.3s ease;\n\"\n\ntooltip_css &lt;- \"\n  background-color: #2C3E50;\n  color: #ECF0F1;\n  padding: 10px;\n  border-radius: 5px;\n  font-family: 'Arial', sans-serif;\n  font-size: 14px;\n  box-shadow: 0px 0px 10px rgba(0,0,0,0.5);\n\"\n\ninteractive_plot &lt;- girafe_options(\n    interactive_plot,\n    opts_hover(css = hover_css),\n    opts_tooltip(css = tooltip_css, use_fill = TRUE),\n    opts_selection(type = \"multiple\", only_shiny = FALSE),\n    opts_zoom(min = 0.5, max = 2),\n    opts_toolbar(saveaspng = TRUE, position = \"topright\", pngname = \"country_data_plot\"),\n    opts_sizing(rescale = TRUE)\n)\ninteractive_plot",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Line</span>"
    ]
  },
  {
    "objectID": "line.html#ggplot2",
    "href": "line.html#ggplot2",
    "title": "27  Line",
    "section": "27.3 ggplot2",
    "text": "27.3 ggplot2\n\n27.3.1 基本\n\n\nShow/Hide Code\n# 创建示例数据\nxValue &lt;- 1:10\nyValue &lt;- cumsum(rnorm(10))\ndata &lt;- data.frame(xValue, yValue)\n\n# 绘图\nggplot(data, aes(x = xValue, y = yValue)) +\n    geom_line()\n\n\n\n\n\n使用 geom_line() 绘制简单的折线图\n\n\n\n\n\n\n27.3.2 线外观\n\n\nShow/Hide Code\nggplot(data, aes(x = xValue, y = yValue)) +\n    geom_line(\n        color = \"#69b3a2\", # 线条颜色\n        linewidth = 2, # 线条粗细，旧版是 size\n        alpha = 0.9, # 线条透明度\n        linetype = 2 # 线条类型\n    ) +\n    theme_ipsum()\n\n\n\n\n\n使用 geom_line()绘制带有自定义线条样式的折线图\n\n\n\n\n\n\n27.3.3 对数\nscale_y_log10() 可以将 y 轴进行 log10 变换，适用于数据范围较大或呈指数增长的情况。\n\nShow/Hide Code\ndata &lt;- data.frame(\n    x = seq(10, 100), # x 变量，取值从10到100\n    y = seq(10, 100) / 2 + rnorm(90) # y 变量，等差递增并加上正态噪声\n)\n\n# 绘制普通折线图\nggplot(data, aes(x = x, y = y)) +\n    geom_line()\n\n# 绘制对数折线图\nggplot(data, aes(x = x, y = y)) +\n    geom_line() + # 添加折线\n    scale_y_log10( # y 轴使用 log10 变换\n        breaks = c(1, 5, 10, 15, 20, 50, 100), # 指定 y 轴刻度\n        limits = c(1, 100) # 设置 y 轴显示范围\n    )\n\n\n\n\n\n\n\n左图：y 轴从 1 到 100 的线性刻度\n\n\n\n\n\n\n\n右图：y 轴使用 log10 变换\n\n\n\n\n\n\n使用对数坐标轴绘制折线图，展示 y 轴 log10 变换效果\n\n\n\n\n\n27.3.4 date\n\n\nShow/Hide Code\n# df 是前文从 github 加载的数据\ndf |&gt;\n    mutate(date = as.Date(date)) |&gt; # 转化为时间\n    tail(10) |&gt;\n    ggplot(aes(x = date, y = value)) +\n    geom_line(color = \"grey\") +\n    geom_point(shape = 21, color = \"black\", fill = \"#69b3a2\", size = 6) +\n    theme_ipsum() +\n    ggtitle(\"Evolution of bitcoin price\")\n\n\n\n\n\n使用日期数据绘制折线图\n\n\n\n\n\n\n27.3.5 group\n\n\nShow/Hide Code\ndon &lt;- babynames |&gt;\n    filter(name %in% c(\"Ashley\", \"Patricia\", \"Helen\")) |&gt; # 只保留名字为 Ashley、Patricia、Helen 的记录\n    filter(sex == \"F\") # 只保留女性婴儿数据\n\n# 绘制分组折线图\ndon |&gt;\n    ggplot(aes(\n        x = year, # x 轴为年份\n        y = n, # y 轴为出生人数\n        # group = name,     # 按名字分组，有color设置就不需要这句\n        color = name # 按名字着色\n    )) +\n    geom_line() # 绘制折线\n\n\n\n\n\n分组折线图：展示 1880 年至 2015 年间美国女性婴儿名字 Ashley、Patricia、Helen 的流行趋势\n\n\n\n\n\n\nShow/Hide Code\ndon |&gt;\n    ggplot(\n        aes(\n            x = year, # x 轴为年份\n            y = n, # y 轴为出生人数\n            group = name, # 按名字分组\n            color = name # 按名字着色\n        )\n    ) +\n    geom_line() + # 绘制折线\n    scale_color_viridis(discrete = TRUE) + # 使用色盲友好的配色方案\n    ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    ylab(\"Number of babies born\") # 设置 y 轴标签\n\n\n\n\n\n美化的分组折线图：展示 1880 年至 2015 年间美国女性婴儿名字 Ashley、Patricia、Helen 的流行趋势\n\n\n\n\n\n\n27.3.6 Linear model\n\nShow/Hide Code\n# 创建示例数据\ndata &lt;- data.frame(\n    cond = rep(c(\"condition_1\", \"condition_2\"), each = 10),\n    my_x = 1:100 + rnorm(100, sd = 9),\n    my_y = 1:100 + rnorm(100, sd = 16)\n)\n\n# 绘制散点图，展示数据分布\nggplot(data, aes(x = my_x, y = my_y)) +\n    geom_point(color = \"#69b3a2\") + # 绘制散点，颜色为#69b3a2\n    theme_ipsum() # 应用 hrbrthemes 主题\n\n# 绘制散点图并添加线性趋势线（不显示置信区间）\nggplot(data, aes(x = my_x, y = my_y)) +\n    geom_point() + # 绘制散点\n    geom_smooth(method = lm, color = \"red\", se = FALSE) + # 添加线性拟合线，颜色为红色，不显示置信区间\n    theme_ipsum() # 应用 hrbrthemes 主题\n\n# 绘制散点图并添加线性趋势线及置信区间\nggplot(data, aes(x = my_x, y = my_y)) +\n    geom_point() + # 绘制散点\n    geom_smooth(method = lm, color = \"red\", fill = \"#69b3a2\", se = TRUE) + # 添加线性拟合线，颜色为红色，置信区间填充色为#69b3a2\n    theme_ipsum() # 应用 hrbrthemes 主题\n\n\n\n\n\n\n\n散点图\n\n\n\n\n\n\n\n线性趋势线\n\n\n\n\n\n\n\n线性趋势线及置信区间\n\n\n\n\n\n\n线性模型拟合：点图、线性趋势线、置信区间演示\n\n\n\n\n\n27.3.7 Annotation\n\n\nShow/Hide Code\n# 绘制比特币价格折线图，并添加注释\ndf |&gt;\n    mutate(date = as.Date(date)) |&gt; # 转换日期格式\n    ggplot(aes(x = date, y = value)) + # 设置 x 轴为日期，y 轴为价格\n    geom_line(color = \"#69b3a2\") + # 绘制折线，颜色为 #69b3a2\n    ylim(0, 22000) + # 设置 y 轴范围为 0 到 22000\n    annotate(\n        geom = \"text\", # 添加文本注释\n        x = as.Date(\"2017-01-01\"), # 注释文本的 x 坐标（日期）\n        y = 20089, # 注释文本的 y 坐标（价格）\n        label = \"Bitcoin price reached 20k $\\nat the end of 2017\" # 注释内容，\\n 表示换行\n    ) +\n    annotate(\n        geom = \"point\", # 添加点注释\n        x = as.Date(\"2017-12-17\"), # 点的 x 坐标（日期）\n        y = 20089, # 点的 y 坐标（价格）\n        size = 10, # 点的大小\n        shape = 21, # 点的形状（圆形，带边框）\n        fill = \"transparent\" # 填充色为透明\n    ) +\n    geom_hline(\n        yintercept = 5000, # 添加水平线，y=5000\n        color = \"orange\", # 水平线颜色为橙色\n        size = .5 # 水平线宽度\n    ) +\n    theme_ipsum() # 应用 hrbrthemes 主题\n\n\n\n\n\n比特币价格注释示例：突出 2017 年末价格峰值及 5000 美元水平线\n\n\n\n\n\n\n27.3.8 Highlight\n\n\nShow/Hide Code\nlibrary(gghighlight)\n\n# 构造示例数据\nset.seed(1)\nperiod &lt;- 100\ndf &lt;- data.frame(\n    Date = seq(as.Date(\"2020-01-01\"), by = \"day\", length.out = period),\n    Value = c(\n        cumsum(rnorm(period)),\n        cumsum(rnorm(period)),\n        cumsum(rnorm(period))\n    ),\n    Type = c(rep(\"a\", period), rep(\"b\", period), rep(\"c\", period))\n)\n\n\ndf |&gt;\n    ggplot(aes(x = Date, y = Value, color = Type)) +\n    geom_line()\n\n\n\n\n\nggplot2 默认线条\n\n\n\n\n\n\nShow/Hide Code\ndf |&gt;\n    ggplot(aes(x = Date, y = Value, color = Type)) +\n    geom_line() +\n    gghighlight(max(Value) &gt; 10)\n\n\n\n\n\n使用 gghighlight 高亮显示特定线\n\n\n\n\n\n\nShow/Hide Code\nggplot(df) +\n    geom_line(\n        aes(Date, Value, colour = Type), # 映射：x轴为Date，y轴为Value，按Type着色\n        linewidth = 1 # 线宽为1\n    ) +\n    gghighlight(\n        max(Value) &gt; 10, # 仅高亮 Value 最大值大于10的线\n        unhighlighted_params = list(\n            linewidth = 0.3, # 未高亮线宽为0.3\n            colour = alpha(\"blue\", 0.7), # 未高亮线为蓝色，透明度0.7\n            linetype = \"dashed\" # 未高亮线为虚线\n        )\n    )\n\n\n\n\n\n自定义未高亮线的样式\n\n\n\n\n\n\nShow/Hide Code\nlibrary(hrbrthemes)\nlibrary(patchwork)\n\n# plot1：高亮最大值大于10的线\nplot1 &lt;- ggplot(df) +\n    geom_line(\n        aes(Date, Value, colour = Type), # 映射：x轴为Date，y轴为Value，按Type着色\n        linewidth = 0.4, # 线宽为0.4\n        color = \"#4393C3\" # 线条颜色为#4393C3\n    ) +\n    gghighlight(\n        max(Value) &gt; 10, # 仅高亮 Value 最大值大于10的线\n        unhighlighted_params = list(\n            linewidth = 0.3, # 未高亮线宽为0.3\n            colour = alpha(\"darkred\", 0.7), # 未高亮线为深红色，透明度0.7\n            linetype = \"dotted\" # 未高亮线为点状线\n        ),\n        use_direct_label = FALSE # 不直接标注高亮线\n    ) +\n    theme_bw() +\n    xlab(\"\") +\n    ylab(\"\")\n\n# plot2：高亮最小值小于-10的线\nplot2 &lt;- ggplot(df) +\n    geom_line(\n        aes(Date, Value, colour = Type), # 映射：x轴为Date，y轴为Value，按Type着色\n        linewidth = 0.4, # 线宽为0.4\n        color = \"#4393C3\" # 线条颜色为#4393C3\n    ) +\n    gghighlight(\n        min(Value) &lt; -10, # 仅高亮 Value 最小值小于-10的线\n        unhighlighted_params = list(\n            linewidth = 0.3, # 未高亮线宽为0.3\n            colour = alpha(\"darkred\", 0.7), # 未高亮线为深红色，透明度0.7\n            linetype = \"dotted\" # 未高亮线为点状线\n        ),\n        use_direct_label = FALSE # 不直接标注高亮线\n    ) +\n    theme_bw()\n\n# 上下拼接两个图，并添加总标题\nplot1 / plot2 + plot_annotation(title = \"This chart is built with gghighlight\")\n\n\n\n\n\ngghighlight 高亮线示例：上图高亮最大值大于10的线，下图高亮最小值小于-10的线\n\n\n\n\n\n\n27.3.9 geom_ribbon()\n与 geom_smooth()类似（可自动计算阴影面积），但是 geom_ribbon() 需要自己输入阴影部分。\n\n\nShow/Hide Code\nhuron &lt;- data.frame(year = 1875:1972, level = as.vector(LakeHuron))\nggplot(huron, aes(x = year)) +\n    geom_ribbon(aes(ymin = level - 1, ymax = level + 1), fill = \"grey70\") +\n    geom_line(aes(y = level))\n\n\n\n\n\n使用 geom_ribbon() 绘制带阴影的折线图",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Line</span>"
    ]
  },
  {
    "objectID": "line.html#base-r",
    "href": "line.html#base-r",
    "title": "27  Line",
    "section": "27.4 Base R",
    "text": "27.4 Base R\n\n27.4.1 彩虹线\n\n\nShow/Hide Code\n# 加载 plotrix 包，提供 clplot 分段彩色折线图函数\nlibrary(plotrix)\n\n# 加载 RColorBrewer 包，生成配色方案\nlibrary(RColorBrewer)\nmy_colors &lt;- brewer.pal(8, \"Set2\") # 生成 8 种 Set2 调色板颜色\n\n# 创建数据\nx &lt;- seq(1, 100) # x 变量，取值为 1 到 100 的等差数列\ny &lt;- sin(x / 5) + x / 20 # y 变量，包含正弦波动和线性增长\n\n# 绘制分段彩色折线图\npar(mar = c(4, 4, 2, 2)) # 设置图形边距，下、左、上、右分别为 4,4,2,2\nclplot(\n    x, # x 轴数据\n    y, # y 轴数据\n    main = \"\", # 图表标题为空\n    lwd = 5, # 线宽为 5\n    levels = c(1, 2, 3, 4, 5), # 分段水平，决定颜色分段的区间\n    col = my_colors, # 使用自定义的颜色向量\n    showcuts = T, # 是否显示分段的切割线（TRUE 显示）\n    bty = \"n\" # 不绘制边框（box type = \"none\"）\n)\n\n\n\n\n\n使用 Base R 的 plotrix::clplot() 绘制分段彩色折线图，展示 x 与 y 的关系\n\n\n\n\n\n\n27.4.2 图例\n\n\nShow/Hide Code\n# 创建数据:\na &lt;- c(1:5)\nb &lt;- c(5, 3, 4, 5, 5)\nc &lt;- c(4, 5, 4, 3, 1)\n\n# 绘制基础折线图\nplot(\n    b ~ a, # y ~ x，b 随 a 变化\n    type = \"b\", # \"b\" 表示点和线都画\n    bty = \"l\", # 只画左和下边框\n    xlab = \"value of a\", # x 轴标签\n    ylab = \"value of b\", # y 轴标签\n    col = rgb(0.2, 0.4, 0.1, 0.7), # 线和点的颜色（带透明度）\n    lwd = 3, # 线宽\n    pch = 17, # 点的形状（17为实心三角）\n    ylim = c(1, 5) # y 轴范围\n)\nlines(\n    c ~ a, # 第二组数据 c 随 a 变化\n    col = rgb(0.8, 0.4, 0.1, 0.7), # 线和点的颜色\n    lwd = 3, # 线宽\n    pch = 19, # 点的形状（19为实心圆）\n    type = \"b\" # 点和线都画\n)\n\n# 添加图例\nlegend(\n    \"bottomleft\", # 图例位置：左下角\n    legend = c(\"Group 1\", \"Group 2\"), # 图例标签\n    col = c(rgb(0.2, 0.4, 0.1, 0.7), rgb(0.8, 0.4, 0.1, 0.7)), # 每组颜色\n    pch = c(17, 19), # 每组点的形状\n    bty = \"n\", # 图例无边框\n    pt.cex = 2, # 点的大小\n    cex = 1.2, # 字体大小\n    text.col = \"black\", # 文字颜色\n    horiz = F, # 垂直排列\n    inset = c(0.1, 0.1) # 图例与边界的距离\n)\n\n\n\n\n\n基础折线图：两组数据随 a 变化的趋势，并添加图例\n\n\n\n\n\n\n27.4.3 Y 轴反向\n\n\nShow/Hide Code\nx &lt;- seq(1, 29)^2 + runif(29, 0.98)\ny &lt;- abs(seq(1, 29) + 4 * runif(29, 0.4))\n\n# 绘制基础折线图\nplot(\n    y ~ x, # y ~ x，y 随 x 变化\n    ylim = rev(range(y)), # y 轴范围反转（递减显示）\n    lwd = 4, # 线宽为 4\n    type = \"l\", # \"l\" 表示只画线\n    bty = \"n\", # 不绘制边框（box type = \"none\"）\n    ylab = \"value of y (decreasing)\", # y 轴标签\n    col = rgb(0.2, 0.4, 0.6, 0.8) # 线条颜色（带透明度）\n)\n\n# 添加竖向灰色参考线\nabline(\n    v = seq(0, 900, 100), # v 指定竖线位置（从0到900，每隔100）\n    col = \"grey\", # 线条颜色为灰色\n    lwd = 0.6 # 线宽为0.6\n)\n\n\n\n\n\n基础折线图：y 轴反向显示，展示 y 随 x 递减趋势，并添加竖向灰色参考线\n\n\n\n\n\n\n27.4.4 拟合\n\n\nShow/Hide Code\nx &lt;- runif(300, min = -10, max = 10) # 生成300个均匀分布的随机数，范围[-10, 10]\ny &lt;- 0.1 * x^3 - 0.5 * x^2 - x + 10 + rnorm(length(x), 0, 8) # 构造三次多项式关系并加上正态噪声\n\n# 绘制散点图\nplot(\n    x, y,\n    col = rgb(0.4, 0.4, 0.8, 0.6), # 点的颜色（带透明度）\n    pch = 16, # 点的形状（16为实心圆）\n    cex = 1.3 # 点的大小\n)\n\n# 用三次多项式拟合数据\nmodel &lt;- lm(y ~ x + I(x^2) + I(x^3))\n\n# 可以查看模型特征\n# summary(model)\n# model$coefficients\n# summary(model)$adj.r.squared\n\n# 预测每个x对应的y拟合值，并添加拟合曲线到图中\nmyPredict &lt;- predict(model)\nix &lt;- sort(x, index.return = TRUE)$ix # 获取x排序后的索引\nlines(\n    x[ix], myPredict[ix],\n    col = 2, # 拟合曲线颜色（2为红色）\n    lwd = 2 # 线宽为2\n)\n\n# 在图中添加模型公式和拟合优度\ncoeff &lt;- round(model$coefficients, 2) # 四舍五入系数\ntext(\n    3, -70,\n    paste(\n        \"Model : \", coeff[1], \" + \", coeff[2], \"*x\", \"+\", coeff[3], \"*x^2\", \"+\", coeff[4], \"*x^3\", \"\\n\\n\",\n        \"P-value adjusted = \", round(summary(model)$adj.r.squared, 2)\n    )\n)\n\n\n\n\n\n多项式拟合示例：三次多项式拟合散点数据，并在图中显示拟合公式和拟合优度\n\n\n\n\n\n\n27.4.5 Cheatsheet\n\n\nShow/Hide Code\n# initialization\npar(mar = c(3, 3, 3, 3)) # 设置图形边距，下、左、上、右分别为3\nnum &lt;- 0\nnum1 &lt;- 0\nplot(\n    0, # x 坐标\n    0, # y 坐标\n    xlim = c(0, 21), # x 轴范围\n    ylim = c(0.5, 6.5), # y 轴范围\n    col = \"white\", # 点颜色为白色（背景）\n    yaxt = \"n\", # 不绘制 y 轴刻度\n    ylab = \"\", # y 轴标签为空\n    xlab = \"\" # x 轴标签为空\n)\n\n# 填充图形内容\nfor (i in seq(1, 20)) {\n    points(i, 1, pch = i, cex = 3) # pch 不同点形状\n    points(i, 2, col = i, pch = 16, cex = 3) # col 不同颜色\n    points(i, 3, col = \"black\", pch = 16, cex = i * 0.25) # cex 不同点大小\n\n    # lty 线型\n    if (i %in% c(seq(1, 18, 3))) {\n        num &lt;- num + 1\n        points(c(i, i + 2), c(4, 4), col = \"black\", lty = num, type = \"l\", lwd = 2) # lty 不同线型\n        text(i + 1.1, 4.15, num) # 标注线型编号\n    }\n\n    # type 和 lwd\n    if (i %in% c(seq(1, 20, 5))) {\n        num1 &lt;- num1 + 1\n        points(\n            c(i, i + 1, i + 2, i + 3),\n            c(5, 5, 5, 5),\n            col = \"black\",\n            type = c(\"p\", \"l\", \"b\", \"o\")[num1], # type 不同类型（点、线、点线、重叠）\n            lwd = 2\n        )\n        text(i + 1.1, 5.2, c(\"p\", \"l\", \"b\", \"o\")[num1]) # 标注 type 类型\n        points(\n            c(i, i + 1, i + 2, i + 3),\n            c(6, 6, 6, 6),\n            col = \"black\",\n            type = \"l\",\n            lwd = num1 # lwd 不同线宽\n        )\n        text(i + 1.1, 6.2, num1) # 标注线宽\n    }\n}\n\n# 添加 y 轴标签\naxis(\n    2, # y 轴\n    at = c(1, 2, 3, 4, 5, 6), # 位置\n    labels = c(\"pch\", \"col\", \"cex\", \"lty\", \"type\", \"lwd\"), # 标签\n    tick = TRUE, # 显示刻度线\n    col = \"black\", # 轴颜色\n    las = 1, # 标签水平显示\n    cex.axis = 0.8 # 轴标签大小\n)\n\n\n\n\n\n基础 R 绘图参数演示：pch、col、cex、lty、type、lwd 的效果",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Line</span>"
    ]
  },
  {
    "objectID": "line.html#双-y-轴",
    "href": "line.html#双-y-轴",
    "title": "27  Line",
    "section": "27.5 双 Y 轴",
    "text": "27.5 双 Y 轴\n\n27.5.1 双图\n\nShow/Hide Code\ndata &lt;- data.frame(\n    day = as.Date(\"2019-01-01\") + 0:99, # 生成100天的日期序列\n    temperature = runif(100) + seq(1, 100)^2.5 / 10000, # 温度数据，添加随机噪声和递增趋势\n    price = runif(100) + seq(100, 1)^1.5 / 10 # 价格数据，添加随机噪声和递减趋势\n)\n\n# 最基础的折线图，展示温度随时间变化\nggplot(data, aes(x = day, y = temperature)) + # x轴为日期，y轴为温度\n    geom_line(color = \"#69b3a2\", size = 2) + # 绘制折线，颜色为#69b3a2，线宽为2\n    ggtitle(\"Temperature: range 1-10\") + # 添加标题\n    theme_ipsum() # 应用hrbrthemes主题\n\n# 折线图，展示价格随时间变化\nggplot(data, aes(x = day, y = price)) + # x轴为日期，y轴为价格\n    geom_line(color = \"grey\", size = 2) + # 绘制折线，颜色为灰色，线宽为2\n    ggtitle(\"Price: range 1-100\") + # 添加标题\n    theme_ipsum() # 应用hrbrthemes主题\n\n\n\n\n\n\n\n温度随时间变化\n\n\n\n\n\n\n\n价格随时间变化\n\n\n\n\n\n\n双图展示温度/价格随时间变化的趋势\n\n\n\n\n\n27.5.2 ggplot2\nsec.axis() 添加第二个 Y 轴\n在下面的示例中，第二个 Y 轴简单地表示第一个 Y 轴乘以 10，这得益于 trans 参数提供的 ~.*10 数学关系。\n\n\nShow/Hide Code\nggplot(data, aes(x = day, y = temperature)) +\n    # 自定义 Y 轴比例\n    scale_y_continuous(\n        name = \"First Axis\", # 主 Y 轴名称\n        sec.axis = sec_axis( # 添加第二个 Y 轴\n            transform = ~ . * 10, # 副轴为主轴数值的 10 倍\n            name = \"Second Axis\" # 副 Y 轴名称\n        )\n    ) +\n    theme_ipsum() # 应用 hrbrthemes 主题\n\n\n\n\n\n双 Y 轴示例：主轴为温度，副轴价格为温度的 10 倍\n\n\n\n\n把变量曲线也画出来，（也进行了比例转换）\n\n\nShow/Hide Code\ncoeff &lt;- 10\n\nggplot(data, aes(x = day)) +\n    geom_line(aes(y = temperature)) + # 绘制温度折线，y 轴为 temperature\n    geom_line(aes(y = price / coeff)) + # 绘制价格折线，y 轴为 price/10，使其与温度在同一范围\n\n    scale_y_continuous(\n        # 主 Y 轴设置\n        name = \"First Axis\", # 主 Y 轴名称\n        # 添加第二个 Y 轴\n        sec.axis = sec_axis(\n            ~ . * coeff, # 副轴为主轴数值的 10 倍\n            name = \"Second Axis\" # 副 Y 轴名称\n        )\n    )\n\n\n\n\n\n双 Y 轴折线图：主轴为温度，副轴为价格（温度的10倍比例）\n\n\n\n\n再美化一下：\n\n\nShow/Hide Code\ncoeff &lt;- 10\n\n# 定义颜色常量\ntemperatureColor &lt;- \"#69b3a2\" # 温度线颜色\npriceColor &lt;- rgb(0.2, 0.6, 0.9, 1) # 价格线颜色\n\nggplot(data, aes(x = day)) +\n    # 绘制温度折线，y 轴为 temperature，线宽为2，颜色为 temperatureColor\n    geom_line(aes(y = temperature), size = 2, color = temperatureColor) +\n    # 绘制价格折线，y 轴为 price/coeff，线宽为2，颜色为 priceColor\n    geom_line(aes(y = price / coeff), size = 2, color = priceColor) +\n    # 设置主 y 轴和副 y 轴\n    scale_y_continuous(\n        name = \"Temperature (Celsius °)\", # 主 y 轴名称\n        sec.axis = sec_axis(~ . * coeff, name = \"Price ($)\") # 副 y 轴为主轴数值的 coeff 倍，名称为 Price ($)\n    ) +\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    theme(\n        axis.title.y = element_text(color = temperatureColor, size = 13), # 主 y 轴标题颜色和字号\n        axis.title.y.right = element_text(color = priceColor, size = 13) # 副 y 轴标题颜色和字号\n    ) +\n    ggtitle(\"Temperature down, price up\") # 添加标题\n\n\n\n\n\n双 Y 轴美化示例：主轴为温度（绿色），副轴为价格（蓝色），并自定义轴标题颜色和线条样式\n\n\n\n\n条形图+柱状图：\n\n\nShow/Hide Code\ncoeff &lt;- 10\n\n# 定义颜色常量\ntemperatureColor &lt;- \"#69b3a2\" # 温度条形颜色\npriceColor &lt;- rgb(0.2, 0.6, 0.9, 1) # 价格折线颜色\n\nggplot(head(data, 80), aes(x = day)) +\n\n    # 绘制温度的条形图\n    geom_bar(\n        aes(y = temperature), # y 轴为温度\n        stat = \"identity\", # 使用原始数值绘制条形\n        size = .1, # 边框线宽\n        fill = temperatureColor, # 填充色\n        color = \"black\", # 边框颜色\n        alpha = .4 # 透明度\n    ) +\n    # 绘制价格的折线图（已缩放）\n    geom_line(\n        aes(y = price / coeff), # y 轴为价格/系数\n        size = 2, # 线宽\n        color = priceColor # 线条颜色\n    ) +\n\n    # 设置主 y 轴和副 y 轴\n    scale_y_continuous(\n        name = \"Temperature (Celsius °)\", # 主 y 轴名称\n        sec.axis = sec_axis(~ . * coeff, name = \"Price ($)\") # 副 y 轴为主轴数值的 coeff 倍，名称为 Price ($)\n    ) +\n    theme_ipsum() + # 应用 hrbrthemes 主题\n\n    # 自定义 y 轴标题颜色和字号\n    theme(\n        axis.title.y = element_text(color = temperatureColor, size = 13), # 主 y 轴标题样式\n        axis.title.y.right = element_text(color = priceColor, size = 13) # 副 y 轴标题样式\n    ) +\n    ggtitle(\"Temperature down, price up\") # 添加标题\n\n\n\n\n\n双 Y 轴混合图：主轴为温度（条形图），副轴为价格（折线图），并自定义轴标题颜色和线条样式\n\n\n\n\n\n\n27.5.3 latticeExtra\n\n\nShow/Hide Code\nlibrary(latticeExtra)\n\n# 创建数据\nset.seed(1) # 设置随机种子，保证结果可复现\nx &lt;- 1:100 # x 变量，取值为 1 到 100\nvar1 &lt;- cumsum(rnorm(100)) # var1，正态分布随机数累加，模拟随机游走\nvar2 &lt;- var1^2 # var2，var1 的平方\ndata &lt;- data.frame(x, var1, var2) # 合并为数据框\n\n# 绘制基础折线图\nxyplot(\n    var1 + var2 ~ x, # 公式，表示 var1 和 var2 都随 x 变化\n    data, # 数据来源\n    type = \"l\", # type = \"l\" 表示折线图（line）\n    col = c(\"steelblue\", \"#69b3a2\"), # 线条颜色\n    lwd = 2 # 线条宽度\n)\n\n\n\n\n\nlatticeExtra 双变量折线图：展示 var1 和 var2 随 x 的变化趋势\n\n\n\n\n\n\nShow/Hide Code\n# 加载 latticeExtra 包，支持双 Y 轴绘图\nlibrary(latticeExtra)\n\n# 创建数据\nset.seed(1) # 设置随机种子，保证结果可复现\nx &lt;- 1:100 # x 变量，取值为 1 到 100\nvar1 &lt;- cumsum(rnorm(100)) # var1，正态分布随机数累加，模拟随机游走\nvar2 &lt;- var1^2 # var2，var1 的平方\ndata &lt;- data.frame(x, var1, var2) # 合并为数据框\n\n# 分别为 var1 和 var2 构建单独的折线图对象\nobj1 &lt;- xyplot(\n    var1 ~ x, # 公式，y 轴为 var1，x 轴为 x\n    data, # 数据来源\n    type = \"l\", # type = \"l\" 表示折线图（line）\n    lwd = 2, # lwd = 2 设置线宽为 2\n    col = \"steelblue\" # col 设置线条颜色为 steelblue\n)\nobj2 &lt;- xyplot(\n    var2 ~ x, # 公式，y 轴为 var2，x 轴为 x\n    data, # 数据来源\n    type = \"l\", # 折线图\n    lwd = 2, # 线宽为 2\n    col = \"#69b3a2\" # 线条颜色为 #69b3a2\n)\n\n# 使用 doubleYScale 绘制双 Y 轴图\ndoubleYScale(\n    obj1, # 主 Y 轴图层（左侧，var1）\n    obj2, # 副 Y 轴图层（右侧，var2）\n    add.ylab2 = TRUE, # 是否添加第二个 Y 轴标签（TRUE 表示添加）\n    use.style = FALSE # 是否使用 latticeExtra 默认样式（FALSE 表示不使用）\n)\n\n\n\n\n\nlatticeExtra 双 Y 轴折线图：分别展示 var1 和 var2 随 x 的变化趋势，并在右侧添加第二个 Y 轴\n\n\n\n\n这个图表非常具有误导性：很容易得出两个变量都遵循相同模式的结论，这完全错误。\n在双轴图表中，一定要仔细检查哪个轴才是真正的轴。\nConclusion: don’t do it!\n如果你坚持，以下是添加图例到图表的方法：\n\n\nShow/Hide Code\n# 加载 latticeExtra 包，支持双 Y 轴绘图\nlibrary(latticeExtra)\n\n# 创建数据\nset.seed(1) # 设置随机种子，保证结果可复现\nx &lt;- 1:100 # x 变量，取值为 1 到 100\nvar1 &lt;- cumsum(rnorm(100)) # var1，正态分布随机数累加，模拟随机游走\nvar2 &lt;- var1^2 # var2，var1 的平方\ndata &lt;- data.frame(x, var1, var2) # 合并为数据框\n\n# 分别为 var1 和 var2 构建单独的折线图对象\nobj1 &lt;- xyplot(\n    var1 ~ x, # 公式，y 轴为 var1，x 轴为 x\n    data, # 数据来源\n    type = \"l\", # type = \"l\" 表示折线图（line）\n    lwd = 2 # lwd = 2 设置线宽为 2\n)\nobj2 &lt;- xyplot(\n    var2 ~ x, # 公式，y 轴为 var2，x 轴为 x\n    data, # 数据来源\n    type = \"l\", # 折线图\n    lwd = 2 # 线宽为 2\n)\n\n# 使用 doubleYScale 绘制双 Y 轴图，并添加图例\ndoubleYScale(\n    obj1, # 主 Y 轴图层（左侧，var1）\n    obj2, # 副 Y 轴图层（右侧，var2）\n    text = c(\"obj1\", \"obj2\"), # 图例文本，分别对应 obj1 和 obj2\n    add.ylab2 = TRUE # 是否添加第二个 Y 轴标签（TRUE 表示添加）\n)\n\n\n\n\n\nlatticeExtra 双 Y 轴折线图（含图例）：分别展示 var1 和 var2 随 x 的变化趋势，并在右侧添加第二个 Y 轴和图例",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Line</span>"
    ]
  },
  {
    "objectID": "line.html#pearl",
    "href": "line.html#pearl",
    "title": "27  Line",
    "section": "27.6 Pearl",
    "text": "27.6 Pearl\n\n\n\n每条线末端有精美标签\n\n\n\n\n\n折线图和堆叠面积图\n\n\n\n\n\n1976 年至今美国众议院中的政党优势\n\n\n\n\n\n伦敦不同区域能动物救助的演变\n\n\n\n\n\n近几年全球消费者信心的演变",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Line</span>"
    ]
  },
  {
    "objectID": "area.html",
    "href": "area.html",
    "title": "28  Area",
    "section": "",
    "text": "28.1 PKG\n跟折线图实在是很像, 区别是下面加了阴影(面积)\nShow/Hide Code\nlibrary(tidyverse)    # 加载tidyverse，包含数据处理和可视化常用包\n# library(dygraph)      # 加载dygraph，交互式时间序列可视化\nlibrary(dygraphs)     # 加载dygraphs，dygraph的扩展包\nlibrary(xts)          # 加载xts，处理时间序列数据\nlibrary(lubridate)    # 加载lubridate，处理日期和时间\nlibrary(babynames)   # 加载babynames，包含美国婴儿名字数据\nlibrary(ggpattern)   # 加载ggpattern，ggplot2的扩展包，用于添加图案填充\nlibrary(hrbrthemes)  # 加载hrbrthemes，提供美观的ggplot2主题",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Area</span>"
    ]
  },
  {
    "objectID": "area.html#ggplot2",
    "href": "area.html#ggplot2",
    "title": "28  Area",
    "section": "28.2 ggplot2",
    "text": "28.2 ggplot2\n\n28.2.1 基本\ngeom_area() 是用来绘制面积图的函数。\n\n\nShow/Hide Code\nlibrary(ggplot2)\n\n# 创建示例数据\nxValue &lt;- 1:50\nyValue &lt;- cumsum(rnorm(50))\ndata &lt;- data.frame(xValue,yValue)\n\n# 绘制面积图\nggplot(data, aes(x=xValue, y=yValue)) +\n  geom_area()\n\n\n\n\n\ngeom_area() 绘制面积图\n\n\n\n\n\n\nShow/Hide Code\nlibrary(ggplot2)      # 加载 ggplot2 包用于数据可视化\nlibrary(hrbrthemes)   # 加载 hrbrthemes 包用于美化图表主题\n\n# 创建数据\nxValue &lt;- 1:10\nyValue &lt;- abs(cumsum(rnorm(10)))  # 生成 10 个正的累积正态分布随机数\ndata &lt;- data.frame(xValue, yValue)  # 合并为数据框\n\n# 绘制面积图\nggplot(data, aes(x = xValue, y = yValue)) +           # 指定数据和映射关系\n    geom_area(fill = \"#69b3a2\", alpha = 0.4) +          # 添加半透明的面积\n    geom_line(color = \"#69b3a2\", size = 2) +            # 添加线条\n    geom_point(size = 3, color = \"#69b3a2\") +           # 添加数据点\n    theme_ipsum() +                                     # 应用 hrbrthemes 主题\n    ggtitle(\"Evolution of something\")                   # 添加标题\n\n\n\n\n\n使用 geom_area() 绘制带有线条和点的面积图，并应用 hrbrthemes 主题\n\n\n\n\n\n\n28.2.2 对数\n\nShow/Hide Code\n# 加载 ggplot2 包用于数据可视化\nlibrary(ggplot2)\n\n# 创建示例数据框，x 从 10 到 100，y 是 x/2 加上正态分布噪声\ndata &lt;- data.frame(\n    x = seq(10, 100),                       # x 变量，取值从 10 到 100\n    y = seq(10, 100) / 2 + rnorm(90)        # y 变量，x/2 加上正态噪声\n)\n\n# 绘制面积图(原始数据)\nggplot(data, aes(x = x, y = y)) +\n  geom_line() \n\n# 绘制面积图(对数)\nggplot(data, aes(x = x, y = y)) +         # 指定数据和映射关系\n    geom_line() +                           # 添加折线\n    scale_y_log10(                          # y 轴使用对数刻度\n        breaks = c(1, 5, 10, 15, 20, 50, 100),# 指定对数刻度的断点\n        limits = c(1, 100)                    # y 轴范围限制在 1 到 100\n    )\n\n\n\n\n\n\n\n原始数据,无对数转换\n\n\n\n\n\n\n\n对数坐标轴面积图\n\n\n\n\n\n\n使用对数坐标轴绘制面积图，展示 scale_y_log10 的用法\n\n\n\n\n\n28.2.3 堆叠\n\n\nShow/Hide Code\nlibrary(ggplot2)      # 加载 ggplot2 包用于数据可视化\nlibrary(dplyr)        # 加载 dplyr 包用于数据处理\n\n# 创建数据\ntime &lt;- as.numeric(rep(seq(1,7), each=7))   # x 轴变量，1 到 7，每个重复 7 次\nvalue &lt;- runif(49, 10, 100)                 # y 轴变量，49 个 10 到 100 之间的随机数\ngroup &lt;- rep(LETTERS[1:7], times=7)         # 分组变量，A 到 G，每组 7 个\ndata &lt;- data.frame(time, value, group)      # 合并为数据框\n\n# 绘制堆叠面积图\nggplot(data, aes(x = time, y = value, fill = group)) +  # 指定数据和映射关系，fill 按 group 分组\n    geom_area()                                         # 绘制堆叠面积\n\n\n\n\n\n使用 geom_area() 绘制堆叠面积图，展示不同分组的面积堆叠效果\n\n\n\n\n控制堆叠顺序:\n\nShow/Hide Code\n# 给定特定顺序：将 group 列转换为因子，并指定分组顺序\ndata$group &lt;- factor(data$group, levels = c(\"B\", \"A\", \"D\", \"E\", \"G\", \"F\", \"C\"))\n\n# 再次绘制面积图，分组顺序按照上面指定的 levels\nggplot(data, aes(x = time, y = value, fill = group)) +\n  geom_area() + \n  theme(legend.position = \"bottom\") # 将图例放在底部, 为了排版\n\n# 也可以按字母顺序排序分组\nmyLevels &lt;- levels(data$group) # 获取当前分组的 levels\ndata$group &lt;- factor(data$group, levels = sort(myLevels)) # 按字母顺序排序\nggplot(data, aes(x = time, y = value, fill = group)) +\n  geom_area() + \n  theme(legend.position = \"bottom\") # 将图例放在底部, 为了排版\n\n# 按某一时间点（如 time = 6）对应的 value 值进行排序\nmyLevels &lt;- data |&gt;\n  dplyr::filter(time == 6) |&gt; # 过滤出 time 等于 6 的数据\n  dplyr::arrange(value) # 按 value 升序排列\ndata$group &lt;- factor(data$group, levels = myLevels$group) # 按 value 排序后的分组顺序设置因子 levels\nggplot(data, aes(x = time, y = value, fill = group)) +\n  geom_area() + \n  theme(legend.position = \"bottom\") # 将图例放在底部, 为了排版\n\n\n\n\n\n\n\n指定分组顺序\n\n\n\n\n\n\n\n按字母顺序分组\n\n\n\n\n\n\n\n按特定时间点的数值排序分组\n\n\n\n\n\n\n控制堆叠面积图的分组顺序，并演示如何按指定顺序、字母顺序和特定时间点的数值排序\n\n\n\n比例堆叠面积图(每组的总和都是100):\n\n\nShow/Hide Code\nlibrary(dplyr)\n\n# 按 time 和 group 分组，计算每组的 value 总和，并计算每组所占比例\ndata &lt;- data |&gt;\n  group_by(time, group) |&gt; # 按时间和分组分组\n  summarise(n = sum(value)) |&gt; # 计算每组的 value 总和，命名为 n\n  mutate(percentage = n / sum(n)) # 计算每组所占比例\n\n# # 注意：如果不用 dplyr 也可以这样计算百分比\n# my_fun &lt;- function(vec){\n#     as.numeric(vec[2]) / sum(data$value[data$time == vec[1]]) * 100   # 计算每一行 value 占该时间点总和的百分比\n# }\n# data$percentage &lt;- apply(data, 1, my_fun)   # 对每一行应用函数，得到百分比\n\n# 绘制比例堆叠面积图\nggplot(data, aes(x = time, y = percentage, fill = group)) +\n  geom_area(alpha = 0.6, size = 1, colour = \"black\") # 绘制面积图，设置透明度、线宽和边框颜色\n\n\n\n\n\n使用新管道 |&gt; 语法绘制比例堆叠面积图，并详细注释每一步数据处理\n\n\n\n\n再更改一下颜色和样式:\n\n\nShow/Hide Code\n# 加载所需包\nlibrary(viridis)      # 提供高可读性的配色方案\nlibrary(hrbrthemes)   # 提供美观的 ggplot2 主题\n\n# 绘制堆叠面积图\nggplot(data, aes(x = time, y = value, fill = group)) +   # 指定数据和映射关系，fill 按 group 分组\n    geom_area(alpha = 0.6, size = .5, colour = \"white\") + # 绘制面积，设置透明度、边框宽度和颜色\n    scale_fill_viridis(discrete = TRUE) +                 # 使用 viridis 离散色板填充\n    theme_ipsum() +                                       # 应用 hrbrthemes 主题\n    ggtitle(\"The race between ...\")                       # 添加标题\n\n\n\n\n\n使用 viridis 调色板和 hrbrthemes 主题美化堆叠面积图\n\n\n\n\n分面:\n\n\nShow/Hide Code\nlibrary(babynames) # 加载 babynames 包，包含美国婴儿名字数据\n\n# 过滤出感兴趣的名字和性别为女性的数据\ndata &lt;- babynames |&gt;\n    dplyr::filter(name %in% c(\"Amanda\", \"Jessica\", \"Patricia\", \"Deborah\", \"Dorothy\", \"Helen\")) |&gt; # 只保留指定名字\n    dplyr::filter(sex == \"F\") # 只保留女性\n\n# 绘制分面堆叠面积图\ndata |&gt;\n    ggplot(aes(x = year, y = n, group = name, fill = name)) +   # year为x轴，n为y轴，按name分组和填充\n        geom_area() +                                           # 绘制面积图\n        scale_fill_viridis(discrete = TRUE) +                   # 使用viridis调色板\n        theme(legend.position = \"none\") +                       # 不显示图例\n        ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n        theme_ipsum() +                                         # 应用hrbrthemes主题\n        theme(\n            legend.position = \"none\",                             # 再次确保不显示图例\n            panel.spacing = unit(0.1, \"lines\"),                   # 分面之间的间距\n            strip.text.x = element_text(size = 8)                 # 分面标题字体大小\n        ) +\n        facet_wrap(~name, scale = \"free_y\")                     # 按名字分面，y轴自适应\n\n\n\n\n\n使用 facet_wrap 分面展示美国不同女性名字在过去 30 年的流行度变化\n\n\n\n\n\n\n28.2.4 渐变色\n\nShow/Hide Code\nlibrary(ggplot2)\nlibrary(ggpattern)\nlibrary(hrbrthemes)\n\n# 构造数据\nset.seed(0)\nn = 10\nx = 1:n\ny = x + rnorm(n = n, mean = 100, sd = 20)\ndf = data.frame(xValue = x, yValue = y)\n\n# 基础面积图，填充为浅蓝色，边框为黑色\nggplot(df, aes(x = xValue, y = yValue)) +\n    geom_area(colour = 'black', fill = 'lightblue')\n\n# 使用 ggpattern 的渐变填充，白色到红色\nggplot(df, aes(xValue, yValue)) +\n    geom_area_pattern(\n        data = df,\n        pattern = \"gradient\",         # 使用渐变填充\n        pattern_fill = \"white\",       # 渐变起始色为白色\n        pattern_fill2 = \"red\"         # 渐变结束色为红色\n    )\n\n# 使用 ggpattern 的渐变填充，透明到蓝色\nggplot(df, aes(xValue, yValue)) +\n    geom_area_pattern(\n        data = df,\n        pattern = \"gradient\",         # 使用渐变填充\n        fill = \"#00000010\",           # 主体填充为半透明黑色\n        pattern_fill = \"#00000010\",   # 渐变起始色为半透明黑色\n        pattern_fill2 = \"blue\"        # 渐变结束色为蓝色\n    )\n\n# 使用 ggpattern 的渐变填充，完全透明到品红色，并叠加线条和点\nggplot(df, aes(xValue, yValue)) +\n    geom_area_pattern(\n        data = df,\n        pattern = \"gradient\",         # 使用渐变填充\n        fill = \"#00000000\",           # 主体填充为完全透明\n        pattern_fill = \"#00000000\",   # 渐变起始色为完全透明\n        pattern_fill2 = \"magenta\"     # 渐变结束色为品红色\n    ) +\n    geom_line(data = df, colour = \"black\", linewidth = 0.8) + # 添加黑色线条\n    geom_point(shape = 16, size = 4.5, colour = \"purple\") +   # 添加紫色大点\n    geom_point(shape = 16, size = 2.5, colour = \"white\") +    # 添加白色小点覆盖\n    ggtitle(\"Area chart with a color gradient and line with data points\") + # 添加标题\n    theme_bw() +                                              # 使用黑白主题\n    theme(\n        plot.title = element_text(size = 14),                   # 标题字体大小\n        panel.border = element_blank(),                         # 去除面板边框\n        axis.line.x = element_line(),                           # x轴线\n        text = element_text(size = 12),                         # 全局字体大小\n        axis.ticks = element_blank(),                           # 去除坐标轴刻度\n        axis.text.y = element_text(margin = margin(0, 15, 0, 0, unit = \"pt\")) # y轴文字右侧留白\n    ) +\n    scale_alpha_identity() +                                  # 保持透明度\n    labs(x = \"\", y = \"\")                                      # 去除坐标轴标题\n\n\n\n\n\n\n\n浅蓝色填充，黑色边框\n\n\n\n\n\n\n\n渐变填充，白色到红色\n\n\n\n\n\n\n\n\n\n渐变填充，透明到蓝色\n\n\n\n\n\n\n\n渐变填充，完全透明到品红色，并叠加线条和点\n\n\n\n\n\n\n使用 ggpattern 绘制带有渐变色填充的面积图，演示不同渐变色和叠加线条、点的效果",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Area</span>"
    ]
  },
  {
    "objectID": "area.html#interactive",
    "href": "area.html#interactive",
    "title": "28  Area",
    "section": "28.3 Interactive",
    "text": "28.3 Interactive\n\n\nShow/Hide Code\n# 加载所需的 R 包\nlibrary(dygraphs)      # 加载 dygraphs 包用于交互式时间序列可视化\nlibrary(xts)           # 加载 xts 包用于数据框与 xts 格式转换\nlibrary(tidyverse)     # 加载 tidyverse 包用于数据处理\nlibrary(lubridate)     # 加载 lubridate 包用于处理日期和时间\n\n# 读取数据\npath = 'https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/bike.csv'\ndata &lt;- read.table(path, header=TRUE, sep=\",\") |&gt; head(300) # 读取前 300 行数据\n\n# 检查变量类型（可选）\n# str(data)\n\n# 将 datetime 列从因子类型转换为日期时间格式\ndata$datetime &lt;- ymd_hms(data$datetime)\n\n# 创建 xts 对象，dygraphs 需要 xts 格式的数据\ndon &lt;- xts(x = data$count, order.by = data$datetime)\n\n# 绘制交互式面积图\np &lt;- dygraph(don) |&gt;\n    dyOptions(\n        labelsUTC = TRUE,         # 使用 UTC 时间标签\n        fillGraph = TRUE,         # 填充面积\n        fillAlpha = 0.1,          # 填充透明度\n        drawGrid = FALSE,         # 不显示网格线\n        colors = \"#D8AE5A\"        # 设置线条颜色\n    ) |&gt;\n    dyRangeSelector() |&gt;        # 添加范围选择器\n    dyCrosshair(direction = \"vertical\") |&gt; # 添加垂直十字准线\n    dyHighlight(\n        highlightCircleSize = 5,                # 高亮时圆圈大小\n        highlightSeriesBackgroundAlpha = 0.2,   # 高亮系列背景透明度\n        hideOnMouseOut = FALSE                  # 鼠标移出时不隐藏高亮\n    ) |&gt;\n    dyRoller(rollPeriod = 1)   # 添加滚动平均选择器，默认窗口为 1\n\np\n\n\n\n\n使用 dygraphs 包绘制交互式面积图",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Area</span>"
    ]
  },
  {
    "objectID": "area.html#base-r",
    "href": "area.html#base-r",
    "title": "28  Area",
    "section": "28.4 Base R",
    "text": "28.4 Base R\n\n\nShow/Hide Code\n# 创建数据框，x 从 1 到 10，y 为 1 到 15 的随机排列\ndata &lt;- data.frame(x=seq(1,10), y=sample(seq(1,15),10))\n\n# 先绘制折线图，type=\"o\" 表示点和线都画，lwd=3 线宽，pch=20 实心圆点\nplot(\n    data, \n    col=rgb(0.2,0.1,0.5,0.9), # 设置颜色为半透明深紫色\n    type=\"o\",                 # o 表示点和线都画\n    lwd=3,                    # 线宽为3\n    xlab=\"\",                  # 不显示x轴标题\n    ylab=\"size\",              # y轴标题为 size\n    pch=20                    # 点的形状为实心圆\n)\n\n# 用 polygon 填充面积\n# c(min(data$x), data$x, max(data$x))：x 轴从最小值到最大值，首尾闭合\n# c(min(data$y), data$y, min(data$y))：y 轴从最小值到最大值，首尾闭合\npolygon(\n    c(min(data$x), data$x, max(data$x)),   # x 坐标，首尾闭合\n    c(min(data$y), data$y, min(data$y)),   # y 坐标，首尾闭合\n    col=rgb(0.2,0.1,0.5,0.2),              # 填充为更透明的紫色\n    border=FALSE                           # 不显示边框\n)\n\n\n\n\n\n使用 Base R 绘制面积图，先绘制折线图，再用 polygon 填充面积",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Area</span>"
    ]
  },
  {
    "objectID": "area.html#pearl",
    "href": "area.html#pearl",
    "title": "28  Area",
    "section": "28.5 Pearl",
    "text": "28.5 Pearl\n\n\n\n每条线末端有精美标签\n\n\n\n\n\n折线图和堆叠面积图\n\n\n\n\n\n1976 年至今美国众议院中的政党优势\n\n\n\n\n\n伦敦不同区域能动物救助的演变\n\n\n\n\n\n近几年全球消费者信心的演变",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Area</span>"
    ]
  },
  {
    "objectID": "stacked-area.html",
    "href": "stacked-area.html",
    "title": "29  Stacked Area",
    "section": "",
    "text": "29.1 PKG\nline、Area、Stacked Area 的介绍及改进，见：Section 27.2\nShow/Hide Code\nlibrary(tidyverse) # tidyverse 包用于数据处理和可视化\nlibrary(babynames) # babynames 数据集\nlibrary(viridis) # viridis 包用于配色\nlibrary(hrbrthemes) # hrbrthemes 包用于美化主题\nlibrary(plotly) # plotly 包用于交互式图形",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Stacked Area</span>"
    ]
  },
  {
    "objectID": "stacked-area.html#stacked-area",
    "href": "stacked-area.html#stacked-area",
    "title": "29  Stacked Area",
    "section": "29.2 Stacked Area",
    "text": "29.2 Stacked Area\n美国 1880 年至 2015 年间婴儿名字的使用演变情况，六个名字被堆叠在一起表示：\n\n\nShow/Hide Code\nlibrary(tidyverse) # tidyverse 包用于数据处理和可视化\nlibrary(babynames) # babynames 数据集\nlibrary(viridis) # viridis 包用于配色\nlibrary(hrbrthemes) # hrbrthemes 包用于美化主题\nlibrary(plotly) # plotly 包用于交互式图形\n\n# 从 babynames 数据集中筛选指定的女性名字，并只保留女性数据\ndata &lt;- babynames |&gt;\n    filter(name %in% c(\"Amanda\", \"Jessica\", \"Patricia\", \"Deborah\", \"Dorothy\", \"Helen\")) |&gt;\n    filter(sex == \"F\")\n\n# 使用 ggplot2 绘制堆叠面积图\ndata |&gt;\n    ggplot(aes(x = year, y = n, fill = name)) + # year 为 x 轴，n 为 y 轴，按 name 填充\n    geom_area() + # 绘制面积图\n    scale_fill_viridis(discrete = TRUE) + # 使用 viridis 离散色板\n    theme(legend.position = \"none\") + # 不显示图例\n    ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    theme(legend.position = \"none\") # 再次确保图例不显示\n\n\n\n\n\n使用 geom_area() 展示美国女性常见名字随时间的流行趋势\n\n\n\n\nStacking 在数据可视化中是一种常见做法。它主要出现在三种高度相关的图形类型中：面积图、柱状图和流线图。\n缺点是不太观察研究每个组的情况。\n有个很严重的问题：视觉错觉：\n\n\nShow/Hide Code\ndon &lt;- data.frame(\n    x = rep(seq(2000, 2005), 3), # x 轴为 2000 到 2005，每组 6 个点，共 3 组\n    value = c(75, 73, 68, 57, 36, 0, 15, 16, 17, 18, 19, 20, 10, 11, 15, 25, 45, 80), # 每组的数值\n    group = rep(c(\"A\", \"B\", \"C\"), each = 6) # 分组变量，A、B、C 各 6 个\n)\n\n# 绘制堆叠面积图，演示视觉错觉\ndon |&gt;\n    ggplot(aes(x = x, y = value, fill = group)) + # x 轴为年份，y 轴为数值，按 group 填充颜色\n    geom_area() + # 绘制面积图\n    scale_fill_viridis(discrete = TRUE) + # 使用 viridis 离散色板\n    theme(legend.position = \"none\") + # 不显示图例\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    theme(legend.position = \"none\") # 再次确保图例不显示\n\n\n\n\n\n演示视觉错觉：底部组的面积真实变化与上方组的堆叠影响\n\n\n\n\n看起来很明显黄色类别增加了，紫色减少了，而绿色……更难阅读。第一眼看上去似乎略微减少了\n\n\nShow/Hide Code\ndon |&gt;\n    filter(group == \"B\") |&gt;\n    ggplot(aes(x = x, y = value, fill = group)) + # x 轴为年份，y 轴为数值，按 group 填充颜色\n    geom_area(fill = \"#22908C\") + # 绘制面积图，指定填充色\n    theme(legend.position = \"none\") + # 不显示图例\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    theme(legend.position = \"none\") # 再次确保图例不显示\n\n\n\n\n\n突出显示底部组B的真实变化，避免堆叠带来的视觉错觉\n\n\n\n\n哈哈哈！不仅没有减少，还增多了，视觉错觉！\n不如换成折线图：\n\n\nShow/Hide Code\n# 使用新管道 |&gt; 语法，绘制美国女性常见名字的流行趋势折线图\ndata |&gt;\n    ggplot(aes(x = year, y = n, group = name, color = name)) + # year 为 x 轴，n 为 y 轴，按 name 分组并着色\n    geom_line() + # 绘制折线图\n    scale_color_viridis(discrete = TRUE) + # 使用 viridis 离散色板\n    theme(legend.position = \"none\") + # 不显示图例\n    ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n    theme_ipsum() # 应用 hrbrthemes 主题\n\n\n\n\n\n使用折线图避免堆叠面积图带来的视觉错觉，清晰展示每个名字的真实变化趋势\n\n\n\n\n或者分面：\n\n\nShow/Hide Code\n# 绘制每个名字的面积图，并通过 facet_wrap 分面显示\ndata |&gt;\n    ggplot(aes(x = year, y = n, group = name, fill = name)) + # year 为 x 轴，n 为 y 轴，按 name 分组和填充\n    geom_area() + # 绘制面积图\n    scale_fill_viridis(discrete = TRUE) + # 使用 viridis 离散色板\n    theme(legend.position = \"none\") + # 不显示图例\n    ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    theme(\n        legend.position = \"none\", # 再次确保图例不显示\n        panel.spacing = unit(0.1, \"lines\"), # 设置分面之间的间距\n        strip.text.x = element_text(size = 8) # 设置分面标题字体大小\n    ) +\n    facet_wrap(~name, scale = \"free_y\") # 按名字分面，y 轴自适应\n\n\n\n\n\n使用 facet_wrap 分面展示每个名字的流行趋势，避免堆叠带来的视觉错觉",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Stacked Area</span>"
    ]
  },
  {
    "objectID": "stacked-area.html#ggplot2",
    "href": "stacked-area.html#ggplot2",
    "title": "29  Stacked Area",
    "section": "29.3 ggplot2",
    "text": "29.3 ggplot2\n\n29.3.1 基本\n\n\nShow/Hide Code\nlibrary(ggplot2) # ggplot2 包用于数据可视化\nlibrary(dplyr) # dplyr 包用于数据处理\n\n# 创建数据\ntime &lt;- as.numeric(rep(seq(1, 7), each = 7)) # x 轴变量，1 到 7，每个重复 7 次\nvalue &lt;- runif(49, 10, 100) # y 轴变量，49 个 10 到 100 之间的随机数\ngroup &lt;- rep(LETTERS[1:7], times = 7) # 分组变量，A 到 G，每组 7 个\ndata &lt;- data.frame(time, value, group) # 合并为数据框\n\n# 绘制堆叠面积图\nggplot(data, aes(x = time, y = value, fill = group)) + # 指定数据和映射关系，fill 按 group 分组\n    geom_area() # 绘制堆叠面积\n\n\n\n\n\n使用 geom_area() 绘制堆叠面积图，展示不同分组的面积堆叠效果\n\n\n\n\n\n\n29.3.2 排序\n\nShow/Hide Code\n# 给定特定顺序：将 group 列转换为因子，并指定分组顺序\ndata$group &lt;- factor(data$group, levels = c(\"B\", \"A\", \"D\", \"E\", \"G\", \"F\", \"C\"))\n\n# 再次绘制面积图，分组顺序按照上面指定的 levels\nggplot(data, aes(x = time, y = value, fill = group)) +\n    geom_area() +\n    theme(legend.position = \"bottom\") # 将图例放在底部, 为了排版\n\n# 也可以按字母顺序排序分组\nmyLevels &lt;- levels(data$group) # 获取当前分组的 levels\ndata$group &lt;- factor(data$group, levels = sort(myLevels)) # 按字母顺序排序\nggplot(data, aes(x = time, y = value, fill = group)) +\n    geom_area() +\n    theme(legend.position = \"bottom\") # 将图例放在底部, 为了排版\n\n# 按某一时间点（如 time = 6）对应的 value 值进行排序\nmyLevels &lt;- data |&gt;\n    dplyr::filter(time == 6) |&gt; # 过滤出 time 等于 6 的数据\n    dplyr::arrange(value) # 按 value 升序排列\ndata$group &lt;- factor(data$group, levels = myLevels$group) # 按 value 排序后的分组顺序设置因子 levels\nggplot(data, aes(x = time, y = value, fill = group)) +\n    geom_area() +\n    theme(legend.position = \"bottom\") # 将图例放在底部, 为了排版\n\n\n\n\n\n\n\n指定分组顺序\n\n\n\n\n\n\n\n按字母顺序分组\n\n\n\n\n\n\n\n按特定时间点的数值排序分组\n\n\n\n\n\n\n控制堆叠面积图的分组顺序，并演示如何按指定顺序、字母顺序和特定时间点的数值排序\n\n\n\n\n\n29.3.3 比例\n比例堆叠面积图(每组的总和都是100):\n\n\nShow/Hide Code\nlibrary(dplyr)\n\n# 按 time 和 group 分组，计算每组的 value 总和，并计算每组所占比例\ndata &lt;- data |&gt;\n    group_by(time, group) |&gt; # 按时间和分组分组\n    summarise(n = sum(value)) |&gt; # 计算每组的 value 总和，命名为 n\n    mutate(percentage = n / sum(n)) # 计算每组所占比例\n\n# # 注意：如果不用 dplyr 也可以这样计算百分比\n# my_fun &lt;- function(vec){\n#     as.numeric(vec[2]) / sum(data$value[data$time == vec[1]]) * 100   # 计算每一行 value 占该时间点总和的百分比\n# }\n# data$percentage &lt;- apply(data, 1, my_fun)   # 对每一行应用函数，得到百分比\n\n# 绘制比例堆叠面积图\nggplot(data, aes(x = time, y = percentage, fill = group)) +\n    geom_area(alpha = 0.6, size = 1, colour = \"black\") # 绘制面积图，设置透明度、线宽和边框颜色\n\n\n\n\n\n使用新管道 |&gt; 语法绘制比例堆叠面积图，并详细注释每一步数据处理\n\n\n\n\n\n\n29.3.4 定制\n再更改一下颜色和样式:\n\n\nShow/Hide Code\n# 加载所需包\nlibrary(viridis) # 提供高可读性的配色方案\nlibrary(hrbrthemes) # 提供美观的 ggplot2 主题\n\n# 绘制堆叠面积图\nggplot(data, aes(x = time, y = value, fill = group)) + # 指定数据和映射关系，fill 按 group 分组\n    geom_area(alpha = 0.6, size = .5, colour = \"white\") + # 绘制面积，设置透明度、边框宽度和颜色\n    scale_fill_viridis(discrete = TRUE) + # 使用 viridis 离散色板填充\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    ggtitle(\"The race between ...\") # 添加标题\n\n\n\n\n\n使用 viridis 调色板和 hrbrthemes 主题美化堆叠面积图",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Stacked Area</span>"
    ]
  },
  {
    "objectID": "stacked-area.html#interactive",
    "href": "stacked-area.html#interactive",
    "title": "29  Stacked Area",
    "section": "29.4 Interactive",
    "text": "29.4 Interactive\n\n29.4.1 ggplotly()\n\n\nShow/Hide Code\nlibrary(ggplot2) # ggplot2 包用于绘图\nlibrary(dplyr) # dplyr 包用于数据处理\nlibrary(babynames) # babynames 数据集\nlibrary(viridis) # viridis 包用于配色\nlibrary(hrbrthemes) # hrbrthemes 包用于美化主题\nlibrary(plotly) # plotly 包用于交互式图形\n\n# 从 babynames 数据集中筛选指定的女性名字\ndata &lt;- babynames |&gt;\n    filter(name %in% c(\"Ashley\", \"Amanda\", \"Jessica\", \"Patricia\", \"Linda\", \"Deborah\", \"Dorothy\", \"Betty\", \"Helen\")) |&gt; # 只保留指定名字\n    filter(sex == \"F\") # 只保留女性数据\n\n# 使用 ggplot2 绘制堆叠面积图\np &lt;- data |&gt;\n    ggplot(aes(x = year, y = n, fill = name, text = name)) + # year 为 x 轴，n 为 y 轴，按 name 填充，text 用于交互显示\n    geom_area() + # 绘制面积图\n    scale_fill_viridis(discrete = TRUE) + # 使用 viridis 离散色板\n    theme(legend.position = \"none\") + # 不显示图例\n    ggtitle(\"Popularity of American names in the previous 30 years\") + # 添加标题\n    theme_ipsum() + # 应用 hrbrthemes 主题\n    theme(legend.position = \"none\") # 再次确保图例不显示\n\n# 使用 plotly 将静态图转换为交互式图形\np &lt;- ggplotly(p, tooltip = \"text\") # tooltip 显示名字\np # 输出交互式图形\n\n\n\n\n使用 plotly 实现交互式堆叠面积图，展示美国女性常见名字随时间的流行趋势\n\n\ndygraph()\n\n\nShow/Hide Code\n# 加载所需的 R 包\nlibrary(dygraphs) # dygraphs 包用于交互式时间序列可视化\nlibrary(xts) # xts 包用于数据框与 xts 格式转换\nlibrary(tidyverse) # tidyverse 包用于数据处理\nlibrary(lubridate) # lubridate 包用于处理日期和时间\n\n# 读取数据\npath &lt;- \"https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/bike.csv\"\ndata &lt;- read.table(path, header = TRUE, sep = \",\") |&gt; head(300) # 读取前 300 行数据\n\n# 检查变量类型（可选）\n# str(data)\n\n# 将 datetime 列从因子类型转换为日期时间格式\ndata$datetime &lt;- ymd_hms(data$datetime)\n\n# 创建 xts 对象，dygraphs 需要 xts 格式的数据\ndon &lt;- xts(x = data$count, order.by = data$datetime)\n\n# 绘制交互式面积图\np &lt;- dygraph(don) |&gt;\n    dyOptions(\n        labelsUTC = TRUE, # 使用 UTC 时间标签\n        fillGraph = TRUE, # 填充面积\n        fillAlpha = 0.1, # 填充透明度\n        drawGrid = FALSE, # 不显示网格线\n        colors = \"#D8AE5A\" # 设置线条颜色\n    ) |&gt;\n    dyRangeSelector() |&gt; # 添加范围选择器\n    dyCrosshair(direction = \"vertical\") |&gt; # 添加垂直十字准线\n    dyHighlight(\n        highlightCircleSize = 5, # 高亮时圆圈大小\n        highlightSeriesBackgroundAlpha = 0.2, # 高亮系列背景透明度\n        hideOnMouseOut = FALSE # 鼠标移出时不隐藏高亮\n    ) |&gt;\n    dyRoller(rollPeriod = 1) # 添加滚动平均选择器，默认窗口为 1\n\np\n\n\n\n\n使用 dygraphs 包绘制交互式面积图",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Stacked Area</span>"
    ]
  },
  {
    "objectID": "stacked-area.html#base-r",
    "href": "stacked-area.html#base-r",
    "title": "29  Stacked Area",
    "section": "29.5 Base R",
    "text": "29.5 Base R\n\n\nShow/Hide Code\n# 创建数据框，x 从 1 到 10，y 为 1 到 15 的随机排列\ndata &lt;- data.frame(x = seq(1, 10), y = sample(seq(1, 15), 10))\n\n# 先绘制折线图，type=\"o\" 表示点和线都画，lwd=3 线宽，pch=20 实心圆点\nplot(\n    data,\n    col = rgb(0.2, 0.1, 0.5, 0.9), # 设置颜色为半透明深紫色\n    type = \"o\", # o 表示点和线都画\n    lwd = 3, # 线宽为3\n    xlab = \"\", # 不显示x轴标题\n    ylab = \"size\", # y轴标题为 size\n    pch = 20 # 点的形状为实心圆\n)\n\n# 用 polygon 填充面积\n# c(min(data$x), data$x, max(data$x))：x 轴从最小值到最大值，首尾闭合\n# c(min(data$y), data$y, min(data$y))：y 轴从最小值到最大值，首尾闭合\npolygon(\n    c(min(data$x), data$x, max(data$x)), # x 坐标，首尾闭合\n    c(min(data$y), data$y, min(data$y)), # y 坐标，首尾闭合\n    col = rgb(0.2, 0.1, 0.5, 0.2), # 填充为更透明的紫色\n    border = FALSE # 不显示边框\n)\n\n\n\n\n\n使用 Base R 绘制面积图，先绘制折线图，再用 polygon 填充面积",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Stacked Area</span>"
    ]
  },
  {
    "objectID": "stacked-area.html#pearl",
    "href": "stacked-area.html#pearl",
    "title": "29  Stacked Area",
    "section": "29.6 Pearl",
    "text": "29.6 Pearl\n\n\n\nAggregated Household Wealth 有行内标签\n\n\n\n\n\n每条线末端有精美标签\n\n\n\n\n\n折线图和堆叠面积图",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Stacked Area</span>"
    ]
  },
  {
    "objectID": "stream.html",
    "href": "stream.html",
    "title": "30  Stream",
    "section": "",
    "text": "1",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Stream</span>"
    ]
  },
  {
    "objectID": "time.html",
    "href": "time.html",
    "title": "31  Time",
    "section": "",
    "text": "1",
    "crumbs": [
      "Evolution",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Time</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "32  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Summary</span>"
    ]
  }
]