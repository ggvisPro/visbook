[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "数据可视化探索(从入门到放弃)",
    "section": "",
    "text": "Preface\n数据可视化,对王师傅来说是很复杂的东西\n所以王师傅特地写了这个笔记,来记录学习过程和心得体会。\n看似简单,其实一点也不难.\n遗憾的是,由于王师傅打字不认真,书中的中文标点符号几乎都是错误的.\n\n\nShow/Hide Code\n# 彩蛋 右上角的封面是这段代码画的位图\nlibrary(ggplot2)\ndf &lt;- read.csv('https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/img_df2.csv')\np &lt;- ggplot(df, aes(x = x, y = y, color = color)) +\n  geom_point() +\n  scale_colour_identity() + #控制颜色映射\n  theme_void() #删除坐标轴\n# p # 显示图形\n\n\n王师傅强烈推荐 r graph gallery 的数据可视化思路:\n这本书是由quarto生成的,可以在quarto.org上了解更多.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "quick_start.html",
    "href": "quick_start.html",
    "title": "0 Quick start",
    "section": "",
    "text": "PKG\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(ggridges) # 山脊图\nlibrary(patchwork) # 图形拼接",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "quick_start.html#基本概念",
    "href": "quick_start.html#基本概念",
    "title": "0 Quick start",
    "section": "基本概念",
    "text": "基本概念\n现在有下面这张表格，记录了钻石相关的一些信息：\n\n\nShow/Hide Code\ndiamonds &lt;- diamonds |&gt; filter(carat &lt; 3)\nknitr::kable(head(diamonds))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncarat\ncut\ncolor\nclarity\ndepth\ntable\nprice\nx\ny\nz\n\n\n\n\n0.23\nIdeal\nE\nSI2\n61.5\n55\n326\n3.95\n3.98\n2.43\n\n\n0.21\nPremium\nE\nSI1\n59.8\n61\n326\n3.89\n3.84\n2.31\n\n\n0.23\nGood\nE\nVS1\n56.9\n65\n327\n4.05\n4.07\n2.31\n\n\n0.29\nPremium\nI\nVS2\n62.4\n58\n334\n4.20\n4.23\n2.63\n\n\n0.31\nGood\nJ\nSI2\n63.3\n58\n335\n4.34\n4.35\n2.75\n\n\n0.24\nVery Good\nJ\nVVS2\n62.8\n57\n336\n3.94\n3.96\n2.48\n\n\n\n\n\n其中:\n\n变量（Variable）：列, carat、cut、color、clarity、depth、table、price、x、y、z\n\n连续变量（Continuous Variable）：carat、depth、table、price、x、y、z\n离散变量（Discrete Variable）：cut、color、clarity\n分类变量（Categorical Variable）：cut、color、clarity\n\n观测（Observation）：行, 每个钻石的记录\n值（Value）：单元格, 如某个钻石的carat为1.5\n数据框（Data Frame）：整个表格\n\n\n这是数据分析的整体流程: \n\n\n\n\n\n\n思考题\n\n\n\nwhich part of the data analysis process is the most interesting? Which part is the most boring?",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "quick_start.html#单变量univariate-variable",
    "href": "quick_start.html#单变量univariate-variable",
    "title": "0 Quick start",
    "section": "单变量(Univariate Variable)",
    "text": "单变量(Univariate Variable)\n\n分类变量(Categorical Variable)\n对于分类变量，我们主要展示其比例构成。\n\n饼图(Pie)\n不得不说，饼图是最常见的单个分类变量可视化方式，那么直接，又那么简单。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 1, fill = cut)) + \n  geom_bar(color = \"white\") + \n  coord_polar(theta = \"y\") + \n  scale_fill_brewer(palette = \"set2\") + # 设置配色方案\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n甜甜圈图(Donut)\n甜甜圈图是饼图的变种，去掉了中间的空心部分，形成一个甜甜圈形状。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 2, fill = cut)) + \n  geom_bar(color = \"white\") +           # 绘制每个cut的条形，白色边框\n  xlim(0.5, 2.5) +                      # 设置x轴范围，决定中间空白洞的大小\n  coord_polar(theta = \"y\") +            # 使用极坐标，将条形图转换为圆环（甜甜圈）\n  scale_fill_brewer(palette = \"set2\") + # 设置配色方案\n  theme_void()                          # 移除所有背景和坐标轴，突出图形主体\n\n\n\n\n\n甜甜圈图\n\n\n\n\n\n\n堆叠条形图(Barstack)\n堆叠条形图是另一种常见的单个分类变量可视化方式(我不喜欢,我觉得它不直观)\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 1, fill = cut)) + \n  geom_bar(color = \"white\") + \n  scale_fill_brewer(palette = \"set2\") + # 设置配色方案\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n连续性变量（Continuous Variable）\n对于连续变量, 我们主要关注其变化、分布、趋势、典型值、异常值\n\n直方图(Histogram)\n下图是 53900 个钻石的克拉数分布，X轴是克拉数，Y轴是频数。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.5) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhat do you notice from the histogram?\n\n\n让我们改变一下 binwidth 的大小，看看会有什么不同。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.1) \n\n\n\n\n\n\n\n\n\n好像有些不一样了，继续改变 binwidth 的大小：\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.01) \n\n\n\n\n\n\n\n\n\nAmazing!\n\n\n\n\n\n\n思考题\n\n\n\nWhy are there more diamonds at whole carats and common fractions of carats?\nWhy are there more diamonds slightly to the right of each peak than there are slightly to the left of each peak?\n\n\n\n\n密度曲线图(Density)\n密度曲线图可以帮助我们更好地理解数据的分布情况。下图是钻石克拉数的密度曲线图，X轴是克拉数，Y轴是分布密度\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhat is the density?\nWhat is the relationship between the density curve and the histogram above?\n\n\n\n\n箱线图(Boxplot)\n箱线图是用来展示数据分布的图形，主要用于显示数据的中位数、四分位数、异常值等信息。 \n\n\n\n\n\n\n思考题\n\n\n\nHow to interpret this boxplot?\n\n\n\n\n小提琴图(Violin)\n箱线图很好,但仅展示了四分位数等,而小提琴图则显示了数据的分布密度,可以更好地展示数据的分布情况。\n\n\nShow/Hide Code\nggplot(diamonds |&gt; filter(cut == \"Fair\"), aes(x = cut, y = carat)) +\n  geom_violin() \n\n\n\n\n\n\n\n\n\n小提琴图显示分布密度\n\n\n\n\n\n\n思考题\n\n\n\nwhat is the difference in the three plots(boxplot, density plot, histogram)?\n\n\n下图很地解释了直方图、密度曲线图和箱线图这三者之前的关系\n\n\nShow/Hide Code\n## Left\np_left &lt;- ggplot(diamonds, aes(x = carat)) +\n  geom_histogram(binwidth = 0.1)\n\n## Middle\np_middle &lt;- ggplot(diamonds, aes(x = carat)) +\n  geom_density()\n\n## Right\np_right &lt;- ggplot(diamonds, aes(x = carat)) +\n  geom_boxplot()\n\np_left + p_middle + p_right\n\n\n\n\n\n\n\n\n\n\n\n小提琴图(Violin) + 箱线图(Boxplot)\n还有一种把小提琴图和箱线图结合的方式，近年来在科研界比较流行。\n\n\nShow/Hide Code\nggplot(diamonds |&gt; filter(cut == \"Fair\"), aes(x = cut, y = carat)) +\n  geom_violin() +\n  geom_boxplot(width = 0.1, fill = \"white\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nHow to interpret this plot?",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "quick_start.html#双变量bivariate-variable",
    "href": "quick_start.html#双变量bivariate-variable",
    "title": "0 Quick start",
    "section": "双变量(Bivariate Variable)",
    "text": "双变量(Bivariate Variable)\n\n分类-数值变量(A categorical and a numerical variable)\n\n折线图(Line)\n下面是不同切割质量的钻石的价格情况的折线图\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, color = cut)) + \n  geom_freqpoly(binwidth = 500, linewidth = 0.75)\n\n\n\n\n\n\n\n\n\n不好看!\n\n\n\n\n\n\n思考题\n\n\n\nWhy is this plot ugly?\n\n\n\n\n密度曲线图(Density)\n当各组数据差得较多时,纵轴用count不太合适,会造成摩天大厦+小平层,不如把纵轴改为density:\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, y = after_stat(density), color = cut)) + \n  geom_freqpoly(binwidth = 500, linewidth = 0.75)\n\n\n\n\n\n\n\n\n\n好多了吧 ●‘◡’● (好吧,还是有点丑)\n分面(facet)会好一点吗?\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, fill = cut)) + \n  geom_density() + \n  facet_wrap(~ cut, nrow = 1) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n山脊图(Ridge)\n近年来还流行一种“山脊图(Ridge)”，它可以更好地展示多个分布的重叠情况。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) + \n  geom_density_ridges(alpha = 0.5) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n并排箱线图(Boxplot)\n箱线图也是一种直观的可视化方式\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = cut, y = price)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n或许还可以上点颜色, 让它显得花里胡哨:\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = cut, y = price, fill = cut)) +\n  geom_boxplot(outlier.shape = NA) +\n  theme(legend.position = \"none\") + \n  coord_cartesian(ylim = c(0, 15000))\n\n\n\n\n\n\n\n\n\n等等,这不对吧,cut越好的钻石价格应该越高才对啊!!!怎么回事呀喂?\n\n\n\n\n\n\n思考题\n\n\n\nWhy does the boxplot show that the price of diamonds with “Fair” cut is higher than those with “Ideal” cut?\n\n\n\n\n折线图(Line)\n还有一种策略,是算出数值的平均数(或其他特征),然后绘制折线图:\n\n\nShow/Hide Code\ndiamonds |&gt;\n  group_by(cut) |&gt;\n  summarise(price = mean(price)) |&gt;\n  ggplot(aes(x = cut, y = price, color = cut)) +\n  geom_point() +\n  geom_line(group = 1) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n两个分类变量(Two categorical variables)\n虽然听起来有点离谱,但有时候确实需要可视化两个分类变量之间的关系.\n\n点图(Dot)\n下图是一个点图，展示了钻石的切割质量和颜色之间的关系。点的大小表示组合的数量\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = cut, y = color)) +\n  geom_count()\n\n\n\n\n\n\n\n\n\n好看吗? 好像还行。\n\n\n色块图(Tile)\n让我们再来换一种表达形式——色块图,色块的颜色表示组合的数量.\n\n\nShow/Hide Code\ndiamonds |&gt; \n  count(color, cut) |&gt;  \n  ggplot(aes(x = color, y = cut)) +\n  geom_tile(aes(fill = n)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhich one do you prefer, the dot plot or the tile plot? Why?\n\n\n\n\n堆叠条形图(Barstack)\n又到了我不喜欢的堆叠条形图了.\n下面两个图是钻石的颜色和切割质量的堆叠条形图，分别展示了每种颜色的钻石在不同切割质量下的数量分布。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = color, fill = cut)) +\n  geom_bar() + \n  scale_fill_brewer(palette = \"set2\") # 设置配色方案\n\n\n\n\n\n\n\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = color, fill = cut)) +\n  geom_bar(position = \"fill\") +\n  scale_fill_brewer(palette = \"set2\") # 设置配色方案\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhat is the difference between the two stacked bar charts?\n\n\n\n\n分面面包圈图(Facet Donut)\n其实就是多个面包圈图组合在一起,用ppt也能做.\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 1, fill = color)) +\n  geom_bar(color = \"white\") + \n  xlim(-0.5, 1.5) + \n  coord_polar(theta = \"y\") + \n  theme_void() + \n  facet_wrap(~ cut, scales=\"free_y\", nrow = 2) + \n  scale_fill_brewer(palette = \"set2\") # 设置配色方案\n\n\n\n\n\n\n\n\n\n\n\n\n两个数值变量(Two numerical variables)\n\n散点图(Scatter)\n下图是钻石的克拉数和价格之间的散点图，X轴是克拉数，Y轴是价格。\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n黑色一大片,简直丑死了!\n来调整一下点的透明度吧\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point(alpha = 0.02) \n\n\n\n\n\n\n\n\n\n稍微好一点,但是还有一些更好的策略.\n\n\n分格散点图(bin)\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_bin2d()\n\n\n\n\n\n\n\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_hex()\n\n\n\n\n\n\n\n\n\n\n\n排序箱线图(Order Boxplot)\n把其中一个变量分成若干个区间,然后在每个区间内绘制箱线图,可以更好地展示数据的分布情况.\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = carat, y = price)) + \n  geom_boxplot(aes(group = cut_width(carat, 0.1)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhen do you think a Order Boxplot Plot is useful?\n\n\n\n\n散点图(Scatter) + 线性回归(Linear Regression)\n换一个数据较少的例子,这是一个散点图，展示了汽车的发动机排量和高速公路油耗之间的关系。红色的点表示2座跑车。\n\n\nShow/Hide Code\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_point(\n    data = mpg |&gt; filter(class == \"2seater\"),\n    color = \"red\"\n  ) +\n  geom_point(\n    data = mpg |&gt; filter(class == \"2seater\"),\n    shape = \"circle open\", size = 3, color = \"red\"\n  )\n\n\n\n\n\n\n\n\n\n我们还可以在散点图上添加线性回归线,来展示两者之间的关系.\n\n\nShow/Hide Code\nggplot(mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n思考题\n\n\n\nWhat is the curve? What is the shadow around it?",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "quick_start.html#三变量",
    "href": "quick_start.html#三变量",
    "title": "0 Quick start",
    "section": "三变量",
    "text": "三变量\nThe author will update this section if he remembers it…",
    "crumbs": [
      "0 Quick start"
    ]
  },
  {
    "objectID": "distribution.html",
    "href": "distribution.html",
    "title": "Distribution",
    "section": "",
    "text": "此部分探数据分布的可视化.\n\n\n\n数据分布\n\n\n\n1  Beeswarm 群峰图, 是一种强大的点图\n2  Histogram 直方图, 用于显示数据的基础手段\n3  Boxplot 箱线图, 用于显示数据的四分位数和异常值\n4  Density 核密度图, 密度曲线,可以比较多组\n5  Ridgeline 山脊图, 美观, 用于显示多个分布的叠加情况\n6  Violin 小提琴图, 箱线图和密度曲线的变体",
    "crumbs": [
      "Distribution"
    ]
  },
  {
    "objectID": "beeswarm.html",
    "href": "beeswarm.html",
    "title": "1  Beeswarm",
    "section": "",
    "text": "1.1 PKG\n群蜂图,像蜂群一样展示数据,使用R包beeswarm 和 ggbeeswarm 包实现。\nShow/Hide Code\nlibrary(beeswarm) # beeswarm包,绘制群峰图\nlibrary(ggplot2)\nlibrary(ggbeeswarm) # ggbeeswarm包,基于ggplot2的群峰图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Beeswarm</span>"
    ]
  },
  {
    "objectID": "beeswarm.html#iris",
    "href": "beeswarm.html#iris",
    "title": "1  Beeswarm",
    "section": "1.2 iris",
    "text": "1.2 iris\niris数据集，又称为“安德森鸢尾花卉数据集”（Anderson’s Iris data set），是 R 语言内置的一个“玩具”数据集，也是统计学、数据科学和机器学习领域中使用最频繁、最著名的示例数据集之一。\n它包含了150个鸢尾花样本的测量数据，这150个样本分别来自三个不同的鸢尾花品种：山鸢尾 (Setosa)、变色鸢尾 (Versicolor) 和 维吉尼亚鸢尾 (Virginica)，每个品种各50个样本。\n\n\nShow/Hide Code\ndata(iris) # 载入内置数据集\nknitr::kable(head(iris))\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\n群峰图使用的数据集iris\n\n\niris数据集共有5个变量:\n\nSepal.Length: 花萼长度，单位是厘米。\nSepal.Width: 花萼宽度，单位是厘米。\nPetal.Length: 花瓣长度，单位是厘米。\nPetal.Width: 花瓣宽度，单位是厘米。\nSpecies: 物种/品种，一个因子变量，包含三个水平（levels）：setosa, versicolor, 和 virginica。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Beeswarm</span>"
    ]
  },
  {
    "objectID": "beeswarm.html#beeswarm",
    "href": "beeswarm.html#beeswarm",
    "title": "1  Beeswarm",
    "section": "1.3 beeswarm",
    "text": "1.3 beeswarm\n\n1.3.1 基础\n\n\nShow/Hide Code\nbeeswarm(iris$Sepal.Length)\n\n\n\n\n\n最简单的群峰图\n\n\n\n\n\n\n1.3.2 翻转坐标轴\n\n\nShow/Hide Code\nbeeswarm(iris$Sepal.Length, horizontal=TRUE)\n\n\n\n\n\n翻转坐标轴的群峰图\n\n\n\n\n\n\n1.3.3 自定义\n\n\nShow/Hide Code\nbeeswarm(\n  iris$Sepal.Length,\n  pch=16, # 点的形状\n  col='blue', # 点的颜色\n  cex=1.5, # 点的大小\n)\n\n\n\n\n\n自定义的群峰图\n\n\n\n\n\n\n1.3.4 分组\n\n\nShow/Hide Code\nbeeswarm(\n  Sepal.Length ~ Species, \n  data=iris,\n  col=c(\"orange\", \"lightblue\", \"magenta\"),\n  pch = 19, # fill the dots\n#   corral = \"gutter\" # 使用“gutter”方法来处理重叠,边缘裁切\n)\n\n\n\n\n\n分组的群峰图\n\n\n\n\n更多可以更改的参数见beeswarm包文档。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Beeswarm</span>"
    ]
  },
  {
    "objectID": "beeswarm.html#ggbeeswarm",
    "href": "beeswarm.html#ggbeeswarm",
    "title": "1  Beeswarm",
    "section": "1.4 ggbeeswarm",
    "text": "1.4 ggbeeswarm\nggbeeswarm包是ggplot2的扩展包，有两个核心函数:\n\ngeom_beeswarm()函数创建群峰图。\ngeom_quasirandom()函数创建准随机分布图,这是一种介于蜂群图和抖动图之间的混合图。\n\n\n1.4.1 基础\n\n\nShow/Hide Code\nggplot(iris,aes(y=Sepal.Length,x='')) +\n  geom_beeswarm()\n\n\n\n\n\n最基本的geom_beeswarm\n\n\n\n\n\n\n1.4.2 翻转坐标轴\n\n\nShow/Hide Code\nggplot(iris,aes(x=Sepal.Length,y='')) +\n  geom_beeswarm()\n\n\n\n\n\n翻转坐标轴的geom_beeswarm\n\n\n\n\n\n\n1.4.3 自定义颜色\n\n\nShow/Hide Code\nggplot(iris,aes(y=Sepal.Length,x='')) +\n  geom_beeswarm(color='blue') +\n  theme_minimal()\n\n\n\n\n\n自定义颜色的geom_beeswarm\n\n\n\n\n还有更多可以通过“method”参数来控制的群峰图方法,例如\"center\"、\"square\"、\"hexagon\"等。 见ggbeeswarm包文档。\n\n\n1.4.4 分组\n\n\nShow/Hide Code\nggplot(iris,aes(x=Species, y=Sepal.Length, colour=Species)) +\n  geom_beeswarm() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n分组的geom_beeswarm\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris,aes(x=Species, y=Sepal.Length, colour=Species)) +\n  geom_beeswarm() +\n  scale_color_manual(values=c(\"#999999\", \"#E69F00\", \"#56B4E9\")) +\n  theme_minimal() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n自定义主题的分组geom_beeswarm",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Beeswarm</span>"
    ]
  },
  {
    "objectID": "histogram.html",
    "href": "histogram.html",
    "title": "2  Histogram",
    "section": "",
    "text": "2.1 PKG\n非常简单的数据可视化形式,可以用base R::hist()或ggplot2::geom_histogram()来实现。\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(hrbrthemes) # 主题包\nlibrary(patchwork) # 图形拼接",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Histogram</span>"
    ]
  },
  {
    "objectID": "histogram.html#ggplot2",
    "href": "histogram.html#ggplot2",
    "title": "2  Histogram",
    "section": "2.2 ggplot2",
    "text": "2.2 ggplot2\n\n2.2.1 基本\n\n\nShow/Hide Code\ndata = data.frame(value = rnorm(1000))\n\nggplot(data, aes(x = value)) +\n  geom_histogram()\n\n\n\n\n\n最基本的geom_histogram\n\n\n\n\n\n\nShow/Hide Code\nggplot(data, aes(x=value)) + \n  geom_histogram(binwidth=0.1, fill=\"#69b3a2\", color=\"#e9ecef\", alpha=0.9) +\n  theme_ipsum()\n\n\n\n\n\n定制的geom_histogram\n\n\n\n\n\n\n2.2.2 分组/镜像\n还有用于比较两个变量分布(从0开始)的镜像直方图。\n直方图的默认y = -..count..，因此可以通过设置y = -..count..来实现镜像效果。\n\n\nShow/Hide Code\ndata &lt;- data.frame(\n  var1 = rnorm(100),\n  var2 = rnorm(100, mean = 2)\n)\n\nggplot(data, aes(x = x)) +\n  # 上方图\n  geom_histogram(aes(x = var1, y = ..count..), fill = \"#69b3a2\") +\n  geom_label(aes(x = 4.5, y = 6, label = \"variable1\"), color = \"#69b3a2\") +\n  # 下方图,主要是通过y = -..count..来实现镜像\n  geom_histogram(aes(x = var2, y = -..count..), fill = \"#404080\") +\n  geom_label(aes(x = 4.5, y = -4, label = \"variable2\"), color = \"#404080\") \n\n\n\n\n\n通过y = -..count.. 来绘制镜像直方图\n\n\n\n\n密度曲线图默认y = ..density..，因此可以通过设置y = -..density..来实现镜像效果。\n下图,左侧是直方图(y改为密度),右侧是密度曲线图。\n\n\nShow/Hide Code\np1 &lt;- ggplot(data, aes(x = x)) +\n  # 上方图\n  geom_histogram(aes(x = var1, y = ..density..), fill = \"#69b3a2\") +\n  geom_label(aes(x = 3.5, y = 0.2, label = \"variable1\"), color = \"#69b3a2\") +\n  # 下方图\n  geom_histogram(aes(x = var2, y = -..density..), fill = \"#404080\") +\n  geom_label(aes(x = 3.5, y = -0.2, label = \"variable2\"), color = \"#404080\") \n\np2 &lt;- ggplot(data, aes(x = x)) +\n  # 上方图\n  geom_density(aes(x = var1, y = ..density..), fill = \"#69b3a2\") +\n  geom_label(aes(x = 3.5, y = 0.2, label = \"variable1\"), color = \"#69b3a2\") +\n  # 下方图\n  geom_density(aes(x = var2, y = -..density..), fill = \"#404080\") +\n  geom_label(aes(x = 3.5, y = -0.2, label = \"variable2\"), color = \"#404080\")\n\np1 + p2\n\n\n\n\n\n通过y = -..count.. 来绘制镜像直方图\n\n\n\n\n\n\nShow/Hide Code\ndata &lt;- data.frame(\n  type = c(rep(\"variable 1\", 1000), rep(\"variable 2\", 1000)),\n  value = c(rnorm(1000), rnorm(1000, mean = 4))\n)\n\nggplot(data, aes(x = value, fill = type)) +\n  geom_histogram(color = \"#e9ecef\", alpha = 0.6, position = 'identity') +\n  scale_fill_manual(values = c(\"#69b3a2\", \"#404080\")) # 使用自定义颜色\n\n\n\n\n\n通过fill来绘制双色直方图\n\n\n\n\n\n\n2.2.3 分面\n\n\nShow/Hide Code\nggplot(iris, aes(x = `Sepal.Length`, fill = `Sepal.Length`)) + \n  geom_histogram() + \n  facet_wrap(~ Species, scale = \"free_x\")\n\n\n\n\n\nfacet_wrap分面,scale来控制自由坐标轴\n\n\n\n\n\n\n2.2.4 边缘图\n见 Section 3.4.9。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Histogram</span>"
    ]
  },
  {
    "objectID": "histogram.html#base-r",
    "href": "histogram.html#base-r",
    "title": "2  Histogram",
    "section": "2.3 base R",
    "text": "2.3 base R\n查看 r-graph-gallery的例子。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Histogram</span>"
    ]
  },
  {
    "objectID": "boxplot.html",
    "href": "boxplot.html",
    "title": "3  Boxplot",
    "section": "",
    "text": "3.1 PKG\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(hrbrthemes) # hrbrthemes 提供了更适合排版的主题\nlibrary(viridis) # viridis 提供了好看的色盲友好型颜色\nlibrary(ggdist) # ggdist 提供了半小提琴图和云雨图\nlibrary(patchwork) # patchwork 用于图形拼接\nlibrary(ggExtra) # ggExtra 用于 ggplot2 散点图的边际图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#sec-boxplot-trap",
    "href": "boxplot.html#sec-boxplot-trap",
    "title": "3  Boxplot",
    "section": "3.2 箱线图陷阱",
    "text": "3.2 箱线图陷阱\n箱线图又叫盒须图，展示数据的中位数(median)、上下四分位数(Quartiles)、四分位距(IQR)、须线(Whiskers)和异常值(outlier)。\n这是说明箱线图构成的示意图：  \n但是，这种信息的总结也有个大问题——无法显示数据的分布情况。例如：正态分布可能看起来与双峰分布完全相同。因此，考虑用小提琴图或脊线图。\n\n\nShow/Hide Code\n# 创建数据集\ndata1 &lt;- data.frame(\n  name = c(\n    rep(\"A\", 500),\n    rep(\"B\", 250),\n    rep(\"B\", 250),\n    rep(\"C\", 20),\n    rep('D', 100)\n  ),\n  value = c(\n    rnorm(500, 10, 5),\n    rnorm(250, 13, 1),\n    rnorm(250, 18, 1),\n    rnorm(20, 25, 4),\n    rnorm(100, 12, 1)\n  )\n)\n\ndata1 |&gt; \n  ggplot(aes(x = name, y = value, fill = name)) +\n  geom_boxplot() +\n  scale_fill_viridis(discrete = TRUE) + # 好看的色盲友好型颜色,离散变量\n  theme_ipsum() +\n  theme(legend.position = \"none\") + \n  labs(x = \"\") + \n  ggtitle(\"A somewhat misleading boxplot\")",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#改进",
    "href": "boxplot.html#改进",
    "title": "3  Boxplot",
    "section": "3.3 改进",
    "text": "3.3 改进\n\n3.3.1 添加抖动(Jitter)\n适合数据量不太大的情况\n\n\nShow/Hide Code\ndata1 |&gt; \n  ggplot( aes(x=name, y=value, fill=name)) +\n    geom_boxplot() +\n    scale_fill_viridis(discrete = TRUE) +  # 好看的色盲友好型颜色,离散变量\n    geom_jitter(color=\"grey\", size=0.5, alpha=0.5) +\n    theme_ipsum() + \n    theme(legend.position=\"none\") +\n    labs(x = \"\") + \n    ggtitle(\"A boxplot with jitter\")\n\n\n\n\n\n添加抖动(jitter)的箱线图\n\n\n\n\n发现:\n\n组 C 样本量小。在得出组 C 的值高于其他组的结论之前，要考虑样本量.\n组 B 呈现出双峰分布(y = 18 和 y = 13),但是箱线图中看起来和组 A 并无区别.\n\n\n\n3.3.2 小提琴图(Violin)\n\n\nShow/Hide Code\n# 显示样本量\nsample_size = data1 |&gt; group_by(name) |&gt; summarize(num = n())\n\ndata1  |&gt;\n  left_join(sample_size) |&gt;\n  mutate(myaxis = paste0(name, \"\\n\", \"n=\", num)) |&gt;\n  ggplot(aes(x = myaxis, y = value, fill = name)) +\n  geom_violin(width = 1.4) +\n  geom_boxplot(width = 0.1, color = \"grey\", alpha = 0.2) +\n  scale_fill_viridis(discrete = TRUE) +\n  theme_ipsum() +\n  theme(legend.position = \"none\") +\n  labs(x = \"\") + \n  ggtitle(\"A violin plot\")\n\n\n\n\n\n\n\n\n\n\n\n3.3.3 云雨图(Raincloud)\n看了就知道,云(半小提琴)+雨(散点)的组合。\n\n\nShow/Hide Code\ndata1 |&gt;\n    ggplot(aes(x = factor(name), y = value, fill = factor(name))) +\n\n    # 添加半小提琴图（显示分布）\n    stat_halfeye(\n        adjust = 0.5,\n        justification = -0.1,\n        .width = 0,\n        point_colour = NA\n    ) +\n\n    # 添加散点（显示原始数据点）\n    stat_dots(\n        side = \"left\",\n        justification = 1.1,\n        binwidth = 0.25\n    ) +\n\n    # 设置色盲友好型配色\n    scale_fill_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(legend.position = \"none\") + \n    labs(x = \"\") +\n    ggtitle(\"A raincloud plot example\") \n\n\n\n\n\n\n\n\n\n把头顺时针旋转90度(或交换R代码X轴和Y轴)，就更像云雨了\n甚至还可以再加上箱线图\n\n\nShow/Hide Code\ndata1 |&gt;\n    ggplot(aes(x = factor(name), y = value, fill = factor(name))) +\n\n    # 添加半小提琴图（显示分布）\n    stat_halfeye(\n        adjust = 0.5,\n        justification = -0.2,\n        .width = 0,\n        point_colour = NA\n    ) +\n\n    # 添加箱线图\n    geom_boxplot(\n        width = 0.12,\n        outlier.color = NA,\n        alpha = 0.5\n    ) +\n\n    # 添加散点（显示原始数据点）\n    stat_dots(\n        side = \"left\",\n        justification = 1.1,\n        binwidth = 0.25\n    ) +\n\n    # 设置色盲友好型配色\n    scale_fill_viridis(discrete = TRUE) +\n    theme_ipsum() +\n    theme(legend.position = \"none\") + \n    labs(x = \"\") +\n    ggtitle(\"A raincloud plot example\")",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#ggplot2",
    "href": "boxplot.html#ggplot2",
    "title": "3  Boxplot",
    "section": "3.4 ggplot2",
    "text": "3.4 ggplot2\n主要是geom_boxplot()函数.\n\n3.4.1 基础\n\n\nShow/Hide Code\nggplot(mpg, aes(x = class, y = hwy)) + \n    geom_boxplot()\n\n\n\n\n\n最基础的箱线图\n\n\n\n\n\n\nShow/Hide Code\nggplot(mpg, aes(x=class, y=hwy)) + \n  geom_boxplot(\n    color=\"blue\",         # 箱线图边框颜色为蓝色\n    fill=\"blue\",          # 箱体填充颜色为蓝色\n    alpha=0.2,            # 箱体透明度为0.2，便于观察重叠部分\n    \n    notch=TRUE,           # 显示缺口，用于比较中位数是否有显著差异\n    notchwidth = 0.8,     # 缺口的宽度\n    \n    outlier.colour=\"red\", # 异常值点的边框颜色为红色\n    outlier.fill=\"red\",   # 异常值点的填充颜色为红色\n    outlier.size=1        # 异常值点的大小为3\n  )\n\n\n\n\n\n有细腰的箱线图\n\n\n\n\n\n\n3.4.2 排序\n\n\nShow/Hide Code\nmpg |&gt;\n  # fct_reorder() 函数排序\n  ggplot( aes(x=fct_reorder(class, hwy, .fun='median'), y=hwy)) + \n    geom_boxplot()\n\n\n\n\n\n用均值排序箱线图\n\n\n\n\n\n\n3.4.3 定制外观\n\n\nShow/Hide Code\np1 &lt;- ggplot(mpg, aes(x=class, y=hwy)) + \n    geom_boxplot(color=\"red\", fill=\"orange\", alpha=0.2)\n \np2 &lt;- ggplot(mpg, aes(x=class, y=hwy, fill=class)) + \n    geom_boxplot(alpha=0.3) +\n    theme(legend.position=\"none\")\n\np3 &lt;- ggplot(mpg, aes(x=class, y=hwy, fill=class)) + \n    geom_boxplot(alpha=0.3) +\n    theme(legend.position=\"none\") +\n    scale_fill_brewer(palette=\"BuPu\") # 调色板\n \np4 &lt;- ggplot(mpg, aes(x=class, y=hwy, fill=class)) + \n    geom_boxplot(alpha=0.3) +\n    theme(legend.position=\"none\") +\n    scale_fill_brewer(palette=\"Dark2\") # 调色板\n\np1 + p2 + p3 + p4\n\n\n\n\n\n改变颜色\n\n\n\n\n\n\nShow/Hide Code\nmpg |&gt; \n  # 添加一列 'type'，用于标记是否高亮某个组\n  mutate(type = ifelse(class == \"subcompact\", \"Highlighted\", \"Normal\")) |&gt;\n  \n  ggplot(aes(x = class, y = hwy, fill = type, alpha = type)) + \n    geom_boxplot() + \n    scale_fill_manual(values = c(\"#69b3a2\", \"grey\")) + # 手动设置填充色，高亮组为绿色，其余为灰色\n    scale_alpha_manual(values = c(1, 0.1)) + # 手动设置透明度，高亮组为不透明，其余为半透明\n    theme_ipsum() + # 使用 hrbrthemes 包的排版主题\n    theme(legend.position = \"none\") + # 不显示图例\n    xlab(\"\") # 去除 x 轴标签\n\n\n\n\n\n高亮某个组\n\n\n\n\n\n\n3.4.4 分组/分面\n\n\nShow/Hide Code\n# 构造数据\nvariety = rep(LETTERS[1:7], each = 40) # 7种品种，每种40个观测\ntreatment = rep(c(\"high\", \"low\"), each = 20) # 处理分为high和low，每组20个观测\nnote = seq(1:280) + sample(1:150, 280, replace = TRUE) # 生成note变量，添加一定随机性\ndata2 = data.frame(variety, treatment, note) # 组合成数据框\n\n# 分组箱线图\nggplot(data2, aes(x = variety, y = note, fill = treatment)) + \n  geom_boxplot()\n\n\n\n\n\n分组箱线图与分面箱线图\n\n\n\n\nShow/Hide Code\n# 少分面箱线图\nggplot(data2, aes(x=variety, y=note, fill=treatment)) + \n    geom_boxplot() +\n    facet_wrap(~treatment)\n\n\n\n\n\n分组箱线图与分面箱线图\n\n\n\n\nShow/Hide Code\n# 多分面箱线图\nggplot(data2, aes(x=variety, y=note, fill=treatment)) + \n    geom_boxplot() +\n    facet_wrap(~variety, scale=\"free\") # 自由y轴\n\n\n\n\n\n分组箱线图与分面箱线图\n\n\n\n\n\n\n3.4.5 不等宽\n让箱线图的宽度与样本量成正比\n\n\nShow/Hide Code\n# 转换为因子类型\nmpg$drv &lt;- as.factor(mpg$drv) \n# 创建x轴标签，包含每个drv水平的名称及其对应的样本量\nn_xlab &lt;- str_glue(\"{levels(mpg$drv)}\\n(N={table(mpg$drv)})\")\n\nggplot(mpg, aes(x = drv, y = hwy, fill = drv)) + \n    geom_boxplot(varwidth = TRUE, alpha = 0.2) + # varwidth = TRUE 不等宽\n    scale_x_discrete(labels = n_xlab) + \n    theme(legend.position = \"none\")\n\n\n\n\n\n不等宽箱线图(宽带是样本量)\n\n\n\n\n\n\n3.4.6 连续变量\n把连续变量分箱后再绘制箱线图。\n\n\nShow/Hide Code\ndiamonds |&gt;\n  mutate(bin = cut_width(carat, width = 0.5, boundary = 0)) |&gt;\n  ggplot(aes(x = bin, y = price)) +\n  geom_boxplot() \n\n\n\n\n\n连续变量箱线图\n\n\n\n\n\n\n3.4.7 添加均值点\n\n\nShow/Hide Code\nggplot(mpg, aes(x=drv, y=hwy, fill=drv)) +\n    geom_boxplot(alpha=0.7) +\n    stat_summary(fun=mean, geom=\"point\", shape=1, size=2, color = 'red') +\n    theme(legend.position=\"none\") \n\n\n\n\n\n添加均值点\n\n\n\n\n\n\n3.4.8 带数据点\n\n\nShow/Hide Code\n# data1 是之前创建的数据集\ndata1 |&gt; \n  ggplot( aes(x=name, y=value, fill=name)) +\n    geom_boxplot() +\n    scale_fill_viridis(discrete = TRUE) +  # 好看的色盲友好型颜色,离散变量\n    geom_jitter(color=\"grey\", size=0.5, alpha=0.5) +\n    theme_ipsum() + # 更适合排版的主题\n    theme(legend.position=\"none\") +\n    labs(x = \"\") + \n    ggtitle(\"A boxplot with jitter\")\n\n\n\n\n\n带抖动的箱线图\n\n\n\n\n\n\n3.4.9 外套箱线图\nggExtra包来实现更复杂（花哨）的图形，在ggplot2散点图的基础上再叠加箱线图、密度曲线等。\n\n\nShow/Hide Code\n# 创建ggplot散点图\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg, color = cyl, size = cyl)) +\n  geom_point() +\n  theme(legend.position = \"none\")\n\nggMarginal(p, type = \"histogram\")\n\n\n\n\n\nggMarginal散点图叠加直方图\n\n\n\n\n\n\nShow/Hide Code\nggMarginal(p, type = \"density\")\n\n\n\n\n\nggMarginal散点图叠加密度图\n\n\n\n\n\n\nShow/Hide Code\nggMarginal(p, type = \"boxplot\")\n\n\n\n\n\nggMarginal散点图叠加箱线图\n\n\n\n\n还可以定制化样式：\n\n\nShow/Hide Code\n# 设置边际直方图的尺寸大小为10\nggMarginal(p, type = \"histogram\", size = 10)\n\n\n\n\n\nggMarginal定制化样式-尺寸大小\n\n\n\n\n\n\nShow/Hide Code\n# 设置边际直方图的填充颜色为slateblue，x轴直方图分箱数为10\nggMarginal(p, type = \"histogram\", fill = \"slateblue\", xparams = list(bins = 10))\n\n\n\n\n\nggMarginal定制化样式-颜色和分箱\n\n\n\n\n\n\nShow/Hide Code\n# 只在x轴添加边际图，边际图颜色为紫色，尺寸为4\nggMarginal(p, margins = 'x', color = \"purple\", size = 4)\n\n\n\n\n\nggMarginal定制化样式-颜色和尺寸",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#base-r",
    "href": "boxplot.html#base-r",
    "title": "3  Boxplot",
    "section": "3.5 Base R",
    "text": "3.5 Base R\n主要是通过boxplot()函数.\n但是 base R 多看一秒都是浪费时间,直接ggplot2吧.\n如果实在想学,可以看 r-graph-gallery 的文档。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "boxplot.html#sec-ggstatsplot",
    "href": "boxplot.html#sec-ggstatsplot",
    "title": "3  Boxplot",
    "section": "3.6 Pearl",
    "text": "3.6 Pearl\n\n\nShow/Hide Code\n# 自动安装packages\nif(!require(ggstatsplot)) {\n  install.packages(\n    \"ggstatsplot\",\n    repos = \"https://cloud.r-project.org\"\n    )\n  }\n\n\n\n  有二进制版本，但源代码版本更新:\n     binary source needs_compilation\ndoBy 4.6.27  4.7.0             FALSE\n\n程序包'rbibutils'打开成功，MD5和检查也通过\n程序包'Rdpack'打开成功，MD5和检查也通过\n程序包'cowplot'打开成功，MD5和检查也通过\n程序包'Deriv'打开成功，MD5和检查也通过\n程序包'microbenchmark'打开成功，MD5和检查也通过\n程序包'SparseM'打开成功，MD5和检查也通过\n程序包'minqa'打开成功，MD5和检查也通过\n程序包'nloptr'打开成功，MD5和检查也通过\n程序包'reformulas'打开成功，MD5和检查也通过\n程序包'carData'打开成功，MD5和检查也通过\n程序包'abind'打开成功，MD5和检查也通过\n程序包'Formula'打开成功，MD5和检查也通过\n程序包'quantreg'打开成功，MD5和检查也通过\n程序包'elliptic'打开成功，MD5和检查也通过\n程序包'contfrac'打开成功，MD5和检查也通过\n程序包'deSolve'打开成功，MD5和检查也通过\n程序包'plyr'打开成功，MD5和检查也通过\n程序包'lme4'打开成功，MD5和检查也通过\n程序包'pbkrtest'打开成功，MD5和检查也通过\n程序包'lmerTest'打开成功，MD5和检查也通过\n程序包'car'打开成功，MD5和检查也通过\n程序包'coda'打开成功，MD5和检查也通过\n程序包'pbapply'打开成功，MD5和检查也通过\n程序包'mvtnorm'打开成功，MD5和检查也通过\n程序包'MatrixModels'打开成功，MD5和检查也通过\n程序包'hypergeo'打开成功，MD5和检查也通过\n程序包'RcppEigen'打开成功，MD5和检查也通过\n程序包'multcompView'打开成功，MD5和检查也通过\n程序包'gmp'打开成功，MD5和检查也通过\n程序包'Rmpfr'打开成功，MD5和检查也通过\n程序包'SuppDists'打开成功，MD5和检查也通过\n程序包'kSamples'打开成功，MD5和检查也通过\n程序包'BWStest'打开成功，MD5和检查也通过\n程序包'desc'打开成功，MD5和检查也通过\n程序包'RcppParallel'打开成功，MD5和检查也通过\n程序包'reshape'打开成功，MD5和检查也通过\n程序包'bayestestR'打开成功，MD5和检查也通过\n程序包'reshape2'打开成功，MD5和检查也通过\n程序包'prismatic'打开成功，MD5和检查也通过\n程序包'afex'打开成功，MD5和检查也通过\n程序包'BayesFactor'打开成功，MD5和检查也通过\n程序包'effectsize'打开成功，MD5和检查也通过\n程序包'PMCMRplus'打开成功，MD5和检查也通过\n程序包'rstantools'打开成功，MD5和检查也通过\n程序包'WRS2'打开成功，MD5和检查也通过\n程序包'zeallot'打开成功，MD5和检查也通过\n程序包'correlation'打开成功，MD5和检查也通过\n程序包'datawizard'打开成功，MD5和检查也通过\n程序包'ggcorrplot'打开成功，MD5和检查也通过\n程序包'ggrepel'打开成功，MD5和检查也通过\n程序包'ggside'打开成功，MD5和检查也通过\n程序包'ggsignif'打开成功，MD5和检查也通过\n程序包'insight'打开成功，MD5和检查也通过\n程序包'paletteer'打开成功，MD5和检查也通过\n程序包'parameters'打开成功，MD5和检查也通过\n程序包'performance'打开成功，MD5和检查也通过\n程序包'statsExpressions'打开成功，MD5和检查也通过\n程序包'ggstatsplot'打开成功，MD5和检查也通过\n\n下载的二进制程序包在\n    C:\\Users\\14913\\AppData\\Local\\Temp\\RtmpURTTMt\\downloaded_packages里\n\n\nShow/Hide Code\nif(!require(palmerpenguins)) {\n  install.packages(\n    \"palmerpenguins\", \n    repos = \"https://cloud.r-project.org\"\n    )\n  }\n\n\n程序包'palmerpenguins'打开成功，MD5和检查也通过\n\n下载的二进制程序包在\n    C:\\Users\\14913\\AppData\\Local\\Temp\\RtmpURTTMt\\downloaded_packages里\n\n\nShow/Hide Code\npalmerpenguins::penguins |&gt;\n  drop_na() |&gt;\n  ggstatsplot::ggbetweenstats(x = species, y = flipper_length_mm, 1)\n\n\n\n\n\n带有统计的小提琴箱线图\n\n\n\n\n在 ggstatsplot 可以看到进一步美化。\n或者\n在 tidyplots 有另一种风格的统计箱线图。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Boxplot</span>"
    ]
  },
  {
    "objectID": "density.html",
    "href": "density.html",
    "title": "4  Density",
    "section": "",
    "text": "4.1 PKG\n核密度曲线图其实是一个平滑的直方图，曲线下面积是1。\n通过geom_density()函数可以绘制核密度曲线图。\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(geomtextpath) # 添加文本路径\nlibrary(hrbrthemes) # theme_ipsum主题",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "density.html#单组",
    "href": "density.html#单组",
    "title": "4  Density",
    "section": "4.2 单组",
    "text": "4.2 单组\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length)) + \n  geom_density(fill=\"#69b3a2\", alpha=0.8) # 可选主题 theme_ipsum()\n\n\n\n\n\n基本的geom_density",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "density.html#多组",
    "href": "density.html#多组",
    "title": "4  Density",
    "section": "4.3 多组",
    "text": "4.3 多组\n\n4.3.1 镜像\n镜像密度曲线图见 Section 2.2.2\n\n\n4.3.2 分组和分面\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, fill = Species), ) + \n  geom_density(alpha=0.8)\n\n\n\n\n\n分组\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, fill = Species)) + \n  geom_density(alpha=0.8) + \n  facet_wrap(~ Species) + \n  theme(legend.position = \"none\")\n\n\n\n\n\n分面\n\n\n\n\n\n\n4.3.3 山脊图\n分面不如山脊图好看，见 Chapter 5\n\n\n4.3.4 堆叠\n通过position=“fill”绘制堆叠密度图，可以看到每个组的比例\n\n\nShow/Hide Code\nggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +\n    geom_density(adjust=1.5, position=\"fill\") +\n    theme_ipsum()\n\n\n\n\n\n堆叠密度图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "density.html#注释标签",
    "href": "density.html#注释标签",
    "title": "4  Density",
    "section": "4.4 注释/标签",
    "text": "4.4 注释/标签\n还可以使用annot数据框来添加注释，下面的例子中，我们在鸢尾花的密度曲线上添加了每个物种的名称注释。\n\n4.4.1 geom_text\n\n\nShow/Hide Code\nannot &lt;- data.frame(\n  Species = c(\"setosa\", \"versicolor\", \"virginica\"),\n  x = c(5.2, 5.5, 6.4),\n  y = c(1.2, 0.8, 0.8)\n)\n\nggplot(iris, aes(x = Sepal.Length, fill = Species)) + \n  geom_density(alpha=0.8)  +\n  geom_text(data=annot, aes(x=x, y=y, label=Species, color=Species), hjust=0, size=4.5) +\n  theme_ipsum() + # 适合印刷的主题\n  theme(legend.position = \"none\") \n\n\n\n\n\n带注释的密度曲线图\n\n\n\n\n\n\n4.4.2 textdensity\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, color = Species, label = Species)) +\n  geom_textdensity() + \n  theme_bw() + \n  theme(legend.position = \"none\")\n\n\n\n\n\ngeomtextpath 更方便添加标签,但是不能带fill颜色\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, color = Species, label = Species)) +\n  geom_textdensity(vjust = -0.4, hjust = \"ymid\") + # hjust = \"ymid\" 调整标签位置\n  theme_bw() + \n  theme(legend.position = \"none\")\n\n\n\n\n\ngeomtextpath 调整标签位置\n\n\n\n\ntext参数: \n\nsize: 文本大小\nfontface: 字体样式\nvjust: 垂直调整\nhjust: 水平调整\n\nr-graph-gallery 还有一些示例: geomtextpath",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "density.html#边缘图",
    "href": "density.html#边缘图",
    "title": "4  Density",
    "section": "4.5 边缘图",
    "text": "4.5 边缘图\n见 Section 3.4.9",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Density</span>"
    ]
  },
  {
    "objectID": "ridgeline.html",
    "href": "ridgeline.html",
    "title": "5  Ridgeline",
    "section": "",
    "text": "5.1 基础山脊图\n主要借助强大且美观的ggridges包来绘制山脊图。山脊图可以更好地展示多个分布的情况。\n山脊图（ridgeline chart）本质上是一组密度图（density plots），建议先学习密度图的绘制方法。\nShow/Hide Code\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) +\n  geom_density_ridges(alpha = 0.5) +\n  theme_ridges() + # 适合ridge图的主题\n  theme(legend.position = \"none\")\n\n\n\n\n\n基础山脊图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridgeline</span>"
    ]
  },
  {
    "objectID": "ridgeline.html#直方图类型",
    "href": "ridgeline.html#直方图类型",
    "title": "5  Ridgeline",
    "section": "5.2 直方图类型",
    "text": "5.2 直方图类型\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = price, y = cut, fill = cut)) +\n  geom_density_ridges(alpha = 0.5, stat=\"binline\") + # 直方图参数\n  theme_ridges() + # 适合ridge图的主题\n  theme(legend.position = \"none\")\n\n\n\n\n\n转换为直方图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridgeline</span>"
    ]
  },
  {
    "objectID": "ridgeline.html#带颜色",
    "href": "ridgeline.html#带颜色",
    "title": "5  Ridgeline",
    "section": "5.3 带颜色",
    "text": "5.3 带颜色\n\n\nShow/Hide Code\nggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) +\n\n  # 添加一个“渐变密度山峦图”几何对象层\n  # - geom_density_ridges_gradient() 是 ggridges 包的核心函数\n  # - `fill = ..x..` 的美学映射在这里生效，使得每个山峦的填充色根据其 x 轴数值（温度）进行渐变\n  geom_density_ridges_gradient(\n    # scale = 3: 控制山峦之间重叠的程度。数值越大，重叠越多，图形越紧凑\n    scale = 3,\n    # rel_min_height = 0.01: 裁剪每个密度曲线的尾部，移除高度低于最大高度1%的部分，使图形更整洁\n    rel_min_height = 0.01\n  ) +\n\n  # 使用 viridis 调色板来应用填充色\n  scale_fill_viridis(\n    # name = \"Temp. [F]\": 设置颜色图例的标题（尽管后面图例被隐藏了）\n    name = \"Temp. [F]\",\n    # option = \"C\": 选择 viridis 调色板中的 \"C\" 方案 (也称为 \"plasma\")\n    option = \"C\"\n  ) +\n\n  # 设置图表的标签\n  labs(title = 'Temperatures in Lincoln NE in 2016') + # 设置主标题\n\n  theme_ipsum() +\n\n  # 对主题进行微调\n  theme(\n    # legend.position=\"none\": 隐藏图例。因为颜色已经直观地反映在x轴上，所以图例不是必需的\n    legend.position=\"none\",\n    # panel.spacing: 调整不同面板（即每个月份的图）之间的垂直间距，使其更紧凑\n    panel.spacing = unit(0.1, \"lines\"),\n    # strip.text.x: 调整分面标题在X轴方向的文本属性。\n    strip.text.y = element_text(size = 8)\n  )\n\n\n\n\n\n带X轴颜色的山峦图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridgeline</span>"
    ]
  },
  {
    "objectID": "ridgeline.html#pearl",
    "href": "ridgeline.html#pearl",
    "title": "5  Ridgeline",
    "section": "5.4 Pearl",
    "text": "5.4 Pearl\n\n5.4.1 内部有图例和注释的山脊图\n一种内部有图例和注释的山脊图\n以下是生成该图的代码（因为原始数据比较大，在github，所以直接放了生成的图片）：\n\n\n\n内部有图例和注释的山脊图\n\n\n\n\nShow/Hide Code\nlibrary(tidyverse) # 数据整理和可视化的核心包集合\nlibrary(ggtext) # 增强ggplot2的文本渲染能力\nlibrary(ggdist) # 提供高级的分布可视化图层\nlibrary(glue) # 方便地将变量嵌入到字符串中\nlibrary(patchwork) # 用于组合和排列多个ggplot图表\n\n\n# 从 github 读取数据文件\nrent = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/rent.csv\"\n) # 包含原始租金信息的CSV文件\nrent_title_words = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/rent_title_words.csv\"\n) # 包含从标题中提取的词语和对应租金的数据\ndf_plot = read_csv(\n  \"https://raw.githubusercontent.com/ggvisPro/data/refs/heads/main/rent/df_plot.csv\"\n) # 专门为绘图准备的聚合数据\n\n# --- 数据预处理 ---\n\n# 按平均价格降序排列数据框\ndf_plot &lt;- df_plot |&gt; arrange(desc(mean_price))\n# 将 'word' 列转换为因子类型，并指定其顺序（levels），确保在图表中的显示顺序与排列后的一致\ndf_plot$word &lt;- factor(df_plot$word, levels = unique(df_plot$word))\n\n# 计算一些将在图表中使用的全局统计量\nmean_price &lt;- mean(rent$price, na.rm = TRUE) # 所有房源的平均租金\nmedian_price &lt;- median(rent$price, na.rm = TRUE) # 所有房源的租金中位数\nn_rental_posts &lt;- nrow(subset(rent, !is.na(title))) # 有效（标题不为空）的出租帖子总数\n\n# --- 图表美学设置 ---\n\n# 定义图表的背景颜色\nbg_color &lt;- \"grey97\"\n\n# 使用 glue 包创建一个动态的副标题字符串\nplot_subtitle = glue(\n  \"Adjectives used to describe houses and apartments in San Francisco Bay Area \nCraigslist rental post titles, and their relationship with rent prices. Data is from \n{scales::number(n_rental_posts, big.mark = ',')} Craigslist rental posts between 2000 and 2018.\nThe 15 most frequent adjectives are shown.\n\"\n)\n\n# --- 创建主图表 (p) ---\n\np &lt;- df_plot |&gt;\n  ggplot(aes(word, price)) + # 初始化ggplot对象，设置x轴为单词，y轴为价格\n  # 添加半眼图层（雨云图的核心部分），展示数据分布\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  # 添加置信区间图层，默认显示50%, 80%, 95%的区间\n  stat_interval() +\n  # 添加一个点来表示每个单词对应的租金中位数\n  stat_summary(geom = \"point\", fun = median) +\n  # 在图表特定位置添加文本，作为平均卧室数的列标题\n  annotate(\n    \"text\",\n    x = 16,\n    y = 0,\n    label = \"(Avg. Bedrooms)\",\n    size = 3,\n    hjust = 0.5\n  ) +\n  # 为每个单词计算并显示平均卧室数\n  stat_summary(\n    aes(y = beds), # 使用 'beds' 列的数据\n    geom = \"text\", # 以文本形式显示\n    fun.data = function(x) {\n      # 自定义一个函数来计算均值并格式化输出\n      data.frame(\n        y = 0, # 将文本放置在y=0的位置\n        label = sprintf(\n          \"(%s)\",\n          scales::number(\n            mean(ifelse(x &gt; 0, x, NA), na.rm = TRUE),\n            accuracy = 0.1\n          )\n        )\n      )\n    },\n    size = 2.5\n  ) +\n  # 添加一条水平虚线，代表所有房源的租金中位数\n  geom_hline(yintercept = median_price, col = \"grey30\", lty = \"dashed\") +\n  # 为中位数线添加文本标签\n  annotate(\n    \"text\",\n    x = 16,\n    y = median_price + 50,\n    label = \"Median Rent\",\n    size = 3,\n    hjust = 0\n  ) +\n  # 将x轴的标签（单词）转换为大写\n  scale_x_discrete(labels = toupper) +\n  # 设置y轴（价格）的刻度标记\n  scale_y_continuous(breaks = seq(2500, 20000, 2500)) +\n  # 手动设置颜色方案，这里假设 MetBrewer 包已安装\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n  # 翻转坐标轴，使条形图水平显示，并设置y轴（翻转后为价格轴）的范围，clip=\"off\"允许绘图超出面板区域\n  coord_flip(ylim = c(0, 10000), clip = \"off\") +\n  # 移除默认的颜色图例\n  guides(col = \"none\") +\n  # 设置图表的标题、副标题、说明文字和坐标轴标签\n  labs(\n    title = toupper(\"Are 'nice' and 'clean' apartments really cheaper?\"),\n    subtitle = plot_subtitle,\n    caption = \"Y-axis capped at $10,000.&lt;br&gt;\n     Data source: Pennington, Kate (2018). \n     Bay Area Craigslist Rental Housing Posts, 2000-2018.&lt;br&gt;\n     From github.com/katepennington/historic_bay_area_craigslist_housing_posts/blob/master/clean_2000_2018.csv.zip.\n     &lt;br&gt;\n     Visualization: Ansgar Wolsing\",\n    x = NULL, # 移除x轴标签\n    y = \"Rent (USD)\"\n  ) +\n  # 使用一个简洁的主题\n  theme_minimal() +\n  # 对主题进行深度定制\n  theme(\n    plot.background = element_rect(color = NA, fill = bg_color), # 设置图表背景\n    panel.grid = element_blank(), # 移除所有网格线\n    panel.grid.major.x = element_line(linewidth = 0.1, color = \"grey75\"), # 添加主x轴网格线（翻转后是水平线）\n    plot.title = element_text(),\n    plot.title.position = \"plot\", # 标题位置与整个图对齐\n    plot.subtitle = element_textbox_simple(\n      # 使用ggtext设置副标题，支持自动换行\n      margin = margin(t = 4, b = 16),\n      size = 10\n    ),\n    plot.caption = element_textbox_simple(\n      # 使用ggtext设置说明文字\n      margin = margin(t = 12),\n      size = 7\n    ),\n    plot.caption.position = \"plot\", # 说明文字位置与整个图对齐\n    axis.text.y = element_text(hjust = 0, margin = margin(r = -10)),\n    plot.margin = margin(4, 4, 4, 4) # 设置图表外边距\n  )\n\n# --- 创建自定义图例 (p_legend) ---\n\n# 为图例创建一个小的数据框，只使用 \"beautiful\" 这个词的数据作为示例\ndf_for_legend &lt;- rent_title_words |&gt;\n  filter(word == \"beautiful\")\n\n# 创建一个独立的ggplot对象作为图例\np_legend &lt;- df_for_legend |&gt;\n  ggplot(aes(word, price)) +\n  # 同样添加半眼图、区间图和中位数点，作为图例的示例图形\n  stat_halfeye(fill_type = \"segments\", alpha = 0.3) +\n  stat_interval() +\n  stat_summary(geom = \"point\", fun = median) +\n  # 添加富文本注释，解释图表的各个部分\n  annotate(\n    \"richtext\",\n    x = c(0.8, 0.8, 0.8, 1.4, 1.8),\n    y = c(1000, 5000, 3000, 2400, 4000),\n    label = c(\n      \"50% of prices&lt;br&gt;fall in this range\",\n      \"95% of prices\",\n      \"80% of prices\",\n      \"Median\",\n      \"Distribution&lt;br&gt;of prices\"\n    ),\n    fill = NA,\n    label.size = 0,\n    size = 2,\n    vjust = 1,\n  ) +\n  # 添加曲线箭头，将文本注释指向图形的相应部分\n  geom_curve(\n    data = data.frame(\n      x = c(0.7, 0.80, 0.80, 1.225, 1.8),\n      xend = c(0.95, 0.95, 0.95, 1.075, 1.8),\n      y = c(1800, 5000, 3000, 2300, 3800),\n      yend = c(1800, 5000, 3000, 2100, 2500)\n    ),\n    aes(x = x, xend = xend, y = y, yend = yend),\n    stat = \"unique\",\n    curvature = 0.2,\n    linewidth = 0.2,\n    color = \"grey12\",\n    arrow = arrow(angle = 20, length = unit(1, \"mm\"))\n  ) +\n  # 设置与主图一致的颜色方案\n  scale_color_manual(values = MetBrewer::met.brewer(\"VanGogh3\")) +\n  # 翻转坐标轴，并精心调整坐标轴范围以适应图例内容\n  coord_flip(xlim = c(0.75, 1.3), ylim = c(0, 6000), expand = TRUE) +\n  # 移除图例\n  guides(color = \"none\") +\n  # 添加图例的标题\n  labs(title = \"Legend\") +\n  # 使用空白主题，移除所有坐标轴、背景等元素\n  theme_void() +\n  # 对图例进行主题微调\n  theme(\n    plot.title = element_text(size = 9, hjust = 0.075),\n    plot.background = element_rect(\n      color = \"grey30\",\n      linewidth = 0.2,\n      fill = bg_color\n    )\n  ) # 为图例添加边框和背景色\n\n# --- 组合图表 ---\n\n# 使用 patchwork 包的 inset_element() 函数，将自定义图例 (p_legend) 嵌入到主图表 (p) 的指定位置\n# l, r, t, b 分别代表左、右、上、下的边界，数值是相对于主图绘图区域的比例\np + inset_element(p_legend, l = 0.6, r = 1.0, t = 0.99, b = 0.7, clip = FALSE)\n\n\n\n\n5.4.2 山水画一般的山脊图\n山水画一般的山脊图,可视化1900年以来美国最受欢迎的50个男女姓名\n\n\n\n可视化1900年以来美国最受欢迎的50个男女姓名\n\n\n以下是生成该图的代码：\n\n\nShow/Hide Code\n# 步骤 1: 加载所需的库\n# ------------------------------------------------\n# 注意：所有与自定义字体相关的库 (extrafont, showtext) 均已移除。\nlibrary(tidyverse)    # 用于数据处理 (dplyr) 和绘图 (ggplot2) 的核心包集合\nlibrary(ggridges)     # 用于创建山脊图 (geom_ridgeline)\nlibrary(cowplot)      # 用于组合多个 ggplot 图表\n\n\n# 步骤 2: 数据加载和准备\n# ------------------------------------------------\n\n# 加载 babynames 数据集，它包含了美国自1880年以来的婴儿姓名数据\nbabynames &lt;- babynames::babynames\n\n# 筛选出历史上总出生数最多的 50 个女性名字\ntop_female &lt;- babynames |&gt;\n  filter(sex == \"F\") |&gt;                  # 1. 筛选性别为女性的数据\n  group_by(name) |&gt;                      # 2. 按名字进行分组\n  summarise(total = sum(n)) |&gt;           # 3. 计算每个名字在所有年份的总出生数\n  slice_max(total, n = 50) |&gt;            # 4. 提取总数排名前50的名字\n  mutate(\n    name = forcats::fct_reorder(name, -total) # 5. 将名字转换为因子，并根据总数降序排列\n  ) |&gt;\n  pull(name)                             # 6. 提取出排好序的名字向量，作为后续排序的基准\n\n# 筛选出历史上总出生数最多的 50 个男性名字 (逻辑同上)\ntop_male &lt;- babynames |&gt;\n  filter(sex == \"M\") |&gt;\n  group_by(name) |&gt;\n  summarise(total = sum(n)) |&gt;\n  slice_max(total, n = 50) |&gt;\n  mutate(\n    name = forcats::fct_reorder(name, -total)\n  ) |&gt;\n  pull(name)\n\n# 准备用于绘制山脊图的女性名字数据\nfemale_names &lt;- babynames |&gt;\n  filter(\n    sex == \"F\",\n    name %in% top_female  # 1. 只保留属于前50热门列表中的名字\n  ) |&gt;\n  # 2. 将name列转换为因子，并指定其顺序与top_female一致，确保Y轴按总排名显示\n  mutate(name = factor(name, levels = levels(top_female))) |&gt;\n  group_by(year, name) |&gt;   # 3. 按年份和名字分组\n  summarise(n = sum(n))     # 4. 聚合数据\n\n# 准备用于绘制山脊图的男性名字数据 (逻辑同上)\nmale_names &lt;- babynames |&gt;\n  filter(\n    sex == \"M\",\n    name %in% top_male\n  ) |&gt;\n  mutate(name = factor(name, levels = levels(top_male))) |&gt;\n  group_by(year, name) |&gt;\n  summarise(n = sum(n))\n\n\n# 步骤 3: 创建独立的图表\n# ------------------------------------------------\n\n########### 女性名字山脊图 (plot1) ###########\nplot1 &lt;- ggplot(female_names, aes(x = year, y = fct_reorder(name, n), height = n / 50000, group = name)) +\n  geom_ridgeline(\n    alpha = 0.5, scale = 4.5, linewidth = 0,\n    fill = \"#05595B\", color = \"white\"\n  ) +\n  xlim(1900, NA) +\n  labs(title = \"Female\", y = \"\", x = \"\") +\n  theme_light() + # 应用一个明亮的主题\n  theme(\n    # 注意：所有 'family' 参数已被移除，将使用系统默认字体\n    plot.title = element_text(hjust = 0, size = 15),\n    axis.ticks.y = element_blank(),\n    axis.text = element_text(size = 8),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(linewidth = 0.5),\n    panel.border = element_blank()\n  ) +\n  geom_segment(aes(x = 1967, xend = 1967, y = 56.7, yend = 52), color = \"#404040\") +\n  geom_segment(aes(x = 1967, xend = 1964, y = 56.7, yend = 56.7), color = \"#404040\") +\n  annotate(\n    geom = \"text\", x = 1970, y = 54, label = \"73,982 babies called\\n'Mary' in 1921\", hjust = \"left\",\n    size = 3, color = \"#404040\" # 'family' 参数已移除\n  )\n\n######### 男性名字山脊图 (plot2) #########\nplot2 &lt;- ggplot(male_names, aes(x = year, y = fct_reorder(name, n), height = n / 50000, group = name)) +\n  geom_ridgeline(\n    alpha = 0.5, scale = 4.5, linewidth = 0,\n    fill = \"#603601\", color = \"white\"\n  ) +\n  xlim(1900, NA) +\n  labs(title = \"Male\", y = \"\", x = \"\") +\n  theme_light() +\n  theme(\n    # 注意：所有 'family' 参数已被移除\n    plot.title = element_text(hjust = 0, size = 15),\n    axis.ticks.y = element_blank(),\n    axis.text = element_text(size = 8),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_line(linewidth = 0.5),\n    panel.border = element_blank(),\n    panel.background = element_rect(fill = \"white\"),\n    plot.background = element_rect(fill = \"white\")\n  ) +\n  geom_segment(aes(x = 1975, xend = 1975, y = 58, yend = 53.1), color = \"#404040\") +\n  geom_segment(aes(x = 1975, xend = 1972, y = 58, yend = 58), color = \"#404040\") +\n  annotate(\n    geom = \"text\", x = 1977, y = 54, label = \"94,756 babies called\\n'James' in 1947\", hjust = \"left\",\n    size = 3, color = \"#404040\" # 'family' 参数已移除\n  )\n\n\n# 步骤 4: 组合图表并添加标题和说明\n# ------------------------------------------------\n\n# 使用 cowplot 创建一个独立的总标题\ntitle_theme &lt;- ggdraw() +\n  draw_label(\"50 most common given names in the US since 1900\",\n    fontface = \"bold\",\n    size = 15,\n    hjust = 0.4 # 'fontfamily' 参数已移除\n  )\n\n# 使用 cowplot 创建一个独立的图表说明/来源信息\ncaption &lt;- ggdraw() +\n  draw_label(\"Source: {babynames} from Hadley Wickham | Graphic: Laura Navarro Soler\",\n    size = 15,\n    hjust = 0.5,\n    color = \"#6B6B6B\" # 'fontfamily' 参数已移除\n  )\n\n# 将两个山脊图水平并排组合\ngridofplots &lt;- plot_grid(plot1, plot2, nrow = 1)\n\n# 将标题、组合图、图表说明垂直堆叠成最终的成品图\nplot_grid(title_theme,\n  gridofplots,\n  caption,\n  ncol = 1, # 最终所有组件排成一列\n  rel_heights = c(0.2, 1.5, 0.1) # 分别指定标题、图、说明的相对高度\n)",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Ridgeline</span>"
    ]
  },
  {
    "objectID": "violin.html",
    "href": "violin.html",
    "title": "6  Violin",
    "section": "",
    "text": "6.1 PKG\nggplot2::geom_violin() 或 base R::vioplot 可以绘制小提琴图。\n小提琴图是箱线图的变体, 弥补了箱线图隐藏数据点的缺点。(箱线图陷阱)\n小提琴图是一种强大的可视化技术, 允许比较多个组的数量和分布,但是使用频率低于箱线图,我不理解.\n如果数据量少(几百个),还可以叠加散点.\nShow/Hide Code\nlibrary(tidyverse)",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#基础",
    "href": "violin.html#基础",
    "title": "6  Violin",
    "section": "6.2 基础",
    "text": "6.2 基础\n\n\nShow/Hide Code\nggplot(iris, aes(x = Species, y = Sepal.Length)) + \n  geom_violin()\n\n\n\n\n\n基础geom_violin\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\") \n\n\n\n\n\n稍微美化的geom_violin\n\n\n\n\nwider格式数据转化为long格式数据后, 再使用geom_violin()绘制小提琴图。\n\n\nShow/Hide Code\nknitr::kable(head(iris))\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n\niris数据(wider格式数据)\n\n\ntidyr::gather() 是个有意思的函数,可以将wider格式数据转化为long格式数据。\n\n\nShow/Hide Code\niris_long &lt;- iris |&gt; \n  gather(key = \"type\", value = \"value\", -Species)\n\nknitr::kable(head(iris_long))\n\n\n\n\n\nSpecies\ntype\nvalue\n\n\n\n\nsetosa\nSepal.Length\n5.1\n\n\nsetosa\nSepal.Length\n4.9\n\n\nsetosa\nSepal.Length\n4.7\n\n\nsetosa\nSepal.Length\n4.6\n\n\nsetosa\nSepal.Length\n5.0\n\n\nsetosa\nSepal.Length\n5.4\n\n\n\niris数据(wider格式数据转化为long格式后)\n\n\nShow/Hide Code\ntable(iris_long$type)\n\n\n\nPetal.Length  Petal.Width Sepal.Length  Sepal.Width \n         150          150          150          150 \n\n\n\n\nShow/Hide Code\nggplot(iris_long, aes(x = type, y = value)) +\n  geom_violin()\n\n\n\n\n\niris数据(wider格式数据转化为long格式后)小提琴图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#排序",
    "href": "violin.html#排序",
    "title": "6  Violin",
    "section": "6.3 排序",
    "text": "6.3 排序\n有多种方法: forcats::fct_reorder(), dplyr::arrange() base R::reorder()等,我一般用forcats::fct_reorder(), 另外两种方法见Reorder a variable with ggplot2。\n\n\nShow/Hide Code\niris_long |&gt; \n  # 重点是这里的fct_reorder\n  ggplot(aes(x = fct_reorder(type, value, .fun = median), y = value, fill = type)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n使用fct_reorder()排序小提琴图\n\n\n\n\n注意,如果X已经有顺序,比如月份等,就不适合使用fct_reorder()。",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#横向",
    "href": "violin.html#横向",
    "title": "6  Violin",
    "section": "6.4 横向",
    "text": "6.4 横向\n有几种方法可以设置小提琴图为横向显示。\n\n在aes交换x和y的参数\ncoord_flip()\norientation = “y”\n\ncoord_flip()是比较落后的方式,纯粹是简单粗暴的翻转(回归线基于旋转前;调整坐标轴scale基于旋转前,反直觉), 现在优先考虑aes()交换x和y的参数,ggplot会自动识别方向,如果识别错误,可以使用orientation = \"y\"。\n\n\nShow/Hide Code\niris_long |&gt; \n  ggplot(aes(x = value, y = fct_reorder(type, value, .fun = median), fill = type)) + \n  geom_violin(alpha = 0.5) + \n  theme_minimal() + \n  theme(legend.position = \"none\") \n\n\n\n\n\n使用coord_flip()横向显示小提琴图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#箱线图",
    "href": "violin.html#箱线图",
    "title": "6  Violin",
    "section": "6.5 +箱线图",
    "text": "6.5 +箱线图\n使用geom_boxplot()和geom_violin()结合,可以同时显示小提琴图和箱线图。 注意: 调整geom_boxplot()的宽度,并且白色(fill仅放入geom_violin()),使其更美观。\n\n\nShow/Hide Code\niris_long |&gt; \n  ggplot(aes(x = type, y = value)) + \n  geom_violin(aes(fill = type), alpha = 0.5) + \n  geom_boxplot(width = 0.05) + \n  theme(legend.position = \"none\") \n\n\n\n\n\n小提琴图与箱线图结合\n\n\n\n\n还可以用fill增加分组.\n\n\nShow/Hide Code\nggplot(iris_long, aes(x = type, y = value, fill = Species)) +\n  geom_violin() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n分组小提琴图",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#base-r",
    "href": "violin.html#base-r",
    "title": "6  Violin",
    "section": "6.6 base R",
    "text": "6.6 base R\nr-graph-gallery 有base R::vioplot的 小提琴图示例",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "violin.html#pearl",
    "href": "violin.html#pearl",
    "title": "6  Violin",
    "section": "6.7 Pearl",
    "text": "6.7 Pearl\n一种非常美观的带有统计量的小提琴图,见 Section 3.6",
    "crumbs": [
      "Distribution",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Violin</span>"
    ]
  },
  {
    "objectID": "correlation.html",
    "href": "correlation.html",
    "title": "Correlation",
    "section": "",
    "text": "此部分探数据(变量)之间的关系\n\n\n\n变量间的关系\n\n\n\n7  Scatter 散点图，用数据点显示两个变量之间的关系\n8  Heatmap 热力图, 用颜色块显示变量之间的关系\n9  Correlogram 相关性图, 显示变量之间的统计学相关性\n10  Bubble 气泡图, 用气泡的大小和颜色表示三个变量之间的关系\n11  Conn-Scatter 连接散点图, 用线连接数据点显示变量之间的关系\n12  Density 2D 二维密度图, 用颜色块显示两个变量的密度分布",
    "crumbs": [
      "Correlation"
    ]
  },
  {
    "objectID": "scatter.html",
    "href": "scatter.html",
    "title": "7  Scatter",
    "section": "",
    "text": "7.1 PKG\n散点图显示两个数值变量之间的关系。每个点代表一个观测值。\nShow/Hide Code\n# 环境准备\nlibrary(tidyverse) # tidyverse\nlibrary(hrbrthemes) # 主题\nlibrary(patchwork) # 组合图形\nlibrary(geomtextpath) # 添加文本路径\nlibrary(ggiraph) # 交互式图形\nlibrary(sf) # 地理数据处理\nlibrary(qqman) # 曼哈顿图\nlibrary(knitr)\nset.seed(123)",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#ggplot2",
    "href": "scatter.html#ggplot2",
    "title": "7  Scatter",
    "section": "7.2 ggplot2",
    "text": "7.2 ggplot2\n\n7.2.1 基础\n\n\nShow/Hide Code\nggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + \n    geom_point()\n\n\n\n\n\n基础散点图\n\n\n\n\n\n\n7.2.2 更改外观\n\n\nShow/Hide Code\nggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + \n    geom_point(\n        color=\"orange\",\n        fill=\"#69b3a2\",\n        shape=21,\n        alpha=0.5,\n        size=6,\n        stroke = 2\n        )\n\n\n\n\n\n更改外观\n\n\n\n\n\n\nShow/Hide Code\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n    geom_point(\n        color = \"black\",\n        fill = \"#69b3a2\",\n        shape = 22,\n        alpha = 0.5,\n        size = 6,\n        stroke = 1\n    ) +\n    theme_ipsum()   \n\n\n\n\n\n使用hrbrthemes::theme_ipsum()主题\n\n\n\n\n\n\n7.2.3 第三变量\n\n\nShow/Hide Code\n# 改可以同时添加多个变量到aes()中,比如shape+color,但是比较乱\n\n# color\np_color &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + \n    geom_point() + \n    theme(legend.position = \"bottom\")\n\n# alpha 不推荐把离散变量Species添加到alpha\np_alpha &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, alpha=Species)) + \n    geom_point() + \n    theme(legend.position = \"bottom\")\n\n\n# Shape\np_shape &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) + \n    geom_point() + \n    theme(legend.position = \"bottom\")\n\n# Size 不推荐把离散变量Species添加到size\np_size &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, size=Species)) + \n    geom_point() +\n    theme(legend.position = \"bottom\")\n\n(p_color + p_alpha) / (p_shape + p_size)\n\n\n\n\n\n把第三种变量添加到aes()中\n\n\n\n\n\n\n7.2.4 rug\n在X轴和Y轴上添加geom_rug图,可以显示数据的分布情况。\n\n\nShow/Hide Code\nggplot(iris, aes(x=Sepal.Length, Petal.Length)) +\n  geom_point() +\n  geom_rug(color=\"steelblue\",alpha=0.1, size=1.5)\n\n\n\n\n\n添加rug图,显示点的分布\n\n\n\n\n\n\n7.2.5 拟合线\n\n\nShow/Hide Code\n# 基础散点图\np1 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + \n  geom_point( color=\"#69b3a2\") \n \n# 添加线性趋势\np2 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +\n  geom_point() +\n  geom_smooth(method=lm , color=\"red\", se=FALSE) \n\n# 添加线和阴影\np3 &lt;- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +\n  geom_point() +\n  geom_smooth(method=lm , color=\"red\", fill=\"#69b3a2\", se=TRUE) \n\np1 / p2 / p3\n\n\n\n\n\n添加拟合线\n\n\n\n\n\n\n7.2.6 拟合线标签\ngeom_labelsmooth() 创建带有lable的线\n\n\nShow/Hide Code\nlibrary(hrbrthemes)\nlibrary(patchwork)\nlibrary(geomtextpath)\n\n# 一个拟合线\n\np1 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +\n  geom_point() +\n  geom_labelsmooth(\n    aes(label = 'My Label'),\n    fill = \"white\",\n    method = \"lm\",\n    formula = y ~ x,\n    size = 6,\n    linewidth = 2,\n    boxlinewidth = 0.6\n  )\n\n# 多个拟合线\np2 &lt;- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +\n  geom_point() +\n  geom_labelsmooth(\n    aes(label = Species),\n    fill = \"white\",\n    method = \"lm\",\n    formula = y ~ x,\n    size = 3,\n    linewidth = 1,\n    boxlinewidth = 0.4\n  ) +\n  guides(color = 'none')\n\np1 + p2\n\n\n\n\n\n带有lable的线\n\n\n\n\n\n\n7.2.7 外套箱线图\n见 Section 3.4.9",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#标注",
    "href": "scatter.html#标注",
    "title": "7  Scatter",
    "section": "7.3 标注",
    "text": "7.3 标注\n在图上添加标注,可以突出重点信息, 参考WHY ANNOTATING?\n\n7.3.1 text\n添加文本标注的几种方式：geom_text()、geom_label()、annotate()。geom_text() 和 annotate() 写法不同,效果相同，geom_label() 有背景色。annotate() 是更全能的标注方式\n\n\nShow/Hide Code\np &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) +\n    geom_point()\n\n# 注释的坐标和内容\nannotation &lt;- data.frame(\n    x = c(2, 4.5),\n    y = c(20, 25),\n    label = c(\"label 1\", \"label 2\")\n)\n\n# 使用 annotate() 添加标注\n# p +\n#     annotate(\n#         \"text\",\n#         x = c(2, 4.5),\n#         y = c(20, 25),\n#         label = c(\"label 1\", \"label 2\"),\n#         color = \"orange\",\n#         size = 7,\n#         angle = 45,\n#         fontface = \"bold\"\n#     )\n\n# 使用 geom_text() 添加标注\np +\n    geom_text( # 或者使用 geom_label\n        data = annotation,\n        aes(x = x, y = y, label = label),\n        color = \"orange\",\n        size = 7,\n        angle = 45,\n        fontface = \"bold\"\n    )\n\n\n\n\n\n使用geom_text()添加标注\n\n\n\n\n\n\n7.3.2 label\n\n\nShow/Hide Code\ndata = head(mtcars, 30)\n\nggplot(data, aes(x = wt, y = mpg)) +\n    geom_point() + # Show dots\n    geom_label(\n        label = \"Look at this!\",\n        x = 4.1,\n        y = 20,\n        label.padding = unit(0.55, \"lines\"), # Rectangle size around label\n        label.size = 0.35,\n        color = \"black\",\n        fill = \"#69b3a2\"\n    )\n\n\n\n\n\n只添加一个文本标签\n\n\n\n\n\n\nShow/Hide Code\ndata &lt;- head(iris, 20)\n\nggplot(data, aes(x = Sepal.Length, y = Sepal.Width)) + \n    geom_point() + \n    geom_label( # 与ggplot2语法相似\n        data = data |&gt; filter(Sepal.Length&gt;5 & Sepal.Width&gt;2),\n        aes(label = Species) \n    )\n\n\n\n\n\n给一部分数据加标签\n\n\n\n\n\n\nShow/Hide Code\n# 区别是 geom_label() 有背景色, 没有check_overlap参数\n\ndata = head(mtcars, 30)\n\np &lt;- ggplot(data, aes(x=wt, y=mpg)) +\n  geom_point() \n\n# 使用 geom_text() 添加标签\np_text &lt;- p +\n    geom_text(\n        label = rownames(data), # 或者 data$&lt;列名&gt;\n        nudge_x = 0.25, # 调整标签x位置\n        nudge_y = 0.25, # 调整标签y位置\n        check_overlap = T # 避免标签重叠,重叠只会留一个\n    )\n\np_label &lt;- p +\n    geom_label(\n        label = rownames(data), # 或者 data$&lt;列名&gt;\n        nudge_x = 0.25, # 调整标签x位置\n        nudge_y = 0.25, # 调整标签y位置\n    )\n\np_text + p_label\n\n\n\n\n\n使用 geom_text() / geom_label() 添加标签\n\n\n\n\n\n\n7.3.3 图形\n\n\nShow/Hide Code\n# rect 矩形\np +\n    annotate(\n        \"rect\", \n        xmin = c(2, 4),\n        xmax = c(3, 5),\n        ymin = c(20, 10),\n        ymax = c(30, 20),\n        alpha = 0.2,\n        color = \"blue\",\n        fill = \"blue\"\n    )\n\n\n\n\n\n使用 annotate() 添加图形标注\n\n\n\n\nShow/Hide Code\n#  线段\np +\n    annotate(\n        \"segment\",\n        x = 1,\n        xend = 3,\n        y = 25,\n        yend = 15,\n        colour = \"purple\",\n        size = 3,\n        alpha = 0.6\n    )\n\n\n\n\n\n使用 annotate() 添加图形标注\n\n\n\n\nShow/Hide Code\n# segment + arrow 箭头\np +\n    annotate(\n        \"segment\",\n        x = 2,\n        xend = 4,\n        y = 15,\n        yend = 25,\n        colour = \"pink\",\n        size = 3,\n        alpha = 0.6,\n        arrow = arrow()\n    )\n\n\n\n\n\n使用 annotate() 添加图形标注\n\n\n\n\n\n\nShow/Hide Code\np + \n  # 水平线\n  geom_hline(yintercept=25, color=\"orange\", size=1) + \n  # 垂直线\n  geom_vline(xintercept=3, color=\"orange\", size=1)\n\n\n\n\n\n使用 geom_hline() 添加水平线, geom_vline() 添加垂直线\n\n\n\n\n\n\nShow/Hide Code\n# 好像不知道这个到底有啥用\np +\n    annotate(\n        \"pointrange\",\n        x = 3.5,\n        y = 20,\n        ymin = 12,\n        ymax = 28,\n        colour = \"orange\",\n        size = 1,\n        alpha = 0.6\n    )\n\n\n\n\n\n使用 pointrange() 添加一个点和一条线段",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#base-r",
    "href": "scatter.html#base-r",
    "title": "7  Scatter",
    "section": "7.4 Base R",
    "text": "7.4 Base R\n见 R-graph-gallery 的 scatterplot",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#interactive",
    "href": "scatter.html#interactive",
    "title": "7  Scatter",
    "section": "7.5 Interactive",
    "text": "7.5 Interactive\n\n\nShow/Hide Code\n# 将mtcars数据集的行名（汽车型号）保存到一个名为'car'的新列中，方便后续调用。\nmtcars$car &lt;- rownames(mtcars)\n\n# p1: 创建一个可交互的散点图。\n# x轴是车重(wt)，y轴是燃油效率(mpg)。\n# 鼠标悬停在点上时，会显示汽车型号(tooltip = car)。\np1 &lt;- ggplot(mtcars, aes(wt, mpg, tooltip = car, data_id = car)) +\n  geom_point_interactive(size = 4)\n\n# p2: 创建一个可交互的水平条形图。\n# x轴是汽车型号，并按燃油效率(mpg)从低到高排序 (reorder(car, mpg))。\n# y轴是燃油效率(mpg)。\n# coord_flip()将图表翻转为水平方向，便于阅读。\np2 &lt;- ggplot(mtcars, aes(x = reorder(car, mpg), y = mpg, tooltip = car, data_id = car)) +\n  geom_col_interactive() +\n  coord_flip()\n\n# 使用patchwork包的 `+` 号，将散点图(p1)和条形图(p2)并排拼接成一张图。\ncombined_plot &lt;- p1 + p2 + plot_layout(ncol = 2)\n\n# 使用ggiraph包的girafe()函数，将拼接好的静态图转换为最终的HTML交互式图表。\ngirafe(ggobj = combined_plot)\n\n\n\n\n交互式散点图\n\n\n\n\nShow/Hide Code\n# 从网络读取世界地图的地理空间数据 (.geojson格式)\nworld_sf &lt;- read_sf(\"https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson\")\n\n# 从地图数据中移除南极洲和格陵兰，因为它们通常很大且没有数据，会影响可视化。\nworld_sf &lt;- world_sf %&gt;%\n  filter(!name %in% c(\"Antarctica\", \"Greenland\"))\n\n# 创建一个包含幸福度指数等指标的示例数据集。\nhappiness_data &lt;- data.frame(\n  Country = c(\"France\", \"Germany\", \"United Kingdom\", \"Japan\", \"China\", \"Vietnam\", \"United States of America\", \"Canada\", \"Mexico\"),\n  Continent = c(\"Europe\", \"Europe\", \"Europe\", \"Asia\", \"Asia\", \"Asia\", \"North America\", \"North America\", \"North America\"),\n  Happiness_Score = rnorm(mean = 30, sd = 20, n = 9),\n  GDP_per_capita = rnorm(mean = 30, sd = 20, n = 9),\n  Social_support = rnorm(mean = 30, sd = 20, n = 9),\n  Healthy_life_expectancy = rnorm(mean = 30, sd = 20, n = 9)\n)\n\n# 使用左连接(left_join)将幸福度数据合并到世界地图数据中。\n# 连接的依据是国家名称 (地图中的 'name' 和 幸福度数据中的 'Country')。\nworld_sf &lt;- world_sf %&gt;%\n  left_join(happiness_data, by = c(\"name\" = \"Country\"))\n\n# p1: 创建散点图，展示人均GDP与幸福度指数的关系。\np1 &lt;- ggplot(world_sf, aes(GDP_per_capita, Happiness_Score, tooltip = name, data_id = name, color = name)) +\n  geom_point_interactive(data = filter(world_sf, !is.na(Happiness_Score)), size = 4) +\n  theme_minimal() +\n  theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\")\n\n# p2: 创建水平条形图，按幸福度指数对国家进行排序。\np2 &lt;- ggplot(world_sf, aes(x = reorder(name, Happiness_Score), y = Happiness_Score, tooltip = name, data_id = name, fill = name)) +\n  geom_col_interactive(data = filter(world_sf, !is.na(Happiness_Score))) +\n  coord_flip() + # 翻转坐标轴，使其成为水平条形图\n  theme_minimal() +\n  theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\")\n\n# p3: 创建分层设色地图 (choropleth map)。\n# 灰色层是完整的世界地图背景。\n# 彩色层是那些有幸福度数据的国家，颜色对应国家名称。\np3 &lt;- ggplot() +\n  geom_sf(data = world_sf, fill = \"lightgrey\", color = \"lightgrey\") +\n  geom_sf_interactive(data = filter(world_sf, !is.na(Happiness_Score)), aes(fill = name, tooltip = name, data_id = name)) +\n  coord_sf(crs = st_crs(3857)) + # 使用特定的地图投影以避免变形\n  theme_void() + # 移除所有背景、网格线和坐标轴文本\n  theme(axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = \"none\")\n\n# 使用 patchwork 拼接图形。\n# (p1 + p2) 表示将散点图和条形图并排。\n# / p3 表示将上面拼接好的图放在地图的上方。\n# plot_layout 指定上方图和下方图的高度比例为 1:2。\ncombined_plot &lt;- (p1 + p2) / p3 + plot_layout(heights = c(1, 2))\n\n# 使用 girafe 将最终的组合图转换为可交互的HTML对象。\ngirafe(ggobj = combined_plot)\n\n\n\n\n交互式散点图和地图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#manhattan",
    "href": "scatter.html#manhattan",
    "title": "7  Scatter",
    "section": "7.6 Manhattan",
    "text": "7.6 Manhattan\n曼哈顿图是一种特定的散点图，在基因组学中广泛用于研究全基因组关联研究（Genome Wide Association Study，GWAS）的结果。每个点代表一个遗传变异。X 轴显示其在染色体上的位置，Y 轴表示其与性状的关联程度。\n使用的数据如下：\n\n\nShow/Hide Code\nknitr::kable(head(gwasResults), caption = \"曼哈顿图演示数据\")\n\n\n\n曼哈顿图演示数据\n\n\nSNP\nCHR\nBP\nP\n\n\n\n\nrs1\n1\n1\n0.9148060\n\n\nrs2\n1\n2\n0.9370754\n\n\nrs3\n1\n3\n0.2861395\n\n\nrs4\n1\n4\n0.8304476\n\n\nrs5\n1\n5\n0.6417455\n\n\nrs6\n1\n6\n0.5190959\n\n\n\n\n\n\n7.6.1 基础\nmanhattan 函数非常简单：只需正确识别 4 列数据，它就能很好地完成任务\n\n\nShow/Hide Code\nmanhattan(gwasResults, chr=\"CHR\", bp=\"BP\", snp=\"SNP\", p=\"P\" )\n\n\n\n\n\n基础曼哈顿图\n\n\n\n\n高亮显示曼哈顿图上的 SNP 群体\n\n\nShow/Hide Code\nmanhattan(gwasResults, highlight = snpsOfInterest)\n\n\n\n\n\n高亮显示曼哈顿图上的 SNP 群体\n\n\n\n\n还可以添加文字注释\n\n\nShow/Hide Code\nmanhattan(gwasResults, annotatePval = 0.01)\n\n\n\n\n\n给显著的SNP添加文字注释\n\n\n\n\n从 GWAS 的输出中绘制 qq 图是一种良好的做法。它允许通过随机性比较 p 值的分布与预期分布。得益于 qq 函数，其实现过程非常直接：\n\n\nShow/Hide Code\nqq(gwasResults$P)\n\n\n\n\n\nqq 图\n\n\n\n\n\n\n7.6.2 ggplot\n使用 ggplot2 可高度定制曼哈顿图。见 Manhattan",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "scatter.html#sec-label-pearl",
    "href": "scatter.html#sec-label-pearl",
    "title": "7  Scatter",
    "section": "7.7 Pearl",
    "text": "7.7 Pearl\n\n7.7.1 箭头散点\n带有智慧文本标签的散点图，见 R-graph-gallery :\n\n\nShow/Hide Code\n# --- 1. 准备工作 ---\n# 加载所需的R包\nlibrary(ggrepel) # 用于添加智慧型文本标签，避免重叠\nlibrary(palmerpenguins) # 提供企鹅数据集\nlibrary(randomNames) # 用于生成随机姓名\nlibrary(tidyverse) # 加载一系列数据处理和可视化的包，如ggplot2, dplyr, stringr等\n\n# --- 2. 数据加载与处理 ---\n\n# 从 'palmerpenguins' 包中加载 'penguins' 数据集\ndata(\"penguins\", package = \"palmerpenguins\")\n\n# 移除数据集中所有包含缺失值(NA)的行，以确保数据干净。\npenguins &lt;- drop_na(penguins)\n\n# 生成随机姓名\n# set.seed() 用于设置随机数种子，确保每次运行代码时生成的“随机”结果都完全相同。\n# 这样可以保证实验的可重复性。\nset.seed(2021 + 03 + 27)\n# 为数据集中的每一行（每只企鹅）生成一个随机的名字（仅取名字，不取姓）。\nname_vector &lt;- randomNames(nrow(penguins), which.names = \"first\")\n\n# 创建一个名为 'highlight' 的指示变量（列），用于后续标记。\npenguins &lt;- penguins %&gt;%\n  mutate(\n    name = name_vector, # 将随机生成的名字添加到数据集中\n    highlight = case_when(\n      # case_when 类似于一个 if-else 语句。\n      # 如果 'name' 列的字符串是以 \"C\" 开头的 (str_starts)，\n      str_starts(name, \"C\") ~ name, # 那么 'highlight' 列的值就是这个名字\n      TRUE ~ \"\" # 对于所有其他情况，'highlight' 列的值为空字符串 \"\"\n    )\n  )\n\n# --- 3. 创建基础图形 ---\n\n# 注意 `color = species` 和 `shape = species`。\n# 这意味着每个物种(species)的点都会有不同的颜色和不同的形状。\nplt &lt;- ggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(\n    aes(color = species, shape = species), # 根据物种区分颜色和形状\n    size = 1.5, # 设置点的大小\n    alpha = 0.8 # 添加一些透明度，因为数据点可能有重叠，透明化有助于观察。\n  ) +\n  # 使用 scale_color_manual() 手动指定点的颜色。\n  scale_color_manual(\n    values = c(\"#386cb0\", \"#fdb462\", \"#7fc97f\") # 为三个物种分别设置颜色\n  )\n\n# --- 4. 添加智慧型文本标签 ---\n\n# 在基础图(plt)上添加 ggrepel 提供的智慧型文本标签层。\nplt &lt;- plt +\n  geom_text_repel(\n    aes(label = highlight), # 标签的内容来自于我们之前创建的'highlight'列。\n    # 只有 'highlight' 列不为空的那些点才会被添加标签。\n    family = \"Poppins\", # 设置标签的字体\n    size = 3, # 设置标签的字号\n    min.segment.length = 0, # 即使标签离点很近，也强制画出连接线段。\n    seed = 42, # 为标签的随机布局设置种子，确保每次渲染位置相同。\n    box.padding = 0.5, # 标签文本框的内边距。\n    max.overlaps = Inf, # 允许显示所有标签，即使它们会重叠（ggrepel会尽力排开）。\n    arrow = arrow(length = unit(0.010, \"npc\")), # 在标签和点之间添加一个箭头。\n    nudge_x = .15, # 在x方向上将标签轻微推动一点距离。\n    nudge_y = .5, # 在y方向上将标签轻微推动一点距离。\n    color = \"grey50\" # 设置标签和连接线的颜色为中灰色。\n  )\n\n# --- 5. 添加标题和进行主题美化 ---\n\n# 在图(plt)上继续添加各种元素\nplt &lt;- plt +\n  # 使用 labs() 添加坐标轴标签、主标题和副标题\n  labs(\n    title = \"Palmer Penguins Data Visualization\",\n    subtitle = \"Scatter plot of flipper lenth vs bill length\",\n    x = \"flip length (mm)\",\n    y = \"bill length (mm)\"\n  ) +\n  # 使用 theme() 函数对图表的非数据元素（如背景、网格线、字体等）进行精细调整。\n  theme(\n    # --- 字体设置 ---\n    # 为图中所有未被单独指定的文本元素设置一个默认字体。\n    text = element_text(family = \"Lobster Two\", size = 8, color = \"black\"),\n\n    # --- 图例(Legend)设置 ---\n    # 自定义图例中的文本（物种名称）\n    legend.text = element_text(size = 9, family = \"Roboto\"),\n    # 自定义图例的标题（\"species\"）\n    legend.title = element_text(face = \"bold\", size = 12, family = \"Roboto\"),\n    # 手动设置图例的位置在绘图区域的右下角。c(1, 0)代表(右,下)。\n    legend.position = c(1, 0),\n    legend.justification = c(1, 0),\n    # 移除图例的背景。\n    legend.background = element_blank(),\n    # 移除图例中每个小图标（key）后面的背景。\n    legend.key = element_blank(),\n\n    # --- 标题(Title)设置 ---\n    # 自定义主标题的字体、大小、样式和颜色。\n    plot.title = element_text(\n      family = \"Lobster Two\",\n      size = 20,\n      face = \"bold\",\n      color = \"#2a475e\"\n    ),\n    # 自定义副标题。\n    plot.subtitle = element_text(\n      family = \"Lobster Two\",\n      size = 15,\n      face = \"bold\",\n      color = \"#1b2838\"\n    ),\n    # 设置标题的位置相对于整个绘图区域对齐。\n    plot.title.position = \"plot\",\n\n    # --- 坐标轴(Axis)设置 ---\n    # 调整坐标轴刻度标签的文本大小和颜色。\n    axis.text = element_text(size = 10, color = \"black\"),\n    # 调整坐标轴标题的文本大小。\n    axis.title = element_text(size = 12),\n    # 移除坐标轴上的刻度短线。\n    axis.ticks = element_blank(),\n    # 将坐标轴线设置为比默认更浅的灰色。\n    axis.line = element_line(colour = \"grey50\"),\n\n    # --- 网格线(Grid)设置 ---\n    # 移除次要网格线。\n    panel.grid.minor = element_blank(),\n    # 移除X轴的主要网格线。\n    panel.grid.major.x = element_blank(),\n    # 保留Y轴的主要网格线，并设置为灰色虚线。\n    panel.grid.major.y = element_line(color = \"#b4aea9\", linetype = \"dashed\"),\n\n    # --- 背景(Background)设置 ---\n    # 为绘图面板（panel，即数据点所在的矩形区域）和整个图表（plot）设置一个浅色的背景。\n    panel.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\"),\n    plot.background = element_rect(fill = \"#fbf9f4\", color = \"#fbf9f4\")\n  )\n\nplt\n\n\n\n\n\n箭头散点图\n\n\n\n\n\n\n7.7.2 箭头拟合\n一种美观的带有回归拟合和自动文本排斥的散点图，见 R-graph-gallery :\n\n\n\n箭头拟合散点图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scatter</span>"
    ]
  },
  {
    "objectID": "heatmap.html",
    "href": "heatmap.html",
    "title": "8  Heatmap",
    "section": "",
    "text": "8.1 PKG\n热图是一种数据图形表示，其中矩阵中包含的各个值以颜色形式呈现。\nShow/Hide Code\n# 需要的R包\nlibrary(tidyverse)\nlibrary(RColorBrewer)\nlibrary(hrbrthemes) # 美化主题\nlibrary(viridis) # 渐变色\nlibrary(plotly) # 交互式图形\nlibrary(lattice) # 另一种绘图系统\nlibrary(RColorBrewer) # 调色板\nlibrary(viridisLite) # 调色板\nlibrary(latticeExtra) # 扩展lattice功能",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#heatmap",
    "href": "heatmap.html#heatmap",
    "title": "8  Heatmap",
    "section": "8.2 heatmap()",
    "text": "8.2 heatmap()\nheatmap() 是Base R 的函数，带有聚类功能，胜出一筹。\n\n8.2.1 基础\n\n\nShow/Hide Code\ndata &lt;- as.matrix(mtcars)\n\nheatmap(data)\n\n\n\n\n\n基础热力图\n\n\n\n\n所有的变化都被 hp 和 disp 这两个与其他变量相比具有非常高的值的变量所吸收。我们需要对数据进行标准化。\n\n\nShow/Hide Code\nheatmap(data, scale=\"column\")\n\n\n\n\n\nscale=“column”对列进行标化\n\n\n\n\n解读：\n\n行 (Rows)：右侧的标签（Toyota Corona, Porsche 914-2 等）代表了 mtcars 数据集中的32款不同汽车；\n列 (Columns)：底部的标签（cyl, am, mpg, hp 等）代表了汽车的11个性能指标。\n浅黄色代表较低的数值，深红色代表较高的数值。\n在树状图上彼此靠近的汽车，意味着它们的各项性能指标综合来看更加相似。\n例如: 请看图的底部，Maserati Bora、Chrysler Imperial 和 Cadillac Fleetwood 被紧密地聚在一起。这说明它们在整体性能上非常相似（通常是大排量、高马力、高油耗、车身重）。\n相对地，图顶部的 Toyota Corona、Datsun 710 等车也聚在一起，它们通常是性能相反的另一类车（小排量、低油耗）。\n\n\n\n8.2.2 不聚类\n刚才的图由于聚类而重新排序，可以指定不排序。\n\n\nShow/Hide Code\nheatmap(data, Colv = NA, Rowv = NA, scale=\"column\")\n\n\n\n\n\n不聚类的热力图\n\n\n\n\n\n\n8.2.3 配色\n\n\nShow/Hide Code\n# 自带调色板\nheatmap(data, scale=\"column\", col = cm.colors(256))\n\n\n\n\n\n不同配色的热力图\n\n\n\n\nShow/Hide Code\nheatmap(data, scale=\"column\", col = terrain.colors(256))\n\n\n\n\n\n不同配色的热力图\n\n\n\n\nShow/Hide Code\n# RColorBrewer 调色板\n# 需要library(RColorBrewer)\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\nheatmap(data, scale=\"column\", col = coul)\n\n\n\n\n\n不同配色的热力图\n\n\n\n\n\n\n8.2.4 布局\n\n\nShow/Hide Code\n# 使用自定义调色板，去除聚类，添加坐标轴和标题\nheatmap(\n    data,\n    Colv = NA, # 不对列进行聚类\n    Rowv = NA, # 不对行进行聚类\n    scale = \"column\", # 对列进行标准化\n    col = coul, # 使用自定义调色板\n    xlab = \"variable\", # x轴标签\n    ylab = \"car\",      # y轴标签\n    main = \"heatmap\"   # 图标题\n)\n\n\n\n\n\n热力图布局示例\n\n\n\n\nShow/Hide Code\n# 修改行标签字号和内容，使用蓝色调色板\nheatmap(\n    data,\n    scale = \"column\", # 对列进行标准化\n    cexRow = 1.5, # 行标签字号\n    labRow = paste(\"new_\", rownames(data), sep = \"\"), # 修改行标签内容\n    col = colorRampPalette(brewer.pal(8, \"Blues\"))(25) # 使用蓝色调色板\n)\n\n\n\n\n\n热力图布局示例\n\n\n\n\n\n\n8.2.5 颜色条\n\n\nShow/Hide Code\n# 按行名首字母分组\nmy_group &lt;- as.numeric(as.factor(substr(rownames(data), 1, 1)))\n# 为每组分配颜色\ncolSide &lt;- brewer.pal(9, \"Set1\")[my_group]\n# 生成主热图颜色\ncolMain &lt;- colorRampPalette(brewer.pal(8, \"Blues\"))(25)\n# 绘制带有颜色条的热力图\nheatmap(\n    data,\n    Colv = NA,         # 不对列聚类\n    Rowv = NA,         # 不对行聚类\n    scale = \"column\",  # 对列标准化\n    RowSideColors = colSide, # 行侧颜色条\n    col = colMain      # 主热图颜色\n)\n\n\n\n\n\n左侧添加颜色条",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#geom_tile",
    "href": "heatmap.html#geom_tile",
    "title": "8  Heatmap",
    "section": "8.3 geom_tile()",
    "text": "8.3 geom_tile()\ngeom_tile() 是源于 ggplot2 的瓦片函数，适用于绘制热图。\n\n8.3.1 基础\n\n\nShow/Hide Code\n# 构造示例数据\nx &lt;- LETTERS[1:20] # X轴标签，A到T\ny &lt;- paste0(\"var\", seq(1, 20)) # Y轴标签，var1到var20\ndata &lt;- expand.grid(X = x, Y = y) # 生成所有组合\ndata$Z &lt;- runif(400, 0, 5) # 生成均匀分布随机数，runif(n, min, max)\n\n# 绘制热图\nggplot(data, aes(X, Y, fill = Z)) +\n    geom_tile() # 用颜色填充瓦片\n\n\n\n\n\ngeom_tile() 基础热力图\n\n\n\n\n\n\n8.3.2 颜色\n\n\nShow/Hide Code\n# scale_fill_gradient 线性，灵活，但需自己选色。\n# scale_fill_viridis 自动、专业且色盲友好，推荐用于科学数据可视化。\n\n# 构造示例数据\nx &lt;- LETTERS[1:20]\ny &lt;- paste0(\"var\", seq(1,20))\ndata &lt;- expand.grid(X=x, Y=y)\ndata$Z &lt;- runif(400, 0, 5)\n\n# 1. 使用蓝色渐变色\nggplot(data, aes(X, Y, fill= Z)) + \n    geom_tile() +\n    scale_fill_gradient(low=\"white\", high=\"blue\") + # 渐变色从白到蓝\n    theme_ipsum()\n\n\n\n\n\n不同配色的 geom_tile() 热力图\n\n\n\n\nShow/Hide Code\n# 2. 使用 RColorBrewer 的 RdPu 调色板\nggplot(data, aes(X, Y, fill= Z)) + \n    geom_tile() +\n    scale_fill_distiller(palette = \"RdPu\") + # 使用 RdPu 调色板\n    theme_ipsum()\n\n\n\n\n\n不同配色的 geom_tile() 热力图\n\n\n\n\nShow/Hide Code\n# 3. 使用 viridis 包的配色\nggplot(data, aes(X, Y, fill= Z)) + \n    geom_tile() +\n    scale_fill_viridis(discrete=FALSE) + # 使用 viridis 渐变色\n    theme_ipsum()\n\n\n\n\n\n不同配色的 geom_tile() 热力图\n\n\n\n\n\n\n8.3.3 pivot\n\n\nShow/Hide Code\n# volcano 数据集是 R 自带的地形高度矩阵\nvolcano |&gt;\n    as_tibble() |&gt; # 转为 tibble 数据框\n    rowid_to_column(var = \"X\") |&gt; # 添加行号作为 X 坐标\n    pivot_longer(\n        cols = !X, # 除 X 外的所有列\n        names_to = \"Y\", # 列名作为 Y 坐标\n        values_to = \"Z\" # 值作为高度\n    ) |&gt;\n    mutate(Y = as.numeric(gsub(\"V\", \"\", Y))) |&gt; # Y 坐标转为数值型\n\n    # 可视化\n    ggplot(aes(X, Y, fill = Z)) +\n        geom_tile() + # 用颜色填充瓦片\n        theme_ipsum() + # 美化主题\n        theme(legend.position = \"none\") # 去除图例\n\n\n\n\n\nvolcano 热力图\n\n\n\n\n\n\n8.3.4 plotly\n\n\nShow/Hide Code\n# 构造示例数据\nx &lt;- LETTERS[1:20] # X轴标签，A到T\ny &lt;- paste0(\"var\", seq(1, 20)) # Y轴标签，var1到var20\ndata &lt;- expand.grid(X = x, Y = y) # 生成所有组合\ndata$Z &lt;- runif(400, 0, 5) # 生成均匀分布随机数\n\n# 添加自定义文本用于交互式提示\ndata &lt;- data |&gt;\n    mutate(\n        text = paste0(\n            \"x: \", x, \"\\n\",\n            \"y: \", y, \"\\n\",\n            \"Value: \", round(Z, 2), \"\\n\",\n            \"What else?\"\n        )\n    )\n\n# 使用ggplot2绘制热图，并将text映射到交互式提示\np &lt;- ggplot(data, aes(X, Y, fill = Z, text = text)) +\n    geom_tile() +\n    theme_ipsum()\n\n# 使用plotly实现交互式热图，显示自定义tooltip（悬浮提示）\nggplotly(p, tooltip = \"text\")\n\n\n\n\nplotly 交互式热力图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#interactive",
    "href": "heatmap.html#interactive",
    "title": "8  Heatmap",
    "section": "8.4 Interactive",
    "text": "8.4 Interactive\n见 heatmap, `有以下几种方式：\n\nplotly: 如前所述。\nd3heatmap: 用 Base R 的 heatmap() 相同的函数语法制作交互式热图。\nheatmaply: 最灵活的选项，允许多种不同的自定义。",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#time-series",
    "href": "heatmap.html#time-series",
    "title": "8  Heatmap",
    "section": "8.5 Time series",
    "text": "8.5 Time series\n热力图在可视化时间序列方面是一个非常不错的选择，特别是研究的时间框架是重复的，比如周。\n\n\nShow/Hide Code\n#| fig-cap: 时间序列热力图\n\n--- 1. 加载所需的R包 ---\nlibrary(ggplot2)\nlibrary(dplyr)         # 用于更方便的数据处理\nlibrary(viridis)       # 提供对色盲友好的调色板\nlibrary(Interpol.T)    # 用于加载数据集\nlibrary(lubridate)     # 用于方便地处理日期和时间\nlibrary(ggExtra)       # 提供额外的主题功能，如removeGrid()\nlibrary(tidyr)         # 用于数据整理，如此处的fill()\n\n# --- 2. 加载和初步处理数据 ---\n# 从 Interpol.T 包中加载 Trentino_hourly_T 数据集\ndata &lt;- data(Trentino_hourly_T, package = \"Interpol.T\")\n# 重命名数据框的前5个列名，使其更具可读性\nnames(h_d_t)[1:5] &lt;- c(\"stationid\", \"date\", \"hour\", \"temp\", \"flag\")\n\n# 将数据框转换为dplyr的tbl_df格式，并筛选出特定气象站（T0001）的数据\ndf &lt;- tbl_df(h_d_t) %&gt;%\n  filter(stationid == \"T0001\")\n\n# 使用lubridate包从date列中提取年、月、日信息，并创建新列\n# month()中的label=TRUE使月份显示为缩写（如 Jan, Feb），而不是数字\ndf &lt;- df %&gt;% mutate(\n  year = year(date),\n  month = month(date, label = TRUE),\n  day = day(date)\n)\n\n# 使用lubridate的ymd()函数确保date列是标准的日期格式\n# 这一步对于当前绘图不是必需的，但对于后续可能的数据分析很有用\ndf$date &lt;- ymd(df$date)\n\n# --- 3. 清理工作环境 ---\n# 删除加载数据时附带的、后续不再需要的中间变量，以节省内存\nrm(list = c(\n  \"h_d_t\", \"mo_bias\", \"Tn\", \"Tx\",\n  \"Th_int_list\", \"calibration_l\",\n  \"calibration_shape\", \"Tm_list\"\n))\n\n# --- 4. 创建用于绘图的最终数据框 ---\n# 选择绘图所需的列，并填充缺失的温度值\ndf &lt;- df %&gt;%\n  select(stationid, day, hour, month, year, temp) %&gt;%\n  fill(temp) # 使用前一个非缺失值来填充NA\n\n# 填充缺失值(NA)的注意事项：\n# 这段代码是为了演示可视化技术。\n# 数据集中有5个缺失的小时温度值。\n# 作者使用了tidyr包的fill()函数，用前一个小时的值来替换NA。\n# 这只是为了让图表好看的快速修复方法，在真实的数据分析中请不要这样做！\n# 应该使用更严谨的方法，如 tidyr 的 replace_NA 或 complete(with fill)，\n# 或者使用更专业的插补方法来处理缺失值。\n\n# 获取当前正在分析的气象站ID，用于图表标题\nstatno &lt;- unique(df$stationid)\n\n######## 绘图部分开始 #####################\n\n# --- 5. 使用ggplot2创建图表 ---\n# 初始化ggplot对象，设置核心美学映射：x轴为天，y轴为小时，填充色为温度\np &lt;- ggplot(df, aes(day, hour, fill = temp)) +\n  # 使用瓦片图层来创建热图，并给瓦片之间添加细微的白色边框\n  geom_tile(color = \"white\", size = 0.1) +\n  # 使用viridis调色板填充颜色，对色盲友好。name参数设置图例标题\n  scale_fill_viridis(name = \"Hourly Temps C\", option = \"C\")\n\n# 创建分面网格，按年份(行)和月份(列)将图表分割成多个面板\np &lt;- p + facet_grid(year ~ month)\n\n# 反转y轴（小时），使得0点在顶部，23点在底部，更符合直觉\np &lt;- p + scale_y_continuous(trans = \"reverse\", breaks = unique(df$hour))\n\n# 自定义x轴（天）的刻度，使其更清晰\np &lt;- p + scale_x_continuous(breaks = c(1, 10, 20, 31))\n\n# --- 6. 精细调整图表主题和标签 ---\n# 应用一个简洁的主题，并设置基础字体大小\np &lt;- p + theme_minimal(base_size = 8)\n\n# 添加图表标题和坐标轴标签\np &lt;- p + labs(title = paste(\"Hourly Temps - Station\", statno), x = \"Day\", y = \"Hour Commencing\")\n\n# 对图表的各种视觉元素进行精细调整\np &lt;- p + theme(legend.position = \"bottom\") + # 将图例置于底部\n  theme(plot.title = element_text(size = 14)) + # 设置主标题字体大小\n  theme(axis.text.y = element_text(size = 6)) + # 设置y轴文字大小\n  theme(strip.background = element_rect(colour = \"white\")) + # 设置分面标签的背景\n  theme(plot.title = element_text(hjust = 0)) + # 标题左对齐\n  theme(axis.ticks = element_blank()) + # 隐藏坐标轴刻度线\n  theme(axis.text = element_text(size = 7)) + # 设置坐标轴文字大小\n  theme(legend.title = element_text(size = 8)) + # 设置图例标题大小\n  theme(legend.text = element_text(size = 6)) + # 设置图例文本大小\n  removeGrid() # 使用ggExtra包的函数移除背景网格线，使图表更干净\n\n# --- 7. 显示图表 ---\n# 在R的绘图窗口中打印（显示）最终生成的图表对象\n# 建议在显示前先将绘图窗口拉大，以获得最佳视觉效果\np\n\n\n这段代码 生成了时间序列热力图。显示了气象站的每小时温度变化。\n\n\n\n时间序列热力图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#levelplot",
    "href": "heatmap.html#levelplot",
    "title": "8  Heatmap",
    "section": "8.6 levelplot()",
    "text": "8.6 levelplot()\n\n8.6.1 基础\n\n\nShow/Hide Code\n# 创建示例数据\nx &lt;- seq(1, 10, length.out = 20)\ny &lt;- seq(1, 10, length.out = 20)\ndata &lt;- expand.grid(X = x, Y = y)\ndata$Z &lt;- runif(400, 0, 5)\n\n# levelplot() 绘制基础热力图\nlevelplot(Z ~ X * Y, data = data)\n\n\n\n\n\nlevelplot() 基础热力图\n\n\n\n\n\n\n8.6.2 povit\n\n\nShow/Hide Code\n# 构造一个 10x10 的随机矩阵作为示例数据\ndata &lt;- matrix(runif(100, 0, 5), 10, 10)\ncolnames(data) &lt;- letters[1:10] # 设置列名为 a~j\nrownames(data) &lt;- paste(\"row\", 1:10) # 设置行名为 row 1 ~ row 10\n\n# 使用 levelplot() 绘制热力图\nlevelplot(data)\n\n\n\n\n\nlevelplot() 宽数据透视热力图示例\n\n\n\n\n\n\n8.6.3 翻转\n\n\nShow/Hide Code\n# 构造一个 10x10 的随机矩阵作为示例数据\ndata &lt;- matrix(runif(100, 0, 5), 10, 10)\ncolnames(data) &lt;- letters[c(1:10)] # 设置列名为 a~j\nrownames(data) &lt;- paste(rep(\"row\", 10), c(1:10), sep = \" \") # 设置行名为 row 1 ~ row 10\n\n# 翻转行顺序并转置矩阵，使热图的 y 轴从上到下递增\n# t() 转置，data[nrow(data):1, ] 反转行顺序\nlevelplot(\n    t(data[nrow(data):1, ]),         # 翻转并转置数据\n    col.regions = heat.colors(100)   # 使用 heat.colors 调色板\n)\n\n\n\n\n\n翻转 levelplot 热力图\n\n\n\n\n\n\n8.6.4 颜色\n\n\nShow/Hide Code\n# 1: R自带调色板\nlevelplot(volcano, col.regions = terrain.colors(100)) # 使用 terrain.colors() 原生调色板，可尝试 cm.colors() 或 terrain.colors()\n\n\n\n\n\n不同颜色的 levelplot() 热力图\n\n\n\n\nShow/Hide Code\n# 2: RColorBrewer 调色板\n# library(RColorBrewer)\ncoul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25)\nlevelplot(volcano, col.regions = coul) # 使用 RColorBrewer 的 PiYG 调色板\n\n\n\n\n\n不同颜色的 levelplot() 热力图\n\n\n\n\nShow/Hide Code\n# 3: Viridis 渐变色\n# library(viridisLite)\ncoul &lt;- viridis(100)\nlevelplot(volcano, col.regions = coul) # 使用 viridis 渐变色\n\n\n\n\n\n不同颜色的 levelplot() 热力图\n\n\n\n\nShow/Hide Code\nlevelplot(volcano, col.regions = magma(100)) # 使用 magma 渐变色\n\n\n\n\n\n不同颜色的 levelplot() 热力图\n\n\n\n\n\n\n8.6.5 平滑\n\n\nShow/Hide Code\n# 加载 latticeExtra 包以获得 panel.2dsmoother\n# library(latticeExtra)\n\n# 创建示例数据\nset.seed(1)\ndata &lt;- data.frame(x = rnorm(100), y = rnorm(100))\ndata$z &lt;- with(data, x * y + rnorm(100, sd = 1))\n\n# 使用 levelplot 绘制散点热力图，并叠加平滑层\nlevelplot(\n  z ~ x * y,\n  data,\n  panel = panel.levelplot.points, # 显示数据点\n  cex = 1.2\n) +\n  # 叠加二维平滑层，n 控制平滑网格的分辨率\n  layer_(panel.2dsmoother(..., n = 200))\n\n\n\n\n\n平滑的 levelplot() 热力图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "heatmap.html#pearl",
    "href": "heatmap.html#pearl",
    "title": "8  Heatmap",
    "section": "8.7 Pearl",
    "text": "8.7 Pearl\n这是一个非常优秀的数据可视化作品，利用 R 语言的 ggplot2 包将美国各州从1928年到2011年的麻疹发病率数据绘制成了热图。\n代码通过逐层叠加，精细地控制了图表的每一个细节，从而清晰地讲述了“疫苗引入后麻疹病例急剧下降”这一核心故事。\n见 vaccination-heatmap\n\n\n\n麻疹疫苗接种带来的影响",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Heatmap</span>"
    ]
  },
  {
    "objectID": "correlogram.html",
    "href": "correlogram.html",
    "title": "9  Correlogram",
    "section": "",
    "text": "9.1 PKG\nGGally::ggpairs() 可以绘制好看的相关性图：\nShow/Hide Code\nlibrary(GGally)\nlibrary(tidyverse)\nlibrary(corrgram) # 相关性图\nlibrary(ellipse) # 椭圆\nlibrary(RColorBrewer) # 调色板\nlibrary(car) # 线性回归诊断",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#ggpairs",
    "href": "correlogram.html#ggpairs",
    "title": "9  Correlogram",
    "section": "9.2 ggpairs()",
    "text": "9.2 ggpairs()\n\n9.2.1 基础\n\n对角线是单变量分布密度曲线\n右上方是相关系数和显著性\n左下方是散点图。\n\n\n\nShow/Hide Code\n# 构造示例数据\ndata &lt;- data.frame(\n  v1 = 1:100 + rnorm(100, sd = 20),\n  v2 = 1:100 + rnorm(100, sd = 27),\n  v3 = rep(1, 100) + rnorm(100, sd = 1)\n)\ndata$v4 = data$v1**2\ndata$v5 = -(data$v1**2)\n\n# 绘图\nggpairs(data, title = \"correlogram with ggpairs()\")\n\n\n\n\n\nggpairs() 绘制相关性图\n\n\n\n\n\n\n9.2.2 split\n通过 ggpairs() 的 mapping 参数可以指定不同的美学映射，从而实现分组绘图：\n\n\nShow/Hide Code\n# 使用了color参数\nggpairs(flea, columns = 2:4, aes(colour=species)) \n\n\n\n\n\nggpairs() 分组绘图\n\n\n\n\n带有颜色的 ggpairs() 相关性图，非常美观：\n\n\nShow/Hide Code\nggpairs(\n    mtcars[, c(1, 3:7)],\n    columnLabels = c(\n        \"Miles\",\n        \"Displacement\",\n        \"Horsepower\",\n        \"Rear axle ratio\",\n        \"Weight\",\n        \"1/4 mile time\"\n    ),\n    # 这里将 mtcars$vs 转换为因子，作为分组变量上色\n    aes(color = factor(mtcars$vs)),  # &lt;--- 主要修改在这里\n    # 上三角显示相关系数\n    upper = list(continuous = wrap('cor', size = 3)),\n    # 下三角显示分组直方图\n    lower = list(combo = wrap(\"facethist\", bins = 30)),\n    # 对角线显示密度图\n    diag = list(continuous = wrap(\"densityDiag\", alpha = 0.5)),\n    # 图标题\n    title = \"Scatterplot matrix of `mtcars` Grouped by Engine\"\n)\n\n\n\n\n\n带有颜色的 ggpairs() 相关性图\n\n\n\n\n\n\n9.2.3 type\nupper、lower 和 diag 参数修改图的类型\n\n\nShow/Hide Code\n# 使用 ggpairs() 并通过 upper、lower 参数自定义图的类型\nggpairs(\n    reshape::tips[, c(1, 3, 4, 2)],\n    # 上三角连续型变量用密度图，组合型用无分面箱线图\n    upper = list(continuous = \"density\", combo = \"box_no_facet\"),\n    # 下三角连续型变量用散点图，组合型用无分面点图\n    lower = list(continuous = \"points\", combo = \"dot_no_facet\")\n)\n\n\n\n\n\nupper、lower 和 diag 参数 修改图的类型",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#ggcorr",
    "href": "correlogram.html#ggcorr",
    "title": "9  Correlogram",
    "section": "9.3 ggcorr()",
    "text": "9.3 ggcorr()\nggcorr() 可以绘制一种朴素的相关性图\n\n\nShow/Hide Code\n# data是之前构建的数据\nggcorr(data, method = c(\"everything\", \"pearson\"))\n\n\n\n\n\nggcorr() 绘制相关性图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#corrgram",
    "href": "correlogram.html#corrgram",
    "title": "9  Correlogram",
    "section": "9.4 corrgram()",
    "text": "9.4 corrgram()\n\n\nShow/Hide Code\n# 第一种：下三角为色块，上三角为饼图，主对角线为变量名\ncorrgram(\n    mtcars, \n    order = TRUE, \n    lower.panel = panel.shade,    # 下三角用色块表示相关性\n    upper.panel = panel.pie,      # 上三角用饼图表示相关性\n    text.panel = panel.txt,       # 主对角线显示变量名\n    main = \"Car Milage Data in PC2/PC1 Order\"\n) \n\n\n\n\n\ncorrgram() 绘制相关性图\n\n\n\n\nShow/Hide Code\n# 第二种：下三角为椭圆，上三角为点图，对角线为极值\ncorrgram(\n    mtcars, \n    order = TRUE, \n    lower.panel = panel.ellipse,  # 下三角用椭圆表示相关性\n    upper.panel = panel.pts,      # 上三角用点图表示相关性\n    text.panel = panel.txt,       # 主对角线显示变量名\n    diag.panel = panel.minmax,    # 对角线显示极值\n    main = \"Car Milage Data in PC2/PC1 Order\"\n) \n\n\n\n\n\ncorrgram() 绘制相关性图\n\n\n\n\nShow/Hide Code\n# 第三种：下三角为色块，上三角不显示，主对角线为变量名，不排序\ncorrgram(\n    mtcars, \n    order = NULL, \n    lower.panel = panel.shade,    # 下三角用色块表示相关性\n    upper.panel = NULL,           # 上三角不显示\n    text.panel = panel.txt,       # 主对角线显示变量名\n    main = \"Car Milage Data (unsorted)\"\n)\n\n\n\n\n\ncorrgram() 绘制相关性图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#椭圆",
    "href": "correlogram.html#椭圆",
    "title": "9  Correlogram",
    "section": "9.5 椭圆",
    "text": "9.5 椭圆\n\n\nShow/Hide Code\n# library(ellipse) # 椭圆包\n# library(RColorBrewer) # 调色板包\n\n# 计算 mtcars 数据集的相关系数矩阵\ndata &lt;- cor(mtcars)  # 计算相关系数矩阵\n\n# 用 RColorBrewer 构建 100 个颜色的调色板\nmy_colors &lt;- brewer.pal(5, \"Spectral\")  # 选择5种“Spectral”配色\nmy_colors &lt;- colorRampPalette(my_colors)(100)  # 插值生成100种颜色\n\n# 对相关系数矩阵进行排序（这里以第一行相关性为依据排序）\nord &lt;- order(data[1, ])  # 获取排序索引\ndata_ord &lt;- data[ord, ord]  # 按排序索引重新排列矩阵\n\n# 绘制椭圆相关性图\nplotcorr(\n    data_ord,  # 排序后的相关系数矩阵\n    col = my_colors[data_ord * 50 + 50],  # 根据相关系数映射颜色\n    mar = c(1, 1, 1, 1)  # 设置图形边距\n)\n\n\n\n\n\n椭圆相关性图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#散点",
    "href": "correlogram.html#散点",
    "title": "9  Correlogram",
    "section": "9.6 散点",
    "text": "9.6 散点\nplot() 可以绘制散点图矩阵：\n\n\nShow/Hide Code\n# 选择 mtcars 数据集的第1、3、4、5、6列，构建数据框\ndata &lt;- mtcars[, c(1, 3:6)]\n\n# 绘制散点图矩阵\n# pch = 20 表示点的形状为实心圆\n# cex = 1.5 表示点的大小为1.5倍\n# col = \"#69b3a2\" 设置点的颜色为绿色系\nplot(data, pch = 20, cex = 1.5, col = \"#69b3a2\")\n\n\n\n\n\nplot() 散点",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "correlogram.html#分组散点",
    "href": "correlogram.html#分组散点",
    "title": "9  Correlogram",
    "section": "9.7 分组散点",
    "text": "9.7 分组散点\ncar::scatterplotMatrix() 可以绘制分组散点图矩阵：\n\n\nShow/Hide Code\n# 使用 R 自带的 mtcars 数据集\ndata &lt;- mtcars\n\n# 根据气缸数（cyl）生成调色板\nmy_colors &lt;- brewer.pal(nlevels(as.factor(data$cyl)), \"Set2\")\n\n# 绘制分组散点图矩阵\nscatterplotMatrix(\n    ~ mpg + disp + drat | cyl,  # 选择 mpg、disp、drat 三个变量，并按 cyl 分组\n    data = data,                # 数据来源\n    reg.line = \"\",              # 不添加回归线\n    smoother = \"\",              # 不添加平滑曲线\n    col = my_colors,            # 设置分组颜色\n    smoother.args = list(col = \"grey\"), # 平滑曲线颜色（虽然未用到）\n    cex = 1.5,                  # 点的大小\n    pch = c(15, 16, 17),        # 不同分组的点形状\n    main = \"按气缸数分组的散点图矩阵\" # 图标题\n)\n\n\n\n\n\n分组散点图矩阵",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Correlogram</span>"
    ]
  },
  {
    "objectID": "bubble.html",
    "href": "bubble.html",
    "title": "10  Bubble",
    "section": "",
    "text": "10.1 PKG\nShow/Hide Code\n# 加载必要的包\nlibrary(tidyverse)    # 数据处理和可视化\nlibrary(gapminder)    # 全球发展数据集\nlibrary(hrbrthemes)   # 主题样式\nlibrary(viridis)      # 配色方案\nlibrary(plotly)       # 交互式图表",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#size",
    "href": "bubble.html#size",
    "title": "10  Bubble",
    "section": "10.2 size",
    "text": "10.2 size\n气泡图（Bubble）是一种散点图，增加了第三个维度：通过点的尺寸来表示另一个数值变量的值。\n\n\nShow/Hide Code\n# 筛选2007年的数据，去除年份列\ndata &lt;- gapminder |&gt; filter(year == \"2007\") |&gt; dplyr::select(-year)\n\n# 创建气泡图：x轴为人均GDP，y轴为预期寿命，size为人口数量\nggplot(data, aes(x = gdpPercap, y = lifeExp, size = pop)) +\n  geom_point(alpha = 0.7) +           # 透明度设为0.7\n  theme(legend.position = \"bottom\")    # 图例放在底部\n\n\n\n\n\n用size来制作气泡图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#scale_size",
    "href": "bubble.html#scale_size",
    "title": "10  Bubble",
    "section": "10.3 scale_size()",
    "text": "10.3 scale_size()\n通过scale_size()可以调整气泡的大小。range 和 name 参数设置气泡的大小范围和图例名称。\n\n\nShow/Hide Code\ndata |&gt;\n  arrange(desc(pop)) |&gt;                              # 按人口数量降序排列\n  mutate(country = factor(country, country)) |&gt;      # 将国家名转换为因子\n  ggplot(aes(x = gdpPercap, y = lifeExp, size = pop)) +\n  geom_point(alpha = 0.5) +                          # 设置点的透明度\n  scale_size(range = c(.1, 24), name = \"Population (M)\")  # 调整气泡大小范围和图例名称\n\n\n\n\n\nscale_size() 调整气泡大小",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#color",
    "href": "bubble.html#color",
    "title": "10  Bubble",
    "section": "10.4 color",
    "text": "10.4 color\n增加第四个维度：颜色（color）\n\n\nShow/Hide Code\ndata |&gt;\n  arrange(desc(pop)) |&gt;     # 按人口数量降序排列\n  mutate(country = factor(country, country)) |&gt;  # 将国家名转换为因子\n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) +  # 添加颜色美学映射\n    geom_point(alpha=0.5) +   # 设置点的透明度\n    scale_size(range = c(.1, 24), name=\"Population (M)\")  # 调整气泡大小范围\n\n\n\n\n\n使用color来区分不同的continent",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#pretty",
    "href": "bubble.html#pretty",
    "title": "10  Bubble",
    "section": "10.5 Pretty",
    "text": "10.5 Pretty\n\n\nShow/Hide Code\n# library(ggplot2)\n# library(dplyr)\n# library(hrbrthemes)\n# library(viridis)\n\ndata |&gt;\n  arrange(desc(pop)) |&gt;                                        # 按人口数量降序排列\n  mutate(country = factor(country, country)) |&gt;                # 将国家名转换为因子\n  ggplot(aes(x = gdpPercap, y = lifeExp, size = pop, fill = continent)) +  # 使用fill而不是color\n  geom_point(alpha = 0.5, shape = 21, color = \"black\") +       # 设置点的形状和边框颜色\n  scale_size(range = c(.1, 24), name = \"Population (M)\") +     # 调整气泡大小范围\n  scale_fill_viridis(discrete = TRUE, guide = FALSE, option = \"A\") +  # 使用viridis配色方案\n  theme_ipsum() +                                               # 应用ipsum主题\n  theme(legend.position = \"bottom\") +                          # 图例位置\n  ylab(\"Life Expectancy\") +                                    # y轴标签\n  xlab(\"Gdp per Capita\") +                                     # x轴标签\n  theme(legend.position = \"none\")                              # 隐藏图例\n\n\n\n\n\n使用pretty的配色方案美化",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#interactive",
    "href": "bubble.html#interactive",
    "title": "10  Bubble",
    "section": "10.6 Interactive",
    "text": "10.6 Interactive\n\n\nShow/Hide Code\n# library(ggplot2)\n# library(dplyr)\n# library(plotly)\n# library(viridis)\n# library(hrbrthemes)\n\n# 从gapminder包中获取数据集\nlibrary(gapminder)\ndata &lt;- gapminder |&gt; filter(year == \"2007\") |&gt; dplyr::select(-year)\n\n# 创建交互式版本\np &lt;- data |&gt;\n  mutate(gdpPercap = round(gdpPercap, 0)) |&gt;     # 四舍五入人均GDP\n  mutate(pop = round(pop / 1000000, 2)) |&gt;       # 转换人口为百万单位并四舍五入\n  mutate(lifeExp = round(lifeExp, 1)) |&gt;         # 四舍五入预期寿命\n\n  # 重新排序国家，让大气泡在上面\n  arrange(desc(pop)) |&gt;\n  mutate(country = factor(country, country)) |&gt;\n\n  # 为工具提示准备文本\n  mutate(\n    text = paste(\n      \"Country: \",\n      country,\n      \"\\nPopulation (M): \",\n      pop,\n      \"\\nLife Expectancy: \",\n      lifeExp,\n      \"\\nGdp per capita: \",\n      gdpPercap,\n      sep = \"\"\n    )\n  ) |&gt;\n\n  # 经典的ggplot绘图\n  ggplot(aes(\n    x = gdpPercap,\n    y = lifeExp,\n    size = pop,\n    color = continent,\n    text = text\n  )) +\n  geom_point(alpha = 0.7) +                                  # 设置点的透明度\n  scale_size(range = c(1.4, 19), name = \"Population (M)\") + # 调整气泡大小范围\n  scale_color_viridis(discrete = TRUE, guide = FALSE) +     # 使用viridis配色方案\n  theme_ipsum() +                                            # 应用ipsum主题\n  theme(legend.position = \"none\")                           # 隐藏图例\n\n# 转换为交互式图表\nggplotly(p, tooltip = \"text\")\n\n\n\n\n使用plotly制作交互式气泡图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "bubble.html#pearl",
    "href": "bubble.html#pearl",
    "title": "10  Bubble",
    "section": "10.7 Pearl",
    "text": "10.7 Pearl\n带有文字标签的散点图，见 Section 7.7。",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bubble</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html",
    "href": "connected-scatter.html",
    "title": "11  Conn-Scatter",
    "section": "",
    "text": "11.1 PKG\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(hrbrthemes) # 主题\nlibrary(babynames) # 数据集\nlibrary(ggrepel) # 标签\nlibrary(dygraphs)      # 用于绘制交互式时间序列图\nlibrary(xts)           # 用于数据框与 xts 格式转换\nlibrary(tidyverse)     # 数据处理\nlibrary(lubridate)     # 处理日期时间",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#基础",
    "href": "connected-scatter.html#基础",
    "title": "11  Conn-Scatter",
    "section": "11.2 基础",
    "text": "11.2 基础\ngeom_point() 和 geom_line() 组合在一起。\n\n\nShow/Hide Code\n# 读取数据，并将日期列转换为 Date 类型\ndata &lt;- read.table(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv\", header=T)\ndata$date &lt;- as.Date(data$date)\n\n# 取数据的最后10行，绘制连接散点图\ndata |&gt;\n    tail(10) |&gt;\n    ggplot(aes(x = date, y = value)) +\n    geom_line() +   # 添加连线\n    geom_point()    # 添加散点\n\n\n\n\n\n连接散点图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#主题",
    "href": "connected-scatter.html#主题",
    "title": "11  Conn-Scatter",
    "section": "11.3 主题",
    "text": "11.3 主题\n使用 hrbrthemes::theme_ipsum() 函数自定义主题。\n\n\nShow/Hide Code\n# 取数据的最后10行，绘制连接散点图，并自定义主题\ndata |&gt;\n    tail(10) |&gt;\n    ggplot(aes(x = date, y = value)) +\n    geom_line(color = \"grey\") +  # 添加灰色连线\n    geom_point(shape = 21, color = \"black\", fill = \"#69b3a2\", size = 6) +  # 添加带填充色的点\n    theme_ipsum() +  # 应用 hrbrthemes 的主题\n    ggtitle(\"Evolution of bitcoin price\")  # 添加标题\n\n\n\n\n\ntheme_ipsum() 定制主题",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#演变",
    "href": "connected-scatter.html#演变",
    "title": "11  Conn-Scatter",
    "section": "11.4 演变",
    "text": "11.4 演变\n连接散点图也可以是一种强大的技术，用来讲述两个变量演变的故事。\n下面的示例展示了美国名为 Amanda 和 Ashley 的婴儿数量演变。\n\n\nShow/Hide Code\n# 筛选1970年后的女性婴儿，名字为 Ashley 或 Amanda 的数据\ndata &lt;- babynames |&gt;\n  filter(name %in% c(\"Ashley\", \"Amanda\")) |&gt; # 只保留 Ashley 和 Amanda\n  filter(sex == \"F\") |&gt; # 只保留女性\n  filter(year &gt; 1970) |&gt; # 只保留1970年后的数据\n  select(year, name, n) |&gt; # 选择年份、名字和数量\n  spread(key = name, value = n, -1) # 宽数据格式，每列为一个名字\n\n# 绘图：x轴为 Amanda，y轴为 Ashley，标签为年份\ndata |&gt;\n  ggplot(aes(x = Amanda, y = Ashley, label = year)) +\n  geom_point() + # 绘制散点\n  geom_segment(aes(\n    xend = c(tail(Amanda, n = -1), NA), # 连接相邻年份的点\n    yend = c(tail(Ashley, n = -1), NA)\n  ))\n\n\n\n\n\nAshley 和 Amanda 名字在美国的流行演变（1970年后，女婴）\n\n\n\n\n再改进一下，在图表中添加箭头和标签来引导读者：\n\n\nShow/Hide Code\n# 随机选择部分年份用于标签\ntmp_date &lt;- data %&gt;% sample_frac(0.3)\n\n# 绘图\ndata %&gt;%\n  ggplot(aes(x = Amanda, y = Ashley, label = year)) +\n  geom_point(color = \"#69b3a2\") + # 绘制散点\n  geom_text_repel(data = tmp_date) + # 添加年份标签，避免重叠\n  geom_segment(\n    color = \"#69b3a2\",\n    aes(\n      xend = c(tail(Amanda, n = -1), NA), # 连接相邻年份的点\n      yend = c(tail(Ashley, n = -1), NA)\n    ),\n    arrow = arrow(length = unit(0.3, \"cm\")) # 添加箭头\n  ) +\n  theme_ipsum() # 应用主题\n\n\n\n\n\nAshley 和 Amanda 名字在美国的流行演变（带箭头和标签，1970年后，女婴）",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#time-series",
    "href": "connected-scatter.html#time-series",
    "title": "11  Conn-Scatter",
    "section": "11.5 Time series",
    "text": "11.5 Time series\n交互式时间序列图：巴黎 Vélib 自行车租赁数据（前300条）：\n\n\nShow/Hide Code\n# 加载所需包\n# library(dygraphs)      # 用于绘制交互式时间序列图\n# library(xts)           # 用于数据框与 xts 格式转换\n# library(tidyverse)     # 数据处理\n# library(lubridate)     # 处理日期时间\n\n# 读取数据\npath = 'https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/bike.csv'\ndata &lt;- read.table(path, header = TRUE, sep = \",\") %&gt;% head(300) # 取前300行数据\n\n# 将时间列从因子/字符转换为日期时间格式\ndata$datetime &lt;- ymd_hms(data$datetime)\n\n# 创建 xts 对象，dygraph 需要此格式\n# x = 观测值，order.by = 时间索引\ndon &lt;- xts(x = data$count, order.by = data$datetime)\n\n# 绘制交互式时间序列图\ndygraph(don) |&gt;\n    dyOptions(\n        labelsUTC = TRUE,         # 使用 UTC 时间标签\n        fillGraph = TRUE,         # 填充曲线下方区域\n        fillAlpha = 0.1,          # 填充透明度\n        drawGrid = FALSE,         # 不显示网格线\n        colors = \"#D8AE5A\"        # 曲线颜色\n    ) |&gt;\n    dyRangeSelector() |&gt;\n    dyCrosshair(direction = \"vertical\") |&gt;\n    dyHighlight(\n        highlightCircleSize = 5,                  # 鼠标悬停时点的大小\n        highlightSeriesBackgroundAlpha = 0.2,     # 高亮系列的背景透明度\n        hideOnMouseOut = FALSE                    # 鼠标移出时是否隐藏高亮\n    ) |&gt;\n    dyRoller(rollPeriod = 1)                    # 滚动平均窗口大小\n\n\n\n\n交互式时间序列图：巴黎 Vélib 自行车租赁数据（前300条）",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#base-r",
    "href": "connected-scatter.html#base-r",
    "title": "11  Conn-Scatter",
    "section": "11.6 Base R",
    "text": "11.6 Base R\n\n11.6.1 基础\n\n\nShow/Hide Code\n# 构造示例数据\na = c(1:5)                  # x 轴数据，1 到 5\nb = c(5, 3, 4, 5, 5)        # 第一组 y 轴数据\nc = c(4, 5, 4, 3, 1)        # 第二组 y 轴数据\n\n# 绘制第一组数据的连接散点图\nplot(\n    b ~ a,                    # y ~ x 公式\n    type = \"b\",               # 点和线都显示\n    bty = \"l\",                # 只显示左和下边框\n    xlab = \"value of a\",      # x 轴标签\n    ylab = \"value of b\",      # y 轴标签\n    col = rgb(0.2, 0.4, 0.1, 0.7), # 线和点的颜色（半透明绿色）\n    lwd = 3,                  # 线宽\n    pch = 17,                 # 点的形状（三角形）\n    ylim = c(1, 5)            # y 轴范围\n)\n\n# 添加第二组数据的连接散点图\nlines(\n    c ~ a,                    # y ~ x 公式\n    col = rgb(0.8, 0.4, 0.1, 0.7), # 线和点的颜色（半透明橙色）\n    lwd = 3,                  # 线宽\n    pch = 19,                 # 点的形状（实心圆）\n    type = \"b\"                # 点和线都显示\n)\n\n# 添加图例\nlegend(\n    \"bottomleft\",             # 图例位置\n    legend = c(\"Group 1\", \"Group 2\"), # 图例标签\n    col = c(\n        rgb(0.2, 0.4, 0.1, 0.7),\n        rgb(0.8, 0.4, 0.1, 0.7)\n    ),                        # 图例颜色\n    pch = c(17, 19),          # 图例点形状\n    bty = \"n\",                # 不显示图例边框\n    pt.cex = 2,               # 点的大小\n    cex = 1.2,                # 字体大小\n    text.col = \"black\",       # 文字颜色\n    horiz = FALSE,            # 垂直排列\n    inset = c(0.1, 0.1)       # 图例内边距\n)\n\n\n\n\n\n基础 R 语言绘制连接散点图（两组数据）\n\n\n\n\n\n\n11.6.2 背景图\n\n\nShow/Hide Code\n# 加载图片读取包\nlibrary(jpeg)\nlibrary(png)\n\n# 读取PNG图片作为背景\nmy_image &lt;- readPNG(\"./image/R_full_medium.png\")\n\n# 设置空白绘图区，不画任何点\nplot(1:2, type='n', main=\"\", xlab=\"x\", ylab=\"y\")\n\n# 获取绘图区参数，并将图片填充到指定区域\nlim &lt;- par()\nrasterImage(my_image, \n            xleft=1, xright=2, \n            ybottom=1.3, ytop=1.7)\n\n# 添加网格线\ngrid()\n\n# 在图片上添加连接散点图\nlines(\n  x=c(1, 1.2, 1.4, 1.6, 1.8, 2.0), \n  y=c(1, 1.3, 1.7, 1.6, 1.7, 1.0), \n  type=\"b\", lwd=5, col=\"black\"\n)\n\n\n\n\n\n在背景图片上绘制连接散点图（基础R）\n\n\n\n\n\n\n11.6.3 lubridate()\n使用日期前，务必使用 lubridate() 把 “日期” 转化为 日期/时间格式。\n\n\nShow/Hide Code\n# 设置随机种子，保证结果可复现\nset.seed(124)\n\n# 构造日期字符串，格式为 \"2015/03/XX\"，XX为1到31中的随机6个数字\ndate &lt;- paste(\"2015/03/\", sample(seq(1, 31), 6), sep = \"\")\n\n# 随机生成6个1到100之间的整数，作为数值\nvalue &lt;- sample(seq(1, 100), 6)\n\n# 将日期和数值合并为数据框\ndata &lt;- data.frame(date, value)\n\n# 将日期列转换为 Date 类型，便于后续处理和绘图\ndata$date &lt;- as.Date(data$date)\n\n# 按照日期升序排列数据\ndata &lt;- data[order(data$date), ]\n\n# 绘制连接散点图\nplot(\n    data$value ~ data$date,                 # y轴为value，x轴为date\n    type = \"b\",                             # 同时绘制点和线\n    lwd = 3,                                # 线宽为3\n    col = rgb(0.1, 0.7, 0.1, 0.8),          # 线和点的颜色（半透明绿色）\n    ylab = \"value of ...\",                  # y轴标签\n    xlab = \"date\",                          # x轴标签\n    bty = \"l\",                              # 只显示左和下边框\n    pch = 20,                               # 点的形状（实心圆）\n    cex = 4                                 # 点的大小\n)\n\n# 添加水平辅助线，y轴从0到100，每隔10画一条灰色线\nabline(h = seq(0, 100, 10), col = \"grey\", lwd = 0.8)\n\n\n\n\n\n使用 lubridate() 处理日期时间\n\n\n\n\n\n\n11.6.4 Cheatsheet\nBase R 提供了许多选项来自定义图表外观。基本上所有功能都可以通过这几个选项实现：\n\nlwd → 线条宽度\ntype → 点之间的连接\nlty → 线条类型\ncex → 形状大小\ncol → 控制颜色\npch → 标记形状\n\n\n\nShow/Hide Code\n# 设置绘图区边距\npar(mar = c(3, 3, 3, 3))\n\nnum &lt;- 0   # 用于lty编号\nnum1 &lt;- 0  # 用于type和lwd编号\n\n# 创建空白绘图区，不显示任何点\nplot(\n  0, 0,\n  xlim = c(0, 21),           # x轴范围\n  ylim = c(0.5, 6.5),        # y轴范围\n  col = \"white\",             # 不显示点\n  yaxt = \"n\",                # 不显示y轴刻度\n  ylab = \"\",                 # y轴标签为空\n  xlab = \"\"                  # x轴标签为空\n)\n\n# 填充图形各行，分别演示不同参数\nfor (i in seq(1, 20)) {\n  # 第一行：pch（点的形状）\n  points(i, 1, pch = i, cex = 3)\n  # 第二行：col（颜色）\n  points(i, 2, col = i, pch = 16, cex = 3)\n  # 第三行：cex（点的大小）\n  points(i, 3, col = \"black\", pch = 16, cex = i * 0.25)\n\n  # 第四行：lty（线型），每隔3个画一条线\n  if (i %in% c(seq(1, 18, 3))) {\n    num = num + 1\n    points(c(i, i + 2), c(4, 4), col = \"black\", lty = num, type = \"l\", lwd = 2)\n    text(i + 1.1, 4.15, num)  # 标注lty编号\n  }\n\n  # 第五、六行：type（线型类型）和lwd（线宽），每隔5个画一组\n  if (i %in% c(seq(1, 20, 5))) {\n    num1 = num1 + 1\n    # type参数演示（点、线、点线、点线重叠）\n    points(\n      c(i, i + 1, i + 2, i + 3),\n      c(5, 5, 5, 5),\n      col = \"black\",\n      type = c(\"p\", \"l\", \"b\", \"o\")[num1],\n      lwd = 2\n    )\n    text(i + 1.1, 5.2, c(\"p\", \"l\", \"b\", \"o\")[num1])  # 标注type类型\n\n    # lwd参数演示（线宽1~4）\n    points(\n      c(i, i + 1, i + 2, i + 3),\n      c(6, 6, 6, 6),\n      col = \"black\",\n      type = \"l\",\n      lwd = num1\n    )\n    text(i + 1.1, 6.2, num1)  # 标注lwd数值\n  }\n}\n\n# 添加y轴标签，分别对应各参数\naxis(\n  2,\n  at = c(1, 2, 3, 4, 5, 6),\n  labels = c(\"pch\", \"col\", \"cex\", \"lty\", \"type\", \"lwd\"),\n  tick = TRUE,\n  col = \"black\",\n  las = 1,\n  cex.axis = 0.8\n)\n\n# 添加x轴标签，1~20\naxis(\n  1,\n  at = seq(1, 20),\n  labels = seq(1, 20),\n  tick = TRUE,\n  col = \"black\",\n  las = 1,\n  cex.axis = 0.8\n)\n\n\n\n\n\nBase R 图形参数速查表：pch, col, cex, lty, type, lwd 的效果演示",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "connected-scatter.html#pearl",
    "href": "connected-scatter.html#pearl",
    "title": "11  Conn-Scatter",
    "section": "11.7 Pearl",
    "text": "11.7 Pearl\n带有文字标签的散点图，见 Section 7.7。",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Conn-Scatter</span>"
    ]
  },
  {
    "objectID": "density2d.html",
    "href": "density2d.html",
    "title": "12  Density 2D",
    "section": "",
    "text": "12.1 PKG\n用来显示两个数值变量之间的关系, 把数值分箱后计算观测数量, 有不同类型的形状:\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(patchwork)      # 用于组合多个图形\nlibrary(hexbin)         # 用于六边形分箱\nlibrary(RColorBrewer)   # 用于调色板",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#点图的问题",
    "href": "density2d.html#点图的问题",
    "title": "12  Density 2D",
    "section": "12.2 点图的问题",
    "text": "12.2 点图的问题\n点太多的时候难以看清信息,黑乎乎一片(或许加上透明度能好一点):\n\n\nShow/Hide Code\n# 生成三组二维正态分布的数据，每组20000个点,3个群体\na &lt;- data.frame(x = rnorm(20000, 10, 1.9), y = rnorm(20000, 10, 1.2))    # 第一组，均值为10\nb &lt;- data.frame(x = rnorm(20000, 14.5, 1.9), y = rnorm(20000, 14.5, 1.9)) # 第二组，均值为14.5\nc &lt;- data.frame(x = rnorm(20000, 9.5, 1.9), y = rnorm(20000, 15.5, 1.9))  # 第三组，x均值9.5，y均值15.5\n\n# 合并三组数据\ndata &lt;- rbind(a, b, c)\n\n# 绘制基础散点图，展示所有数据点的分布情况\nggplot(data, aes(x = x, y = y)) +\n    geom_point()\n\n\n\n\n\n基础散点图,3个群体,由于点太多而看不清",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#geom_bin2d",
    "href": "density2d.html#geom_bin2d",
    "title": "12  Density 2D",
    "section": "12.3 geom_bin2d()",
    "text": "12.3 geom_bin2d()\n\n12.3.1 基础\nggplot2::geom_bin2d() 是一个用于绘制二维直方图的函数, 它将数据分成网格, 并计算每个网格中的点数, 通过颜色深浅来表示点的分布.\n\n\nShow/Hide Code\nggplot(data, aes(x = x, y = y)) +\n  geom_bin2d() +\n  ggtitle(\"geom_bin2d() with default\") +\n  theme_bw()\n\n\n\n\n\n使用默认geom_bin2d绘制二维密度图\n\n\n\n\n\n\n12.3.2 bins\n\n\nShow/Hide Code\nggplot(data, aes(x = x, y = y)) +\n  geom_bin2d(bins = 70) +\n  scale_fill_continuous(type = \"viridis\") + # 使用viridis色彩映射\n  ggtitle(\"geom_bin2d() with bins = 70\") +\n  theme_bw()\n\n\n\n\n\n通过bins参数控制箱的数量\n\n\n\n\n\n\n12.3.3 叠加散点图\n散点图可以叠加在 2D 密度图之上:\n\n\nShow/Hide Code\n# 生成示例数据，x和y分别为1到100的序列加上正态噪声\nsample_data &lt;- data.frame(\n    x_values = 1:100 + rnorm(100, sd = 20),  # x轴数据，添加标准差为20的正态噪声\n    y_values = 1:100 + rnorm(100, sd = 27)   # y轴数据，添加标准差为27的正态噪声\n)\n\n# 绘图\nggplot(sample_data, aes(x_values, y_values)) +\n    # 绘制二维密度的栅格图，fill映射到密度值，不显示等高线\n    stat_density_2d(\n        geom = \"tile\", \n        aes(fill = ..density..), \n        contour = FALSE\n    ) +\n    # 叠加白色散点图，突出每个观测点\n    geom_point(colour = \"white\")\n\n\n\n\n\n使用stat_density2d绘制二维密度图并叠加散点图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#geom_hex",
    "href": "density2d.html#geom_hex",
    "title": "12  Density 2D",
    "section": "12.4 geom_hex()",
    "text": "12.4 geom_hex()\n\n12.4.1 基础\n\n\nShow/Hide Code\n# 使用默认geom_hex()绘制二维密度图\nggplot(data, aes(x = x, y = y)) +\n  geom_hex() +\n  ggtitle(\"geom_hex() with default\") +\n  theme_bw()\n\n\n\n\n\n基础六角二位密度图geom_hex()\n\n\n\n\n\n\nShow/Hide Code\nggplot(data, aes(x = x, y = y)) +\n  geom_hex(bins = 70) +\n  scale_fill_continuous(type = \"viridis\") + # 使用viridis色彩映射\n  ggtitle(\"geom_hex() with bins = 70\") +\n  theme_bw() \n\n\n\n\n\n通过bins参数控制箱的数量",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#geom_density_2d",
    "href": "density2d.html#geom_density_2d",
    "title": "12  Density 2D",
    "section": "12.5 geom_density_2d()",
    "text": "12.5 geom_density_2d()\nstat_density_2d() 与 stat_density_2d() 可以绘制二维密度图\n\n12.5.1 基础\n\n\nShow/Hide Code\n# 仅显示二维密度的等高线\np1 &lt;- ggplot(data, aes(x = x, y = y)) +\n    geom_density_2d()\n\n# 仅显示密度区域\np2 &lt;- ggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..level..), geom = \"polygon\")\n\n# 同时显示密度区域和等高线\np3 &lt;- ggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..level..), geom = \"polygon\", colour = \"white\")\n\n# 使用raster方式显示密度\np4 &lt;- ggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(\n        aes(fill = ..density..), # 填充颜色映射到密度值\n        geom = \"raster\",         # 使用栅格图层\n        contour = FALSE          # 不显示等高线\n    ) +\n    scale_x_continuous(expand = c(0, 0)) + # 去除x轴边距\n    scale_y_continuous(expand = c(0, 0)) + # 去除y轴边距\n    theme(legend.position = 'none')        # 不显示图例\n\np1 + p2 + p3 + p4 + plot_layout(ncol = 2) \n\n\n\n\n\ngeom_density_2d()\n\n\n\n\n\n\n12.5.2 Palette\n\n\nShow/Hide Code\n# 使用数字索引选择调色板, direction = -1 反转调色方向\nggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) + # 绘制二维密度的栅格图\n    scale_fill_distiller(palette = 4, direction = -1) + # palette=4表示第4个内置调色板, direction=-1表示反转色阶\n    scale_x_continuous(expand = c(0, 0)) + # 去除x轴边距\n    scale_y_continuous(expand = c(0, 0)) + # 去除y轴边距\n    theme(legend.position = 'none')\n\n\n\n\n\n使用数字索引选择调色板, direction = -1 反转调色方向\n\n\n\n\n\n\nShow/Hide Code\n# 使用数字索引选择调色板, direction = 1 保持默认方向\nggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) +\n    scale_fill_distiller(palette = 4, direction = 1) + # direction=1为默认方向\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme(legend.position = 'none')\n\n\n\n\n\n使用数字索引选择调色板, direction = 1 保持默认方向\n\n\n\n\n\n\nShow/Hide Code\n# 使用调色板名称调用,如\"Spectral\"\nggplot(data, aes(x = x, y = y)) +\n    stat_density_2d(aes(fill = ..density..), geom = \"raster\", contour = FALSE) +\n    scale_fill_distiller(palette = \"Spectral\", direction = 1) + # palette参数直接指定调色板名称\n    scale_x_continuous(expand = c(0, 0)) +\n    scale_y_continuous(expand = c(0, 0)) +\n    theme(legend.position = 'none')\n\n\n\n\n\n使用调色板名称调用,如Spectral",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "density2d.html#hexbin",
    "href": "density2d.html#hexbin",
    "title": "12  Density 2D",
    "section": "12.6 hexbin",
    "text": "12.6 hexbin\n使用 hexbin 和 RColorBrewer 绘制基础六边形二维密度图:\n\n\nShow/Hide Code\n# library(hexbin)         # 用于六边形分箱\n# library(RColorBrewer)   # 用于调色板\n\n# 生成数据：x和y分别为正态分布，均值分别为1.5和1.6，共5000个点\nx &lt;- rnorm(mean = 1.5, 5000)\ny &lt;- rnorm(mean = 1.6, 5000)\n\n# 进行六边形分箱，xbins控制六边形的数量\nbin &lt;- hexbin(x, y, xbins = 40)\n\n# 生成颜色映射，使用Spectral调色板并反转\nmy_colors = colorRampPalette(rev(brewer.pal(11, 'Spectral')))\n\n# 绘制六边形二维密度图，不显示主标题和图例\nplot(bin, main = \"\", colramp = my_colors, legend = FALSE)\n\n\n\n\n\n使用hexbin包和RColorBrewer绘制基础六边形二维密度图",
    "crumbs": [
      "Correlation",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Density 2D</span>"
    ]
  },
  {
    "objectID": "bar.html",
    "href": "bar.html",
    "title": "13  Bar",
    "section": "",
    "text": "1",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Bar</span>"
    ]
  },
  {
    "objectID": "spider.html",
    "href": "spider.html",
    "title": "14  Spider",
    "section": "",
    "text": "1",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Spider</span>"
    ]
  },
  {
    "objectID": "wordcloud.html",
    "href": "wordcloud.html",
    "title": "15  Wordcloud",
    "section": "",
    "text": "1",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wordcloud</span>"
    ]
  },
  {
    "objectID": "parallel.html",
    "href": "parallel.html",
    "title": "16  Parallel",
    "section": "",
    "text": "1",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Parallel</span>"
    ]
  },
  {
    "objectID": "lollipop.html",
    "href": "lollipop.html",
    "title": "17  Lollipop",
    "section": "",
    "text": "1",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Lollipop</span>"
    ]
  },
  {
    "objectID": "cir-bar.html",
    "href": "cir-bar.html",
    "title": "18  Cir-bar",
    "section": "",
    "text": "1",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Cir-bar</span>"
    ]
  },
  {
    "objectID": "table.html",
    "href": "table.html",
    "title": "19  Table",
    "section": "",
    "text": "1",
    "crumbs": [
      "Ranking",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Table</span>"
    ]
  },
  {
    "objectID": "part-of-a-whole.html",
    "href": "part-of-a-whole.html",
    "title": "Part of a Whole",
    "section": "",
    "text": "1",
    "crumbs": [
      "Part of a Whole"
    ]
  },
  {
    "objectID": "group-bar.html",
    "href": "group-bar.html",
    "title": "20  Group bar",
    "section": "",
    "text": "1",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Group bar</span>"
    ]
  },
  {
    "objectID": "treemap.html",
    "href": "treemap.html",
    "title": "21  Treemap",
    "section": "",
    "text": "1",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Treemap</span>"
    ]
  },
  {
    "objectID": "pie.html",
    "href": "pie.html",
    "title": "22  Pie",
    "section": "",
    "text": "22.1 PKG\n饼图在科研数据可视化领域非常不受待见的图形, 但在商业领域仍然有其应用场景.\n谨慎使用饼图，或者，使用 条形图、棒棒糖图、树状图 等替代方案。\nShow/Hide Code\nlibrary(tidyverse)\nlibrary(RColorBrewer) # 用于调色板",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Pie</span>"
    ]
  },
  {
    "objectID": "pie.html#饼图的问题",
    "href": "pie.html#饼图的问题",
    "title": "22  Pie",
    "section": "22.2 饼图的问题",
    "text": "22.2 饼图的问题\n\n22.2.1 Bad by definition\n饼图是一个被分成扇区的圆，每个扇区代表整体的一部分。它通常用于显示百分比，其中所有扇区的总和等于 100%。\n可读性太差了!，尤其是当扇区的大小相似时。人们很难准确地比较不同扇区的大小。\n\n\n\n饼图,你能找出组间趋势吗?\n\n\n同样的数据用条形图表示就清晰多了:\n\n\n\n柱状图看起来比饼图清晰多了\n\n\n\n\n22.2.2 Even worse\n饼图还有一些讨厌的问题:\n\n3D 版饼图\n总和不为 100%\n项目太多\n爆炸/分散式饼图(exploded pie charts)\n\n\n\n22.2.3 Alternatives\n最好的替代是条形图,如果数据很多,可以使用棒棒糖图,会更优雅一点.\n基于世界上几个国家 武器销售 数量的例子：\n\n\n\n世界上部分国家武器销售数量,美国遥遥领先\n\n\n为了描述整体的组成,还可以使用树状图, 例如:\n\n\n\n树状图,武器销售占比",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Pie</span>"
    ]
  },
  {
    "objectID": "pie.html#pie",
    "href": "pie.html#pie",
    "title": "22  Pie",
    "section": "22.3 pie()",
    "text": "22.3 pie()\nBase R::pie() 函数用于绘制饼图.\n\n22.3.1 基础\n\n\nShow/Hide Code\nProp &lt;- c(3,7,9,1,2)\npie(Prop)\n\n\n\n\n\n基础饼图\n\n\n\n\n\n\n22.3.2 labels\n\n\nShow/Hide Code\npie(Prop , labels = c(\"Gr-A\",\"Gr-B\",\"Gr-C\",\"Gr-D\",\"Gr-E\"))\n\n\n\n\n\n带标签的饼图\n\n\n\n\n\n\n22.3.3 Non-circular\n可以通过 edges 参数(多边形的边数)来绘制非圆形的饼图, 例如:\n\n\nShow/Hide Code\npie(Prop, labels = c(\"Gr-A\", \"Gr-B\", \"Gr-C\", \"Gr-D\", \"Gr-E\"), edges = 50)\n\n\n\n\n\n非圆形饼图\n\n\n\n\n\n\n22.3.4 Shadow\n\n\nShow/Hide Code\npie(\n  Prop,\n  labels = c(\"Gr-A\", \"Gr-B\", \"Gr-C\", \"Gr-D\", \"Gr-E\"),\n  density = 10, # 设置阴影密度\n  angle = c(20, 90, 30, 10, 0) # 设置每个扇区的阴影角度\n)\n\n\n\n\n\n带阴影的饼图\n\n\n\n\n\n\n22.3.5 颜色\n使用 col 更改组颜色，使用 border 更改边框颜色。\n\n\nShow/Hide Code\n# library(RColorBrewer) # 用于调色板\n\nmyPalette &lt;- brewer.pal(5, \"Set2\")\n\npie(\n  Prop,\n  labels = c(\"Gr-A\", \"Gr-B\", \"Gr-C\", \"Gr-D\", \"Gr-E\"),\n  border = \"white\", # 设置边框颜色为白色\n  col = myPalette # 使用调色板\n)\n\n\n\n\n\n定制饼图颜色",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Pie</span>"
    ]
  },
  {
    "objectID": "pie.html#geom_bar",
    "href": "pie.html#geom_bar",
    "title": "22  Pie",
    "section": "22.4 geom_bar()",
    "text": "22.4 geom_bar()\n由于饼图不受待见, ggplot2 没有提供专门的饼图函数, 但可以使用 geom_bar() 绘制饼图. 核心技术:\n\n输入数据框有 2 列：group 和 value\ngeom_bar() 函数创建一个仅包含一个条形的堆叠条形图\ncoord_polar() 使其呈圆形\n\n\n22.4.1 基础\n\n\nShow/Hide Code\n# 创建数据框\ndata &lt;- data.frame(\n  group = LETTERS[1:5],\n  value = c(13, 7, 9, 21, 2)\n)\n# 绘制饼图\nggplot(data, aes(x = \"\", y = value, fill = group)) +\n  geom_bar(stat = \"identity\", width = 1) + # identity 创建堆叠条形图\n  coord_polar(\"y\", start = 0) +  # 将条形图转换为极坐标系\n  scale_fill_brewer(palette = 2) # 设置配色方案\n\n\n\n\n\n基础饼图\n\n\n\n\n\n\n22.4.2 去坐标轴\n上面的图看起来不太对,不像饼图, 继续移除 x 轴和 y 轴的标签,和背景:\n\n\nShow/Hide Code\n# 移除x 轴和 y 轴的标签和背景\nggplot(data, aes(x = \"\", y = value, fill = group)) +\n  geom_bar(stat = \"identity\", width = 1) + # identity 创建堆叠条形图\n  coord_polar(\"y\", start = 0) + # 将条形图转换为极坐标系\n  scale_fill_brewer(palette = 2) + # 设置配色方案\n  theme_void() # 移除背景和坐标轴\n\n\n\n\n\n改进后的饼图\n\n\n\n\n\n\n22.4.3 标签\n因为使用了 coord_polar()，所以计算文本标签的位置比较复杂.\n\n\nShow/Hide Code\n# 1. 按 group 降序排列，计算每组所占百分比和标签位置\ndata &lt;- data |&gt; \n    arrange(desc(group)) |&gt; # 按 group 降序排列\n    mutate(\n        prop = value / sum(data$value) * 100, # 计算百分比\n        ypos = cumsum(prop) - 0.5 * prop      # 计算标签位置\n    )\n\n# 2. 绘制饼图\nggplot(data, aes(x = \"\", y = prop, fill = group)) +\n    geom_bar(stat = \"identity\", width = 1, color = \"white\") + # 绘制堆叠条形图\n    coord_polar(\"y\", start = 0) +                             # 转换为极坐标系（饼图）\n    geom_text(\n        aes(y = ypos, label = group),                           # 添加标签\n        color = \"white\", size = 6\n    ) +\n    scale_fill_brewer(palette = 2) +                      # 设置配色方案\n    theme_void() +                                            # 移除背景和坐标轴\n    theme(legend.position = \"none\")                          # 移除图例\n\n\n\n\n\n带标签和自定义配色的饼图\n\n\n\n\n大功告成!",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Pie</span>"
    ]
  },
  {
    "objectID": "donut.html",
    "href": "donut.html",
    "title": "23  Donut",
    "section": "",
    "text": "23.1 问题\n与饼图相比，环形图在视觉上更具吸引力，但是也存在饼图的问题,见 Chapter 22",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "donut.html#pkg",
    "href": "donut.html#pkg",
    "title": "23  Donut",
    "section": "23.2 PKG",
    "text": "23.2 PKG\n\n\nShow/Hide Code\nlibrary(tidyverse)",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "donut.html#base-r",
    "href": "donut.html#base-r",
    "title": "23  Donut",
    "section": "23.3 Base R",
    "text": "23.3 Base R\n先用 pie() 绘制一个饼图，再用Base R::symbols() 叠加略小白色圆形来形成环形效果。\n\n\nShow/Hide Code\n# 定义各部分的比例\nProp &lt;- c(3, 7, 9, 1, 2)\n\n# 绘制饼图\npie(Prop)\n\n# 在饼图中央添加一个白色圆形，形成环形图效果\nsymbols(\n    0,                # x坐标\n    0,                # y坐标\n    circles = 0.5,    # 圆的半径\n    inches = FALSE,   # 使用坐标单位而非英寸\n    add = TRUE,       # 在已有图形上添加\n    bg = \"white\",     # 圆的填充色为白色\n    fg = \"black\"      # 圆的边框色为黑色\n)\n\n\n\n\n\n使用Base R绘制环形图（Donut Chart）示例\n\n\n\n\n更为复杂的 自定义函数 方法,不推荐",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "donut.html#geom_bar",
    "href": "donut.html#geom_bar",
    "title": "23  Donut",
    "section": "23.4 geom_bar()",
    "text": "23.4 geom_bar()\n核心思路：\n\ngeom_bar() 绘制堆叠条形图\ncoord_polar() 堆叠的矩形切换到环形\nxlim() 从饼图切换到环形图 (中间添加一个空白圆圈)\n\n\n23.4.1 基础\n\n\nShow/Hide Code\nggplot(diamonds, aes(x = 2, fill = cut)) + \n  geom_bar(color = \"white\") +           # 绘制每个cut的条形，白色边框\n  xlim(0.5, 2.5) +                      # 设置x轴范围，决定中间空白洞的大小\n  coord_polar(theta = \"y\") +            # 使用极坐标，将条形图转换为圆环（甜甜圈）\n  scale_fill_brewer(palette = 2) +      # 设置配色方案\n  theme_void()                          # 移除所有背景和坐标轴，突出图形主体\n\n\n\n\n\n使用geom_bar()绘制环形图（Donut Chart）示例\n\n\n\n\n\n\n23.4.2 标签\n\n\nShow/Hide Code\n# 修改label来更改文本\n# 修改aes(label = label, x = 3) 的 X 来控制标签位置\n\n# 计算每个cut的数量和比例\ndiamonds_summary &lt;- diamonds |&gt;\n  count(cut) |&gt;\n  mutate(\n    prop = n / sum(n), # 计算每个cut的比例\n    percentage = round(prop * 100, 1), # 转换为百分比并保留一位小数\n    label = paste0(cut, \": \\n\", n, \" (\", percentage, \"%)\") # 组合标签文本\n  )\n\n# 绘制带标签的环形图\nggplot(diamonds_summary, aes(x = 2, y = n, fill = cut)) +\n  geom_bar(\n    stat = \"identity\", # 使用实际的y值（n）绘制条形\n    color = \"white\", # 条形之间的分隔线为白色\n    width = 1 # 条形宽度\n  ) +\n  xlim(0.5, 3) + # 控制中间空白圆圈的大小  \n  geom_text(\n    aes(label = label, x = 3), # 设置标签内容\n    position = position_stack(vjust = 0.5), # 标签居中显示在每个扇区\n    color = \"black\", # 标签颜色\n    size = 3.5, # 标签字体大小\n    fontface = \"bold\" # 标签字体加粗\n  ) +\n  coord_polar(theta = \"y\") + # 极坐标转换为环形图\n  scale_fill_brewer(palette = 2) + # 设置配色方案\n  theme_void() + # 移除背景和坐标轴\n  theme(legend.position = \"none\") # 隐藏图例，标签已包含信息\n\n\n\n\n\n带标签的环形图（Donut Chart），显示每个cut的数量和百分比",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "donut.html#厚度",
    "href": "donut.html#厚度",
    "title": "23  Donut",
    "section": "23.5 厚度",
    "text": "23.5 厚度\nxlim() 函数可以控制环形的厚度, 通过调整 xlim() 的范围来实现。\n看不懂就直接删除coord_polar()，就能看到环形的厚度变化。",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Donut</span>"
    ]
  },
  {
    "objectID": "dendrogram.html",
    "href": "dendrogram.html",
    "title": "24  Dendrogram",
    "section": "",
    "text": "1",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Dendrogram</span>"
    ]
  },
  {
    "objectID": "circular.html",
    "href": "circular.html",
    "title": "25  Circular",
    "section": "",
    "text": "1",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Circular</span>"
    ]
  },
  {
    "objectID": "waffle.html",
    "href": "waffle.html",
    "title": "26  Waffle",
    "section": "",
    "text": "26.1 PKG\nWaffle chart 通过一个小方块网格直观地表示分类数据，形状像华夫饼。\n每个小方块代表一个单位，每个类别有一种颜色，通常用于展示百分比或比例数据。\nwaffle 包提供两种不同的 API（应用程序编程接口）。第一种类似于基础 R 语法，使用 waffle() 函数。第二种 geom_waffle() 符合 tidyverse 理念，可以无缝集成到 ggplot2 调用中。\nShow/Hide Code\nlibrary(waffle)\nlibrary(tidyverse)   \nlibrary(ggtext)    \nlibrary(rnaturalearth) # 获取世界地图数据\nlibrary(sf)           # 处理空间数据",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Waffle</span>"
    ]
  },
  {
    "objectID": "waffle.html#base-r",
    "href": "waffle.html#base-r",
    "title": "26  Waffle",
    "section": "26.2 Base R",
    "text": "26.2 Base R\n\n26.2.1 基本\n\n\nShow/Hide Code\n# 构造示例数据\ngroup &lt;- c(\"group-1\", \"group-2\", \"group-3\")\nvalue &lt;- c(13, 5, 22)\ndata &lt;- data.frame(group, value)\n\n# 绘制华夫饼图\nwaffle(data)\n\n\n\n\n\n基础 R 语言绘制华夫饼图\n\n\n\n\n\n\n26.2.2 rows\n\n\nShow/Hide Code\nwaffle(data, rows = 5)\n\n\n\n\n\n通过 rows 参数设置华夫饼图的行数\n\n\n\n\n\n\n26.2.3 colors\n\n\nShow/Hide Code\nwaffle(data, rows = 5, colors = c(\"#fb5607\", \"#ff006e\", \"#8338ec\"))\n\n\n\n\n\n通过 colors 参数设置华夫饼图的颜色\n\n\n\n\n\n\n26.2.4 Legend\n通过 legend_pos 参数设置图例位置\n\n\nShow/Hide Code\nwaffle(\n    data,\n    rows = 5,\n    colors = c(\"#fb5607\", \"#ff006e\", \"#8338ec\"),\n    legend_pos = \"bottom\"\n)\n\n\n\n\n\n通过 legend_pos 参数设置图例位置",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Waffle</span>"
    ]
  },
  {
    "objectID": "waffle.html#ggplot2",
    "href": "waffle.html#ggplot2",
    "title": "26  Waffle",
    "section": "26.3 ggplot2",
    "text": "26.3 ggplot2\ngeom_waffle() 可以在 ggplot2 中使用。\n\n26.3.1 基本\n\n\nShow/Hide Code\nggplot(data, aes(fill=group, values=value)) +\n  geom_waffle() +\n  theme_void()\n\n\n\n\n\n使用 ggplot2 绘制华夫饼图\n\n\n\n\n\n\n26.3.2 颜色\n\n\nShow/Hide Code\nggplot(data, aes(fill=group, values=value)) +\n  geom_waffle(color = \"white\") + # 添加白色边框\n  scale_fill_brewer(palette = \"Set2\") + # 使用 Set2 调色板\n  theme_void()\n\n\n\n\n\n使用 ggplot2 绘制华夫饼图，修改颜色\n\n\n\n\n\n\n26.3.3 Legend\n\n\nShow/Hide Code\nggplot(data, aes(fill=group, values=value)) +\n  geom_waffle() +\n  scale_fill_manual(\n    values = c(\"#999999\", \"#E69F00\", \"#56B4E9\"),\n    labels = c(\"First group\", \"Second group\", \"Third group\")) +\n  theme_void()\n\n\n\n\n\n使用 ggplot2 绘制华夫饼图，修改图例\n\n\n\n\n\n\n26.3.4 subgroup\n通过对group分面，可以得到每个组的子组分布情况。\n\n\nShow/Hide Code\n# 构造带有 subgroup 的示例数据\ndata &lt;- data.frame(\n    group = c(\n        \"First group\",\n        \"First group\",\n        \"First group\",\n        \"First group\",\n        \"First group\",\n        \"First group\",\n        \"Second group\",\n        \"Second group\",\n        \"Second group\",\n        \"Second group\",\n        \"Third group\",\n        \"Third group\"\n    ),\n    subgroup = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"A\", \"B\", \"C\", \"D\", \"A\", \"B\"),\n    value = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)\n)\n\nggplot(data = data, aes(fill = subgroup, values = value)) +\n    geom_waffle(color = \"white\", size = 1.125, n_rows = 6) +\n    facet_wrap(~group, ncol = 1) + # 关键是分面 facet_wrap\n    theme_void()\n\n\n\n\n\n使用 ggplot2 绘制华夫饼图，分组显示\n\n\n\n\n\n\n26.3.5 颜色\n可以使用 scale_fill_manual() 来修改颜色。\n\n\nShow/Hide Code\nggplot(data = data, aes(fill = subgroup, values = value)) +\n    geom_waffle(color = \"white\", size = 1.125, n_rows = 6) +\n    facet_wrap(~group, ncol = 1) +\n    theme_void() +\n    scale_fill_manual(\n        values = c(\n            \"#69b3a2\",\n            \"#404080\",\n            \"#FFA07A\",\n            \"#FFD700\",\n            \"#FF6347\",\n            \"#4682B4\"\n        )\n    )\n\n\n\n\n\nscale_fill_manual() 修改颜色\n\n\n\n\n或者使用我更爱的 scale_fill_brewer(palette = \"Set2\") 来使用预定义的调色板。\n\n\nShow/Hide Code\nggplot(data = data, aes(fill = subgroup, values = value)) +\n    geom_waffle(color = \"white\", size = 1.125, n_rows = 6) +\n    facet_wrap(~group, ncol = 1) +\n    theme_void() +\n    scale_fill_brewer(palette = \"Set2\")\n\n\n\n\n\nscale_fill_brewer() 更改颜色",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Waffle</span>"
    ]
  },
  {
    "objectID": "waffle.html#pearl",
    "href": "waffle.html#pearl",
    "title": "26  Waffle",
    "section": "26.4 Pearl",
    "text": "26.4 Pearl\n2010-2020年全球 各大洲小麦产量 分布的华夫饼图：\n\n\n\n2010-2020年全球各大洲小麦/玉米产量分布\n\n\n大西洋飓风数量 分布的华夫饼图：\n\n\n\n大西洋飓风数量分布的华夫饼图\n\n\n不同大洲作为动物饲料消耗的 谷物比例:\n\n\n\n不同大洲作为动物饲料消耗的谷物比例",
    "crumbs": [
      "Part of a Whole",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Waffle</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "27  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Summary</span>"
    ]
  }
]