# Table {#sec-table}

## PKG

```{r}
library(tidyverse) # 数据处理和可视化
library(gt) # 表格包
library(gtsummary) # 表格包
library(gtExtras) # gt 扩展包
library(htmltools) # HTML 工具包
# install.packages('cardx') 
library(survival) # 生存分析包
```

`R` 的表格包有很多, 主要分为以下几类:

![Table Package](./image/table-package.png)


## `gt family`

包括 `gt`、`gtsummary` 和 `gtExtras`.

### `gt`

`gt` ([官方文档](https://gt.rstudio.com/)) 是兼容 tidyverse 的表格包: 

#### 基本

```{r}
#| fig-cap: "使用 gt 包创建表格"

# 创建一个简单的数据框
data = data.frame(
  Country = c("USA", "China", "India", "Brazil"), # 国家名称
  Capitals = c("Washington D.C.", "Beijing", "New Delhi", "Brasília"), # 首都
  Population = c(331, 1441, 1393, 212), # 人口（百万）
  GDP = c(21.43, 14.34, 2.87, 1.49) # GDP（万亿美元）
)

gt(data)

```

#### 标题

使用`tab_header()`函数可以添加标题和副标题(兼容markdown / html语法):

```{r}
#| fig-cap: "使用 gt 包创建表格并添加标题和副标题(markdown 语法)"
data |>
  gt() |>
  tab_header(
    title = html("<span style='color:red;'>A red title</span>"), # 使用 html 语法
    subtitle = md("Pretty *cool subtitle* too, `isn't it?`") # 使用 markdown 语法
  )
```

甚至还可以用图像作为标题:

```{r}
#| fig-cap: "使用 gt 包创建表格并添加图像作为标题"

data |>
  gt() |>
  tab_header(
    title = md("**A table with an image as title**"),
    subtitle = html(
      "<div style='text-align:center;'><img src='./image/Rlogo.png' height='60'></div>"
    )
  )

```

#### 跨列标题

`tab_spanner()` 函数可以创建跨列的标题(合并单元格):

```{r}
#| fig-cap: "使用 gt 包创建表格并添加跨列标题"

data |>
  gt() |>
   tab_spanner(
    label = "Number",
    columns = c(GDP, Population)) |>
  tab_spanner(
    label = "Label",
    columns = c(Country, Capitals)
  )
```


#### 脚注

`tab_footnote()` 函数的 `footnote` 和 `locations` 参数添加引用:

```{r}
#| fig-cap: "使用 gt 包为表格添加脚注"

# 创建一个包含行星信息的数据框
data = data.frame(
    Planet = c("Earth", "Mars", "Jupiter", "Venus"), # 行星名称
    Moons = c(1, 2, 79, 0), # 卫星数量
    Distance_from_Sun = c(149.6, 227.9, 778.3, 108.2), # 距离太阳距离（百万公里）
    Diameter = c(12742, 6779, 139822, 12104) # 直径（公里）
)

data |>
  gt() |>
  tab_footnote(
    footnote = md("Measured in **millions** of Km"),
    locations = cells_column_labels(columns = Distance_from_Sun)
  )

```

还可以添加多个角注:

```{r}
#| fig-cap: "使用 gt 包为表格添加多个脚注"

# 使用 gt 包创建表格，并为不同的列和表格整体添加多个脚注
data |>
    gt() |>
    tab_footnote(
        footnote = md("Measured in **millions** of Km"), # 为 Distance_from_Sun 列添加脚注
        locations = cells_column_labels(columns = Distance_from_Sun)
    ) |>
    tab_footnote(
        footnote = md("Measured in **Km**"), # 为 Diameter 列添加脚注
        locations = cells_column_labels(columns = Diameter)
    ) |>
    tab_footnote(
        footnote = md("The original data are from *Some Organization*") # 为整个表格添加脚注
    ) |>
    opt_footnote_marks(marks = "LETTERS") # 设置脚注标记为大写字母

```

### `gtsummary`

`gtsummary` 是 `gt` 的一个扩展包, 主要用于创建统计摘要表格.

它连接了数据分析与表格创建之间的桥梁，允许用户直接从分析输出中无缝生成摘要表格, 特别适合医学和社会科学领域的研究报告。

#### 回归模型摘要

`tbl_regression()` 函数可以创建回归模型的摘要表格:

```{r}
#| fig-cap: "使用 `tbl_regression()` 创建回归模型摘要表格"
# 示例数据
data("Titanic")
df = as.data.frame(Titanic)

# 建立logistics回归模型
model = glm(Survived ~ Age + Class + Sex + Freq, family = binomial, data = df)

# 使用 gtsummary 包创建表格
model |>
  tbl_regression()
```


增加更多统计量:

```{r}
#| fig-cap: "使用 `tbl_regression()` 创建回归模型摘要表格并增加统计量"
model |>
  tbl_regression(intercept = TRUE, conf.level = 0.9) |> # 增加截距和置信区间
  add_glance_source_note() |> # 添加模型摘要信息
  add_global_p() 
```

#### 多模型合并

```{r}
#| fig-cap: "使用 `tbl_merge()` 合并多个模型的回归结果表格"
data(trial)

model_reglog <- glm(response ~ trt + grade, data = trial, family = binomial) |>
  tbl_regression()

model_cox  <- coxph(Surv(ttdeath, death) ~ trt + grade, data = trial) |>
  tbl_regression()

tbl_merge(
  list(model_reglog, model_cox),
  tab_spanner = c("**Tumor Response**", "**Time to Death**")
)
```


### `gtExtras`

`gtExtras` 增强并扩展了 `gt` 包的功能。可以创建更复杂和美观的表格。

#### 汇总原始数据

结合 `grouped by`, 制作 “每个单元格有很多数据” 的表格

```{r}
#| fig-cap: "结合 `grouped by`, 制作“每个单元格有很多数据”的表格"

data(iris)

# 创建一个包含鸢尾花数据的数据框
agg_iris = iris |>
  group_by(Species) |>
  summarize(
    Sepal.L = list(Sepal.Length),
    Sepal.W = list(Sepal.Width),
    Petal.L = list(Petal.Length),
    Petal.W = list(Petal.Width)
  )

# 使用 gtExtras 包创建表格
agg_iris |>
  gt()

```

#### 折线图

`gt_plt_sparkline()` 在表格单元格中创建折线图。

使用刚才的 `agg_iris` 汇总数据框:

```{r}
#| fig-cap: "使用 `gt_plt_sparkline()` 创建折线图"

agg_iris |>
  gt() |>
  gt_plt_sparkline(Sepal.L) |> # 在 Sepal.L 列中添加折线图
  gt_plt_sparkline(Sepal.W) |> # 在 Sepal.W 列中添加折线图
  gt_plt_sparkline(Petal.L) |> # 在 Petal.L 列中添加折线图
  gt_plt_sparkline(Petal.W)    # 在 Petal.W 列中添加折线图
```

#### 分布图

`gt_plt_dist()` 在表格单元中创建分布图。图表类型取决于 type 参数:

还是使用 `agg_iris` 汇总数据框:

```{r}
#| fig-cap: "使用 `gt_plt_dist()` 创建分布图"

agg_iris |>
  gt() |>
  gt_plt_dist(
    Sepal.L,
    type = "density" # 密度图
  ) |>
  gt_plt_dist(
    Sepal.W,
    type = "boxplot" # 箱线图
  ) |>
  gt_plt_dist(
    Petal.L,
    type = "histogram" # 直方图
  ) |>
  gt_plt_dist(
    Petal.W,
    type = "rug_strip" # 裸条图
  ) 
  
```

#### 条形图

`gt_plt_bar_pct()` 不需要汇总数据。这个图表实际上是一个得分条形图, 最大值是 100% 

```{r}
#| fig-cap: "使用 `gt_plt_bar_pct()` 创建得分条形图"
p <- head(iris) |>
  gt() |>
  gt_plt_bar_pct(
    Sepal.Length,
    labels = TRUE, # 显示百分比标签
    # scaled = FALSE # “我提供的是原始数值，它们还没有被处理成百分比，你需要自己动手去计算和缩放。”
    # scaled = TRUE # “你不需要做任何计算了。我提供给你的数值已经是最终百分比了，请直接使用。”

  ) |>
  gt_plt_bar_pct(
    Sepal.Width,
    labels=FALSE,
    fill = "forestgreen"
  )
p
```

#### 摘要图表

`gt_plt_summary()` 制作摘要图表,甚至还能交互查看,非常方便和美观

注意需要先指定列类型

```{r}
#| fig-cap: "使用 `gt_plt_summary()` 制作摘要图表"

iris |>
  gt_plt_summary()
```

#### 主题

Excel 主题:

```{r}
#| fig-cap: "`gt_theme_excel()` Excel 主题"

head(mtcars) |>
  gt() |>
  gt_theme_excel()
```

538(FiveThirtyEight) 主题: 

```{r}
#| fig-cap: "`gt_theme_538()` 538(FiveThirtyEight) 主题"

head(mtcars) |>
  gt() |>
  gt_theme_538()
```

ESPN 主题:

```{r}
#| fig-cap: "`gt_theme_espn()` ESPN 主题"

head(mtcars) |>
  gt() |>
  gt_theme_espn()
```

NY Times 主题:

```{r}
#| fig-cap: "`gt_theme_nytimes()` NY Times 主题"

head(mtcars) |>
  gt() |>
  gt_theme_nytimes()
```


点阵 (dot matrix) 主题:

```{r}
#| fig-cap: "`gt_theme_dot_matrix()` 点阵 (dot matrix) 主题"

head(mtcars) |>
  gt() |>
  gt_theme_dot_matrix()
```

黑暗主题:

```{r}
#| fig-cap: "`gt_theme_dark()` 黑暗主题"

head(mtcars) |>
  gt() |>
  gt_theme_dark()
```

PFF 主题:

```{r}
head(mtcars) |>
  gt() |>
  gt_theme_pff()
```

卫报 Guardian 主题:

```{r}
#| fig-cap: "`gt_theme_guardian()` 卫报 Guardian 主题"

head(mtcars) |>
  gt() |>
  gt_theme_guardian()
```

## `kable family`

---------------
**写到这里了!**
---------------


## Other


## Interactive
